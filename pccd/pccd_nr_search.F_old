      Subroutine Pccd_nr_search(Grd,Grd_oo,Grd_vv,Grd_vo,Grd_ov,
     +                          Grd_stata,Grd_statb,B_like,Lenoo,
     +                          Lenvv,Lenvo,Nbas,Nocc,Nvrt,Work,
     +                          Maxcor,Iuhf,Ispin,Conv_tol,Icycle)

      Implicit Double Precision(A-H,O-Z)
      Logical B_like, Sym_packed 
      Logical Symmetry, Apprx_CC_hess, Apprx_HF_hess 
     
      Dimension Grd_stata(6)
      Dimension Grd_statb(6)
      Dimension SGrd_stata(6)
      Dimension SGrd_statb(6)
      Dimension Grd(Nbas,Nbas)
      Dimension Grd_oo(Lenoo)
      Dimension Grd_vv(Lenvv)
      Dimension Grd_vo(Lenvo)
      Dimension Grd_ov(Lenvo)
      Dimension Work(Maxcor)

#include "machsp.com"
#include "sym.com"
#include "syminf.com"
#include "sympop.com"

      Common /Symm/Symmetry

      Data Ione,Izero,One,Half,Dnull,Two,Onem/1,0,1.0D0,0.50D0,
     +                                        0.0D0,2.0D0,-1.0D0/
 
      B_like = .False.
      Irrepx = Ione
      Itrln  = Nbas*(Nbas-1)/2
      If (Symmetry) Then
         Nsize_vo = Idsymsz(Irrepx,9,9)
         Nsize_ov = Nsize_vo
         Nsize_oo = Idsymsz(Irrepx,22,22)
         Nsize_vv = Idsymsz(Irrepx,19,19)
      Else
         Nsize_vo = (Nocc*Nvrt)**2
         Nsize_ov = Nsize_vo
         Nsize_oo = (Nocc*Nocc)**2
         Nsize_vv = (Nvrt*Nvrt)**2
      Endif 

      Nsize    = Nbas*Nbas
      Lenoo    = Nocc*Nocc
      Lenvv    = Nvrt*Nvrt
      Lenvo    = Nvrt*Nocc
      Lenov    = Lenvo
    
      Apprx_CC_hess = .False.
      Apprx_HF_hess = .True.

      If (Apprx_CC_hess) Then 
     
      I030 = Ione
      I040 = I030 + Nsize_vo
      I050 = I040 + Nsize_vo
      I060 = I050 + Nsize_oo
      I070 = I060 + Nsize_vv
      I080 = I070 + Max(Nsize_oo,Nsize_vo,Nsize_vv)
      I090 = I080 + Max(Nsize_oo,Nsize_vo,Nsize_vv)
      Iend = I090 + Nsize
      Memleft = Maxcor - Iend 
      If (Iend .Gt. Maxcor) Call Insmem("pccd_nr_search",Iend,Maxcor)
 
      If (Icycle .Eq. Izero) Then
         Call Pccd_hess_ov(Work(I040),Work(Iend),Nsize_vo,Memleft,
     +                     Ispin,Iuhf)
         Call Pccd_hess_oo(Work(I050),Work(Iend),Nsize_oo,Memleft,
     +                     Ispin,Iuhf)
         Call Pccd_hess_vv(Work(I060),Work(Iend),Nsize_vv,Memleft,
     +                     Ispin,Iuhf)
#ifdef _DEBUG_LVL0
         Call set_diags2_one(Work(I040),Work(I050),Work(I060),Lenoo,
     +                       Lenvv,Lenvo)
#endif 

C Store the current Hessians and gradients in Jobarc. We may move these
C to a unformatted file if the need arise. 

         Call Putrec(20,"JOBARC","VO_ROT_H",Nsize_vo*Iintfp,Work(I040))
         Call Putrec(20,"JOBARC","OO_ROT_H",Nsize_oo*Iintfp,Work(I050))
         Call Putrec(20,"JOBARC","VV_ROT_H",Nsize_vv*Iintfp,Work(I060))

         Call Putrec(20,"JOBARC","VO_ROT_G",Lenvo*Iintfp,Grd_vo)
         Call Putrec(20,"JOBARC","OV_ROT_G",Lenvo*Iintfp,Grd_ov)
         Call Putrec(20,"JOBARC","OO_ROT_G",Lenoo*Iintfp,Grd_oo)
         Call Putrec(20,"JOBARC","VV_ROT_G",Lenvv*Iintfp,Grd_vv)
      Else
         Lhess = Max(Nsize_vo,Nsize_oo,Nsize_vv)
         Lgrad = Max(Lenvo,Lenoo,Lenvv)
         I000  = Ione
         I010  = I000 + Lhess*Iintfp
         I040  = I010 + Lgrad*Iintfp
         I050  = I040 + Nsize_vo*Iintfp
         I060  = I050 + Nsize_oo*Iintfp
         I070  = I060 + Nsize_vv*Iintfp
         I080  = I070 + Max(Nsize_oo,Nsize_vo,Nsize_vv)
         I090  = I080 + Max(Nsize_oo,Nsize_vo,Nsize_vv)
         Iend  = I090 + Nsize
         Memleft = Maxcor - Iend 
         If (Iend .Gt. Maxcor) Call Insmem("pccd_nr_search",Iend,Maxcor)

         Call Pccd_hess_update(Work(I000),Work(I010),Work(I040),
     +                         Work(I050),Work(I060),Grd_oo,Grd_vv,
     +                         Grd_vo,Grd_ov,Work(Iend),Memleft,
     +                         Lhess,Lgrad,Nocc,Nvrt,Lenoo,Lenvv,
     +                         Lenvo,Nsize_oo,Nsize_vv,Nsize_vo)
C
C Store the current Hessians and gradients in Jobarc. We may move these
C to a unformatted file if the need arise. 

         Call Putrec(20,"JOBARC","VO_ROT_H",Nsize_vo*Iintfp,Work(I040))
         Call Putrec(20,"JOBARC","OO_ROT_H",Nsize_oo*Iintfp,Work(I050))
         Call Putrec(20,"JOBARC","VV_ROT_H",Nsize_vv*Iintfp,Work(I060))

         Call Putrec(20,"JOBARC","VO_ROT_G",Lenvo*Iintfp,Grd_vo)
         Call Putrec(20,"JOBARC","OV_ROT_G",Lenvo*Iintfp,Grd_ov)
         Call Putrec(20,"JOBARC","OO_ROT_G",Lenoo*Iintfp,Grd_oo)
         Call Putrec(20,"JOBARC","VV_ROT_G",Lenvv*Iintfp,Grd_vv)
      Endif 

      Call Dcopy(Nsize_vo,Work(I040),1,Work(I070),1)
      Call Eig(Work(I070),Work(I080),1,Lenoo,1)
      Call Pccd_form_hinv(Work(I040),Work(Iend),Memleft,Nbas,
     +                    Lenvo,Nocc,Nvrt,"OV")
#ifdef _DEBUG_LVL0
      Write(6,*)
      Write(6,"(a)") " The eigenvalues of the OV/VO Hessian"
      Call output(Work(I070),1,Lenvo,1,Lenvo,Lenvo,Lenvo,1)
      Write(6,*)
      Write(6,"(a)") " The OV/VO orbital rotation Hessian inverse"
      Call output(Work(I040),1,lenvo,1,lenvo,lenvo,lenvo,1)
#endif 
      Call Dcopy(Nsize_oo,Work(I050),1,Work(I070),1)
      Call Eig(Work(I070),Work(I080),1,Lenoo,1)
      Call Pccd_form_hinv(Work(I050),Work(Iend),Memleft,Nbas,
     +                    Lenoo,Nocc,Nvrt,"OO")
#ifdef _DEBUG_LVL0
      Write(6,*)
      Write(6,"(a)") " The eigenvalues of the OO Hessian"
      Call output(Work(I070),1,Lenoo,1,Lenoo,Lenoo,Lenoo,1)
      Write(6,*)
      Write(6,"(a)") " The OO orbital rotation Hessian inverse"
      Call output(Work(I050),1,lenoo,1,lenoo,lenoo,lenoo,1)
#endif 
      Call Dcopy(Nsize_vv,Work(I060),1,Work(I070),1)
      Call Eig(Work(I070),Work(I080),1,Lenvv,1)
      Call Pccd_form_hinv(Work(I060),Work(Iend),Memleft,Nbas,
     +                    Lenvv,Nocc,Nvrt,"VV")
#ifdef _DEBUG_LVL0
      Write(6,*)
      Write(6,"(a)") " The eigenvalues of the VV Hessian"
      Call output(Work(I070),1,Lenvv,1,Lenvv,Lenvv,Lenvv,1)
      Write(6,*)
      Write(6,"(a)") " The VV orbital rotation Hessian inverse"
      Call output(Work(I060),1,lenvv,1,lenvv,lenvv,lenvv,1)
#endif 
      Call Pccd_nr_update(Work(I040),Work(I050),Work(I060),Grd_oo,
     +                    Grd_vv,Grd_vo,Grd_ov,Work(Iend),Maxcor,
     +                    Lenoo,Lenvv,Lenvo,Nocc,Nvrt,.True.)
      Sym_packed = .False. 
      Call Pccd_frmful(Work(I090),Grd_oo,Grd_vv,Grd_vo,Grd_ov,
     +                 Work(Iend),Memleft,Nocc,Nvrt,Nbas,"Ov_like",
     +                 Sym_packed)
      Call Dcopy(Nbas*Nbas,Work(I090),1,Grd,1)

      Call Pccd_gossip(Grd,Grd_stata,Grd_statb,Sgrad_stata,
     +                 Sgrad_statb,Nbas,Ispin)

      Elseif (Apprx_HF_hess) Then 

      I000 = Ione
      I010 = I000 + Nbas
      I020 = I010 + Lenvo
      I030 = I020 + Lenvo
      I040 = I030 + Lenoo
      I050 = I040 + Lenvv
      Iend = I050 + Nsize 
      Memleft = Maxcor - Iend
      If (Iend .Gt. Maxcor) Call Insmem("pccd_nr_search",Iend,Maxcor)

      If (Ispin .Eq. 1) Call Getrec(20,"JOBARC","SCFEVALA",
     +                              Nbas*Iintfp,Work(I000))
      If (Ispin .Eq. 2) Call Getrec(20,"JOBARC","SCFEVALB",
     +                              Nbas*Iintfp,Work(I000))

#ifdef _DEBUG
      Call Getrec(0,"JOBARC","REFSCFEA",Length,Work(I000))
      If (Length .Gt. 0) Then
         Write(6,"(a)") "The reading eigenvalues of ref. state at start"
         Call Getrec(20,"JOBARC","REFSCFEA",Nbas*Iintfp,Work(I000))
      Else
         Call Getrec(20,"JOBARC","SCFEVALA",Nbas*Iintfp,Work(I000))
         Call Putrec(20,"JOBARC","REFSCFEA",Nbas*Iintfp,Work(I000))
      Endif 
#endif 

      Indi   = Izero
      Inda   = Izero 
      Indv   = Izero 
      Indo   = Izero 
      Indv0  = Izero 
      Indo0  = Izero 
      Ijunk  = Izero
      Irrepx = Ione 

      Do Irrepr = 1, Nirrep
         Irrepl = Dirprd(Irrepr,Irrepx)

         Nocci = Pop(Irrepr,1)
         Nvrti = Vrt(Irrepl,1)

         Do indxi = 1, Nocci
            Indi = Indi + 1
            Indv = Indv0
            Do indxa = 1, Nvrti
               Inda = Inda + 1
               Indv = Indv + 1
               Work(I010+Inda-1) = (Work(I000+Indv-1+Nocc) - 
     +                              Work(I000+Indi-1))
#ifdef _DEBUG_LVLM
               write(6,"(3(1x,F15.10))") Work(I000+Indv-1+Nocc),
     +                                   Work(I000+Indi-1),
     +                                   Work(I010+Inda-1) 
#endif 
            Enddo
         Enddo
         Indv0 = Indv0 + Nvrti
      Enddo 

      Inda   = Izero 
      Do Irrepr = 1, Nirrep
         Irrepl = Dirprd(Irrepr,Irrepx)

         Nocci = Pop(Irrepr,1)
         Noccj = Pop(Irrepl,1)

         Do indxi = 1, Nocci
            Do indxj = 1, Noccj
               Inda = Inda + 1
               Work(I030+Inda-1) = (Work(I000+Indxi-1) -
     +                              Work(I000+Indxj-1))
            Enddo
         Enddo
      Enddo

      Inda   = Izero 
      Do Irrepr = 1, Nirrep
         Irrepl = Dirprd(Irrepr,Irrepx)

         Nvrta = Vrt(Irrepr,1)
         Nvrtb = Vrt(Irrepl,1)

         Do indxa = 1, Nvrta
            Do indxb = 1, Nvrtb
               Inda = Inda + 1
               Work(I040+Inda-1) = (Work(I000+Nocc+Indxa-1) -
     +                              Work(I000+Nocc+Indxb-1))
            Enddo
         Enddo
      Enddo

C For the time being lets leave occ-occ and vrt-vrt Hessian as zero.

      If (Symmetry) Call Pccd_symexp(Work(I030),Work(I040),Work(I010),
     +                               Work(Iend),Memleft,Nocc,Nvrt,Nbas)

      Call Transp(Work(I010),Work(I020),Nocc,Nvrt)

#ifdef _DEBUG_LVL0
      Write(6,"(a)") "The OO/VV orbital rotation hessians"
      Call output(work(I030),1,nocc,1,nocc,nocc,nocc,1)
      Call output(work(I040),1,nvrt,1,nvrt,nvrt,nvrt,1)
      Write(6,*)
      Write(6,"(a)") "The VO/OV orbital rotation hessians"
      Call output(work(I010),1,nvrt,1,nocc,nvrt,nocc,1)
      Call output(work(I020),1,nocc,1,nvrt,nocc,nvrt,1)
#endif 

#ifdef _NOSKIP
      Nsize_ov = Inda
      Ioff = I010
      Joff = I020 
      Do Irrepr= 1, Nirrep
         Irrepl = Dirprd(Irrepr,Irrepx)
         Nocci = Pop(Irrepr,1)
         Nvrti = Vrt(Irrepl,1)
         Call Transp(Work(Ioff),Work(Joff),Nocci,Nvrti)
         Ioff = Ioff + Nocci*Nvrti
         Joff = Joff + Nocci*Nvrti
      Enddo 

#ifdef _DEBUG_LVL0
      Write(6,*)
      Write(6,"(a)") "The VO/OV orbital rotation hessians"
      Ioff = I010
      Joff = I020 
      Do Irrepr= 1, Nirrep
         Irrepl = Dirprd(Irrepr,Irrepx)
         Nocci = Pop(Irrepr,1)
         Nvrti = Vrt(Irrepl,1)
         Call output(work(ioff),1,nvrti,1,nocci,nvrti,nocci,1)
         Call output(work(joff),1,nocci,1,nvrti,nocci,nvrti,1)
         Ioff = Ioff + Nocci*Nvrti
         Joff = Joff + Nocci*Nvrti
      Enddo 
#endif
#endif

#ifdef _DEBUG
C ---- This block was added to use psi4 gradients for debugging----

       open(unit=911,file="psi4_grad",status="old")
       call getrec(0,"JOBARC","ORBOPITR",ncycle,junk)
       if (ncycle .lt. 0) then 
           ncycle = 1
       else
           call getrec(20,"JOBARC","ORBOPITR",1,ncycle)
       endif 
       write(6,*)
       write(6,"(a,i4)") " The optimization cycle:", ncycle 
       Do i=1,ncycle
          read(911,*) grad_vo_psi4
       enddo 
       write(6,"(a,F15.10)") " The orb. rot. grad from psi4:",
     +                       grad_vo_psi4
       Grd_vo(2) = Grad_vo_psi4
       Grd_ov(2) = Grad_vo_psi4
       Write(6,"(a)") "The VO-MO gradient matrices (psi4)"
       write(6,"(6(1x,F12.6))") (Grd_vo(i),i=1,Lenvo)
       Write(6,"(a)") "The OV-MO gradient matrices (psi4)"
       write(6,"(6(1x,F12.6))") (Grd_ov(i),i=1,Lenvo)
#endif 
C -----------------debug end-------------------------------------
#ifdef _ROTT1
C In this debugging procees, the orbital gradient is treated as t1 and send
C that to zero. This is what John has done for CCD and Andrew has done for 
C MBPT(2). Notice the diffrence of the between this and the unitary rotation that
C current implemention is attempting to make.

        Write(6,"(2a)") " This duplicates John(OO-CCD)/Andrew(MBPT)",
     +                  " Brueckner like orbital optimizations"
       open(unit=911,file="cfour_grad",status="old")
       call getrec(0,"JOBARC","ORBOPITR",ncycle,junk)
       if (ncycle .lt. 0) then
           ncycle = 1
       else
           call getrec(20,"JOBARC","ORBOPITR",1,ncycle)
       endif

       write(6,*)
       write(6,"(a,i4)") " The optimization cycle:", ncycle
       Do i=1,ncycle
          read(911,*) grad_vo_c4
       enddo
      write(6,"(a,F15.10)") " The orb. rot. grad from psi4:",
     +                       grad_vo_c4
       Grd_vo(1) = Dnull
       Grd_vo(2) = grad_vo_c4
       Grd_vo(3) = Dnull 

       Write(6,"(a)") " The VO-MO gradient matrices (ACES II)"
       write(6,"(6(2x,F15.9))") (Grd_vo(i),i=1,Lenvo)
       Do I = 1, Nsize_v
         D = One/Work(I010-1+I) 
         Grd_vo(I) = Grd_vo(I)*D
         D = One/Work(I020-1+I) 
         Grd_ov(I) = Grd_ov(I)*D
       Enddo

       Call Putlst(Grd_vo,1,1,1,1,90)
       Call Putlst(Grd_vo,1,1,1,3,90)

       Call Pccd_blike_ooccd(Work(Iend),Memleft,0)
       B_like =.True. 
       Return
C Comment: Incorporating gative sign above while required seems to mess up 
C the converged energy,
#endif 
C Note that I am using 1/(ea-ei) instead of 1/2(ea-ei) since I work with only
C the alpha (or beta block).  The main loop that rotates orbitals goes over
C only alpha block only (in the RHF context). See pccd_rotg.F.
#ifdef _NOSKIP
      Do I = 1, Nsize_ov
         D = -One/Work(I010-1+I) 
         Grd_vo(I) = Grd_vo(I)*D
         D = -One/Work(I020-1+I) 
         Grd_ov(I) = Grd_ov(I)*D
      Enddo
      Sym_packed = .False.
      Call Pccd_frmful(Work(I050),Grd_oo,Grd_vv,Grd_vo,Grd_ov,
     +                 Work(Iend),Memleft,Nocc,Nvrt,Nbas,"Ov_like",
     +                 Sym_packed)
      Call Dcopy(Nbas*Nbas,Work(I050),1,Grd,1)
#endif 

C -----------------------This is the current working code--------------
      Sym_packed = .False.
      Call Pccd_scale_grads(Grd_oo,Grd_vv,Grd_vo,Grd_ov,Work(I010),
     +                      Work(I020),Work(I030),Work(I040),Lenoo,
     +                      Lenvv,Lenvo,Nocc,Nvrt,Icycle)
      Call Pccd_frmful(Work(I050),Grd_oo,Grd_vv,Grd_vo,Grd_ov,
     +                 Work(Iend),Memleft,Nocc,Nvrt,Nbas,"Ov_like",
     +                 Sym_packed)
      Call Dcopy(Nbas*Nbas,Work(I050),1,Grd,1)

      Call Pccd_gossip(Grd,Grd_stata,Grd_statb,Sgrad_stata,
     +                 Sgrad_statb,Nbas,Ispin)

#ifdef _NOSKIP
C --------------------This block has been moved to pccd_rotgrd--------------
      If (Iuhf .Eq. 0) Then
         If (SGrd_stata(5) .Lt. Conv_tol) Then
             Write(6,"(2a)") " The micro-iterations of orbital",
     +                " rotation gradients reached convergence"
             Call Putrec("20","JOBARC","MICRO_CV",Iintfp,Ione)
         Endif
      Else 
         If (Max(SGrd_stata(5),Sgrd_statb(5)) .Lt. Conv_tol) Then
             Write(6,"(2a)") " The micro-iterations of orbital",
     +                " rotation gradients reached convergence"
             Call Putrec("20","JOBARC","MICRO_CV",Iintfp,Ione)
         Endif
      Endif 
C --------------------This block has been moved to pccd_rotgrd--------------
#endif 
c ------------Endif for Apprx_CC_hess or Apprx_HF_hess--------------------
      Endif 

C----------------------------------------------------------------------------
   
      Return
      End

