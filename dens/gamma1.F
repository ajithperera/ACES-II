      SUBROUTINE GAMMA1(ICORE,MAXCOR,IUHF)
C
C   THIS ROUTINE ADDS UP THE VARIOUS CONTRIBUTIONS WHICH
C   FORM THE GAMMA1 CONTRIBUTION
C
C   THEY ARE :
C
C   ROHF-MBPT(3): 1/2 T[1](IJ,AB) + 1/4 TAU[2](IJ,AB) + 1/4 L[2](IJ,AB)
C
C                      44,...           61,...            144,...
C
C   MBPT4 : 1/2 T2(IJ,AB) + 1/2 DELTA T3(IJ,AB) + 1/2 X(IJ,AB)
C
C   LISTS      144,...         61,...                114,...
C
C   CCD   : 1/4 T(IJ,AB) + 1/4 L(IJ,AB) + 1/4 X(IJ,AB)
C
C   LISTS      44,...          143,...        114,...
C
C   UCC : 1/2 T(IJ,AB) +  1/4 X(IJ,AB)
C
C   LISTS       44,...        114,...
C
C   QCISD : 1/4 T(IJ,AB) + 1/4 L(IJ,AB) + 1/4 X(IJ,AB)
C
C   LISTS       44,...         143,...        114,...
C
C   CCSD : 1/4 TAU(IJ,AB) + 1/4 L(IJ,AB) + 1/4 X(IJ,AB)
C
C   LISTS      44,...           143,...        114,...
C
C           (FORM TAU HOWEVER)
C
C NOTE THAT ALWAYS 2*G(IJ,AB) IS STORED !
C
CEND
C
C    CODED AUGUST/90   JG
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INTEGER DISSYG,DIRPRD,VRT,POP
      LOGICAL MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC
      LOGICAL MBPT4,CC ,CIS,EOM
      LOGICAL DENS,GRAD,QRHF,NONHF,ROHF,SEMI,CANON,TRIP1,TRIP2,
     &        GABCD,RELAXED,TRULY_NONHF
C
      DIMENSION ICORE(MAXCOR),I0T(2)
C
      COMMON/DERIV/DENS,GRAD,QRHF,NONHF,ROHF,SEMI,CANON,TRIP1,
     &             TRIP2,GABCD,RELAXED,TRULY_NONHF
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/METH/MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),NTOT(18)
      COMMON/SYMINF/NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON/SYM/POP(8,2),VRT(8,2),NT(2),NF1(2),NF2(2)
      COMMON/EXCITE/CIS,EOM
      COMMON/FLAGS/IFLAGS(100)
C
      DATA ONE,HALF,TWO /1.D0,0.5D0,2.D0/

#include "parcc.com"
C
      MXCOR=MAXCOR
      MBPT4=M4DQ.OR.M4SDQ.OR.M4SDTQ
      CC=CCD.OR.QCISD.OR.CCSD.OR.UCC
C
C  IF CCSD GET SINGLES TO FORM TAU CONTRIBUTION
C
      IF(CCSD.OR.(ROHF.AND.MBPT3)) THEN
C
       I0T(1)=MXCOR+1-IINTFP*NT(1)
       MXCOR=MXCOR-IINTFP*NT(1)
       CALL GETLST(ICORE(I0T(1)),1,1,1,1,90)
       IF(IUHF.EQ.0) THEN
        I0T(2)=I0T(1)
       ELSE
        I0T(2)=I0T(1)-IINTFP*NT(2)
        MXCOR=MXCOR-IINTFP*NT(2)
        CALL GETLST(ICORE(I0T(2)),1,1,1,2,90)
       ENDIF
      ENDIF
C
C     ADD ALL TERMS TO LIST 114, ...
C
      IF(ROHF.AND.MBPT3) THEN
       LIST1=60
       LIST2=143
       LIST3=43
      ELSE IF(MBPT4) THEN
       LIST1=143
       LIST2=60
       LIST3=0
      ELSE
       LIST1=43    
       LIST2=143
       LIST3=0
      ENDIF
      LISTG=113
      FACT=ONE
      IF(UCC)FACT=TWO
C
      IBOT=1
      IF(IUHF.EQ.0) IBOT=3
      DO 1000 ISPIN=IBOT,3
      LISTA=LIST1+ISPIN
      LISTB=LIST2+ISPIN
      LISTD=LIST3+ISPIN
      LISTC=LISTG+ISPIN
      LISTE=213+ISPIN
C
C  LOOP OVER ALL IRREPS
C
      DO 100 IRREP=1,NIRREP
C
      NUMSYG=IRPDPD(IRREP,ISYTYP(2,LISTC))
      DISSYG=IRPDPD(IRREP,ISYTYP(1,LISTC))    
      NSIZE=NUMSYG*DISSYG 
C
C  ALLOCATE MEMORY
C
      I001=1
      I002=1+IINTFP*NSIZE
      I003=I002+IINTFP*NSIZE
      IF(I003.GE.MXCOR) CALL INSMEM('GAMMA1',I003,MXCOR)
C
C  ADD ALL PIECES
C
      IF(MBPT3.AND.ROHF) THEN
       CALL GETLST(ICORE(I001),1,NUMSYG,1,IRREP,LISTB)
      ELSE
       CALL GETLST(ICORE(I001),1,NUMSYG,1,IRREP,LISTC)
       IF(IFLAGS(3).EQ.2) THEN
#ifdef _DEBUG_LVL0
       write(6,"(a)") "Lists;214-216 get overwritten"
#endif 
C
C SAVE X(IJ,AB) FOR MBPT(4) SECOND DERIVATIVE CALCULATIONS
C
        CALL PUTLST(ICORE(I001),1,NUMSYG,1,IRREP,LISTE)
       ENDIF
      ENDIF
      IF(.NOT.EOM)THEN
       CALL GETLST(ICORE(I002),1,NUMSYG,2,IRREP,LISTA)
       IF(CCSD.OR.(ROHF.AND.MBPT3)) THEN
        IF(ISPIN.LT.3) THEN
         CALL FTAU(ICORE(I002),ICORE(I0T(ISPIN)),ICORE(I0T(ISPIN)),
     &             DISSYG,NUMSYG,POP(1,ISPIN),POP(1,ISPIN),
     &             VRT(1,ISPIN),VRT(1,ISPIN),IRREP,ISPIN,ONE)
        ELSE
         CALL FTAU(ICORE(I002),ICORE(I0T(1)),ICORE(I0T(2)),DISSYG,
     &             NUMSYG,POP(1,1),POP(1,2),VRT(1,1),VRT(1,2),
     &             IRREP,3,ONE)
        ENDIF
       ENDIF
       CALL SAXPY(NSIZE,FACT,ICORE(I002),1,ICORE(I001),1)
      ENDIF
      IF(.NOT.UCC.AND.(.NOT.MBPT3)) THEN
      CALL GETLST(ICORE(I002),1,NUMSYG,2,IRREP,LISTB)
      CALL SAXPY(NSIZE,ONE,ICORE(I002),1,ICORE(I001),1)
      ENDIF
      IF(CC.OR.(ROHF.AND.MBPT3))CALL SSCAL(NSIZE,HALF,ICORE(I001),1)
      IF(ROHF.AND.MBPT3) THEN
       CALL GETLST(ICORE(I002),1,NUMSYG,1,IRREP,LISTD)
       CALL SAXPY(NSIZE,ONE,ICORE(I002),1,ICORE(I001),1)
      ENDIF
      CALL PUTLST(ICORE(I001),1,NUMSYG,1,IRREP,LISTC)
C
100   CONTINUE
C
1000  CONTINUE

#ifdef _DEBUG_LVL0
      CALL Checkgamma1(Icore,Maxcor,Iuhf)
#endif
C
      TWO=2.D0
      IF(IUHF.EQ.0)
     &   CALL CHECKGAM1(ICORE,16,116,TWO,IUHF,2,VRT)
      IF(IUHF.EQ.1) THEN
        CALL CHECKGAM(ICORE,16,116,TWO)
        CALL CHECKGAM(ICORE,14,114,TWO)
        CALL CHECKGAM(ICORE,15,115,TWO)
      ENDIF
C
#ifdef _DEBUG_LVLM
      Write(6,*)
      Write(6,"(a)") " Energy contributions from T2*L2*V*<ij||ab>"
      Write(6,"(a)") " The spin-type ABAB"
      IF(IUHF.EQ.0)
     &   CALL CHECKGAM1(ICORE,16,216,TWO,IUHF,2,VRT)
      write(6,*)
      Write(6,"(a)") " The spin-type ABBA"
      IF(IUHF.EQ.0)
     &   CALL CHECKGAM1(ICORE,16,217,TWO,IUHF,2,VRT)
      IF (IUHF.EQ.1) THEN
         CALL CHECKGAM(ICORE,16,216,TWO)
         CALL CHECKGAM(ICORE,14,214,TWO)
         CALL CHECKGAM(ICORE,15,215,TWO)
      ENDIF 
#endif 
C
      RETURN
      END
