      SUBROUTINE XIA3AB(G,W,MAXSIZE,XIA,FACT,ISPIN,POP1,POP2,VRT1,VRT2,
     &                 DISSYT,NUMSYT,DISSYW,NUMSYW,LISTG,LISTW,IRREP,
     &                 TMP,IUHF)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER DISSYT,DISSYW,DISMAX,DISLEFT,DISREAD,DIRPRD,POP1,
     &        POP2,VRT1,VRT2
      DIMENSION G(DISSYT,1),W(DISSYW,1),XIA(1),TMP(1)
      DIMENSION POP1(8),POP2(8),VRT1(8),VRT2(8),IPT(8) 
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255,2),DIRPRD(8,8)
      common /dropgeo/ ndrgeo
C
      DATA ONE,ONEM,TWO /1.0D0,-1.D0,2.D0/,HALF /0.5D0/
C
C      PICK UP FIRST THE G AMPLITUDES AND THE INTEGRALS
C
      if (ndrgeo.eq.0) CALL GETLST(G,1,NUMSYT,1,IRREP,LISTG)
      if (ndrgeo.eq.1) 
     x    CALL GETGO1(G,W,1,NUMSYT,1,IRREP,LISTG,ispin,listg,dissyt)
C
C SPIN ADAPTION FOR RHF
C
      IF(IUHF.EQ.0) THEN 
       CALL SPINAD1(IRREP,POP1,DISSYT,G,TMP,TMP(1+DISSYT))
      ENDIF
C
C  DECIDE ABOUT THE ALGORITHM BY CHECKING MAXSIZE
C
      IF(MAXSIZE.GT.NUMSYW*DISSYW) THEN
C
C  FULL IN CORE ALGORITHM
C
       CALL GETLST(W,1,NUMSYW,2,IRREP,LISTW)
C
C TRANSPOSE THE LAST TWO INDICES IN THE AA CASE
C
       IF(ISPIN.EQ.1) THEN 
        CALL SYMTR1(IRREP,POP1,POP2,DISSYT,G,TMP,TMP(1+DISSYT),
     &              TMP(1+2*DISSYT))
        CALL SYMTR1(IRREP,VRT1,POP2,DISSYW,W,TMP,TMP(1+DISSYW),
     &              TMP(1+2*DISSYW))
       ENDIF
C
C  PERFORM MULTIPLICATION
C
C  JOFFG AND JOFFW OFFSET IN THE RIGHT BLOCK OF G AND W
C  IOFF OFFSET IN XIA
C
       JOFFG=1
       JOFFW=1
       IOFF=1
       DO 90 IRREPI=1,NIRREP
C          
C GET OCCUPATION NUMBER FOR JRREP     
C
        NOCCI=POP1(IRREPI)
        NVRTI=VRT1(IRREPI)
C
C DETERMINE IRREPJ WHOSE DIRECT PRODUCT WITH IRREPI GIVES IRREP
C
        IRREPJ=DIRPRD(IRREP,IRREPI)
C
C GET OCCUPATION NUMBER FOR IRREPJ
C
        NOCCJ=POP2(IRREPJ)
C
C  IF ZERO, NOTHING TO COMPUTE
C
        IF(MIN(NOCCI,NOCCJ,NVRTI).NE.0) THEN
C
          CALL XGEMM('T','N',NVRTI,NOCCI,DISSYT*NOCCJ,FACT,
     &              W(1,JOFFW),NOCCJ*DISSYT,G(1,JOFFG),      
     &              NOCCJ*DISSYT,ONE,XIA(IOFF),NVRTI)
        ENDIF
C
C  UPDATE OFFSETS
C
        JOFFG=JOFFG+NOCCJ*NOCCI
        JOFFW=JOFFW+NOCCJ*NVRTI
        IOFF=IOFF+NOCCI*NVRTI
90     CONTINUE
C
      ELSE
C
C  OUT OF CORE ALGORITHM
C
C  DIFFER HERE BETWEEN THE TWO SPIN CASES
C
       IF(ISPIN.EQ.1) THEN
C
C  DETERMINE FIRST OFFSETS FOR XIA
C
        IPT(1)=1
        DO 150 IRREPJ=1,NIRREP-1
         IPT(IRREPJ+1)=IPT(IRREPJ)+POP1(IRREPJ)*VRT1(IRREPJ)
150     CONTINUE
C
C DETERMINE MAXIMUM NUMBER OF DISTRIBUTIONS WHICH CAN BE HELD IN CORE
C
        MAXDIS=MAXSIZE/DISSYW
C
C  SET OFFSETS FOR INTEGRAL LIST AND FOR G AMPLITUDES
C
        IOFFSET=1
        JOFFG=1
C
C  LOOP OVER THE IRREP OF THE LAST INDEX
C
        DO 200 IRREPJ=1,NIRREP
C
         NOCCJ=POP2(IRREPJ)
         IRREPI=DIRPRD(IRREP,IRREPJ)
         NOCCI=POP1(IRREPI)
         NVRTI=VRT1(IRREPI)
         IF(MIN(NOCCI,NOCCJ,NVRTI).NE.0) THEN
C
C  GET MAXIMUM NUMBER OF (Ef,A) BLOCKS WHICH CAN BE HELD IN CORE
C
          DISMAX=MAXDIS/NVRTI
          IF(DISMAX.LE.0) STOP 'XIA3AB'
C
C  SET NUMBER OF (Ef,A) BLOCKS TO READ
C
          DISLEFT=NOCCJ
C
10        CONTINUE  
C
C DETERMINE NUMBER OF (Ef,A) BLOCKS WHICH ARE READ IN DURINg THIS PASS
C
           DISREAD=MIN(DISLEFT,DISMAX)
           DISLEFT=DISLEFT-DISREAD
C
C  GET THE DISTRIBUTIONS FROM DISK
C
           CALL GETLST(W,IOFFSET,DISREAD*NVRTI,2,IRREP,LISTW)
C
C  UPDATE IOFFSET
C
           IOFFSET=IOFFSET+DISREAD*NVRTI
C
C  LOOP OVER ALL DISTRIBUTIONS AND PERFORM MULTIPLICATION
C
           JOFFW=1
           IOFF=IPT(IRREPI)
C
           DO 250 NUM=1,DISREAD
C
            CALL XGEMM('T','N',NVRTI,NOCCI,DISSYW,FACT,
     &                 W(1,JOFFW),DISSYT,G(1,JOFFG),DISSYW,
     &                 ONE,XIA(IOFF),NVRTI)
C
C UPDATE OFFSETS
C
            JOFFW=JOFFW+NVRTI
            JOFFG=JOFFG+NOCCI
C
250        CONTINUE
C
C  IF NOT ALL (Ef,A) BLOCKS HAVE BEEN PROCESSED, GO BACK TO 10
C
          IF(DISLEFT.NE.0) GO TO 10
C
         ELSE
C
C  UPDATE OFFSETS IN THE CASE NOTHING HAS BEEN DONE
C
          JOFFG=JOFFG+NOCCI*NOCCJ
          IOFFSET=IOFFSET+NOCCJ*NVRTI
         ENDIF
200     CONTINUE
C
       ELSE IF(ISPIN.EQ.2) THEN
C
C  DETERMINE MAXIMUM NUMBER OF DISTRIBUTIONS WHICH CAN BE HELD IN CORE
C
        MAXDIS=MAXSIZE/DISSYW
C
C  OFFSET FOR INTEGRAL LIST AND FOR G AMPLITUDES
C
        IOFFSET=1
        JOFFG=1
        IOFFX=1
C
C  LOOP OVER IRREPS OF THE LAST INDEX
C
        DO 300 IRREPJ=1,NIRREP
C
         NOCCJ=POP1(IRREPJ)
         NVRTJ=VRT1(IRREPJ)
         IRREPI=DIRPRD(IRREP,IRREPJ)
         NOCCI=POP2(IRREPI)
         IF(MIN(NOCCI,NOCCJ,NVRTJ).NE.0) THEN
C
C  DETERMINE NUMBER OF (Ef,M) BLOCKS WHICH CAN BE HELD IN CORE 
C
          DISMAX=MAXDIS/NOCCI
C
C  SET NUMBER OF (Ef,M) BLOCKS TO READ
C
          DISLEFT=NVRTJ
C
          IOFF=0
C
20        CONTINUE
C
C  DETERMIN NUMBER OF (Ef,M) BLOCKS WHICH ARE READ DURINg THIS PASS
C
           DISREAD=MIN(DISLEFT,DISMAX)
           DISLEFT=DISLEFT-DISREAD
C 
C  GET THE DISTRIBUTIONS FROM DISK
C
           CALL GETLST(W,IOFFSET,DISREAD*NOCCI,2,IRREP,LISTW)
C
C  UPDATE IOFFSET
C
           IOFFSET=IOFFSET+DISREAD*NOCCI
C
C  PERFORM MULTIPLICATION
C
           CALL XGEMM('T','N',DISREAD,NOCCJ,DISSYW*NOCCI,FACT,
     &                W,DISSYT*NOCCI,G(1,JOFFG),DISSYW*NOCCI,
     &                ONE,XIA(IOFFX+IOFF),NVRTJ)
C
           IOFF=IOFF+DISREAD 
C
C  IF NOT ALL (Ef,M) BLOCKS HAVE BEEN PROCESSED, GO BACK TO 20 
C
          IF(DISLEFT.NE.0) GO TO 20
C
         ELSE
C
C  UPDATE OFFSETS IN THE CASE NOTHING HAS BEEN DONE
C
          IOFFSET=IOFFSET+NOCCI*NVRTJ
         ENDIF
C
C  UPDATE OFFSETS
C
         IOFFX=IOFFX+NOCCJ*NVRTJ
         JOFFG=JOFFG+NOCCJ*NOCCI
300     CONTINUE
C
       ENDIF
      ENDIF
C
      RETURN
      END
