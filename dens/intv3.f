C
C THIS ROUTINE CALCULATES THE THIRD TERM OF THE VIRTUAL-VIRTUAL BLOCK
C OF THE INTERMEDIATE I
C
C THE GENERAL FORMULA IS
C
C   -   SUM M,N,E  G(MA,NE) <MA//NE>
C
C          SPIN TYPES : AA   AAAA AAAA    LISTS 123, 23
C                            ABAB ABAB    LISTS 125, 25
C                            ABBA ABBA    LISTS 117, 17 (RHF 118, 18)
C                       BB   BBBB BBBB    LISTS 124, 24
C                            BABA BABA    LISTS 126, 26
C                            BAAB BAAB    LISTS 118, 18
C
C THIS SUBROUTINE USES EXPLICITELY SYMMETRY
C
C SPIN ADAPTION IN RHF :
C
C CODED  JULY/90  JG
C 
      SUBROUTINE INTV3(AIVV,ICORE,MAXCOR,IUHF,bRedundant)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)

      INTEGER DIRPRD,DISSYT,POP,VRT,reflist
      DIMENSION ICORE(MAXCOR),AIVV(1)
      LOGICAL bRedundant
      COMMON /SYM2/ POP(8,2),VRT(8,2),NTAA,NTBB,NF1AA,NF1BB,NF2AA,NF2BB
      COMMON /INFO/ NOCCO(2),NVRTO(2)
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /FILES/ LUOUT,MOINTS
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),
     &DIRPRD(8,8)
      COMMON/SYMPOP2/IRPDPD(8,22)
      COMMON/SYMPOP/IRP_DM(8,22),ISYTYP(2,500),NTOT(18) 
      COMMON /CONTROL/ IPRNT,IXXX,IXXX2
      COMMON /SHIFT/ ISHIFT 
C
      DATA ONE,ONEM /1.0D+0,-1.0D+0/
C
      MXCOR=MAXCOR
C
      DO 1000 ISPIN=1,IUHF+1 
C
       IF(ISPIN.EQ.1) THEN
        IOFF=1
       ELSE
        IOFF=NF2AA+1
       ENDIF
C
C      AA AND BB SPIN CASES
C
C  LISTG :    GAMMA AMPLITUDES
C  LISTW :    INTEGRALS 
C  FACT :     PREFACTOR
C
C
       LISTG=122+ISPIN
       LISTW=22+ISPIN + ISHIFT 
       FACT=ONEM
C
C LOOP OVER IRREPS OF EF BLOCK (THE SAME IRREPS AS THE IN AND MN BLOCKS 
C HAVE
C
       DO 100 IRREP=1,NIRREP
C
        DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTW))
        NUMSYT=IRPDPD(IRREP,ISYTYP(2,LISTW))  
        I001=1
        I002=I001+IINTFP*NUMSYT*DISSYT
        I003=I002+IINTFP*NUMSYT*DISSYT
        IF(MIN(NUMSYT,DISSYT).NE.0) THEN
         I004=I003+3*IINTFP*MAX(NUMSYT,DISSYT)
         IF(I004.LT.MXCOR) THEN
C  
C         IN CORE VERSION
C
C
          CALL IV3ALL(ICORE(I001),ICORE(I002),MXCOR-I003,
     &               AIVV(IOFF),FACT,ISPIN,
     &               POP(1,ISPIN),VRT(1,ISPIN),DISSYT,NUMSYT,LISTG,
     &               LISTW,IRREP,ICORE(I003),1,bRedundant)
         ELSE
          CALL INSMEM('IV3ALL',I004,MXCOR)
         ENDIF
        ELSE
        ENDIF 
100    CONTINUE
C
C  ABAB SPIN CASE
C
       LISTW=24+ISPIN + ISHIFT 
       LISTG=124+ISPIN
       FACT=ONEM
C
C      LOOP OVER IRREPS.
C
       DO 200 IRREP=1,NIRREP
C
        DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTW))
        NUMSYT=IRPDPD(IRREP,ISYTYP(2,LISTW))
        I001=1
        I002=I001+IINTFP*NUMSYT*DISSYT
        I003=I002+IINTFP*NUMSYT*DISSYT
        IF(MIN(NUMSYT,DISSYT).NE.0) THEN
         I004=I003+3*IINTFP*MAX(NUMSYT,DISSYT)
         IF(I004.LT.MXCOR) THEN
C
C         IN CORE VERSION
C
C
          CALL IV3ALL(ICORE(I001),ICORE(I002),MXCOR-I003,
     &        AIVV(IOFF),FACT,ISPIN,POP(1,3-ISPIN),VRT(1,ISPIN),
     &        DISSYT,NUMSYT,LISTG,LISTW,IRREP,ICORE(I003),2,bRedundant)
         ELSE
          CALL INSMEM('IV3ALL',I004,MXCOR)
         ENDIF
        ELSE
C
C
        ENDIF
200    CONTINUE
C
C  ABBA SPIN CASE
C
       LISTW=16+ISPIN+(1-IUHF) + ISHIFT 
       LISTG=116+ISPIN+(1-IUHF)
       FACT=ONEM

       DO 300 IRREP=1,NIRREP
C
        DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTW))
        NUMSYT=IRPDPD(IRREP,ISYTYP(2,LISTW))
        I001=1
        I002=I001+IINTFP*NUMSYT*DISSYT
        I003=I002+IINTFP*NUMSYT*DISSYT
        IF(MIN(NUMSYT,DISSYT).NE.0) THEN
         I004=I003+3*IINTFP*MAX(NUMSYT,DISSYT)
         IF(I004.LT.MXCOR) THEN
C
C         IN CORE VERSION
C
C
          CALL IV3ALL(ICORE(I001),ICORE(I002),MXCOR-I003,
     &        AIVV(IOFF),
     &        FACT,ISPIN,POP(1,ISPIN),VRT(1,ISPIN),DISSYT,
     &       NUMSYT,LISTG,LISTW,IRREP,ICORE(I003),3,bRedundant)
         ELSE
          CALL INSMEM('IV3ALL',I003,MXCOR)
         ENDIF
        ELSE
C
C
        ENDIF

300   CONTINUE
1000  CONTINUE
C
      RETURN

      END
