

      SUBROUTINE GAMMA6(ICORE,MAXCOR,IUHF)
C
C
C  THIS ROUTINE COMPUTES THE GAMMA INTERMEDIATE 6
C
C  GAMMA 6 IS ONLY REQUIRED FOR FOURTH ORDER MBPT AND    
C  ALL CC METHODS WHICH INVOLVE SINGLES
C
C MBPT(4) AND UCC :
C
C  G(IJ,KA) = - SUM E T(K,E) T(IJ,EA)
C
C QCISD :
C
C  G(IJ,KA) = - 1/2 SUM E T(K,E) L(IJ,EA) - 1/2 SUM E L(K,E) T(IJ,EA)
C
C CCSD :
C
C  G(IJ,KA) = - 1/2 SUM E T(K,E) L(IJ,EA) - 1/2 SUM E L(K,E) TAU(IJ,EA)
C
C             + 1/2 SUM M V(IJ,KM) T(M,A)
C
C             + 1/2 P(IJ) H(KF,IA) T(J,F)
C
C             - 1/2 P(IJ) G(IK) T(J,A)
C
C  NOTE THAT ACTUALLY THE NEGATIVE OF H(KF,IA) IS STORED ON DISK.
C
C  THE FOLLOWING SPIN CASES HAVE TO BE CONSIDERED
C
C  AAAA    AA    AAAA    (UHF ONLY)
C  BBBB    BB    BBBB    (UHF ONLY)
C  ABBA    BB    BAAB    (UHF ONLY) STORED WITH NEGATIVE SIGN)
C  ABAB    AA    ABAB
C
C  THIS ROUTINE USES EXPLICITELY SYMMETRY
C
CEND
C
C  CODED AUGUST/90   JG
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INTEGER DIRPRD,DISSYT,DISSYG,DISSYH,DISSYH1,DISSYH2,POP,VRT
      LOGICAL LAMBDA,MBPT4,TAU
      LOGICAL DENS,GRAD,QRHF,NONHF,ROHF,SEMI,CANON,TRIP1,TRIP2,
     &        GABCD,RELAXED,TRULY_NONHF
      LOGICAL MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC
      DIMENSION ICORE(MAXCOR)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/METH/MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC
      COMMON/DERIV/DENS,GRAD,QRHF,NONHF,ROHF,SEMI,CANON,TRIP1,
     &             TRIP2,GABCD,RELAXED,TRULY_NONHF
      COMMON/SYMINF/NSTART,NIRREP,IRREPA(255,2),DIRPRD(8,8)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),NTOT(18)
      COMMON/SYM/POP(8,2),VRT(8,2),NTAA,NTBB,NF1(2),NF2(2)
      COMMON/FLAGS/IFLAGS(100)
C
      DATA ONE,ONEM,HALF,HALFM,TWO /1.0D0,-1.D0,0.5D0,-0.5D0,2.D0/
C
      MXCOR=MAXCOR
      LAMBDA=CCSD.OR.QCISD
      TAU=CCSD
C
      IOFFLISTH=0
      IF(IFLAGS(3).EQ.2) IOFFLISTH=200
C
C NOTE MBPT3 IS INCLUDED FOR THE SAKE OF ROHF-MBPT3, IN
C THAT CASE, THE FOURTH-ORDER LOGIC IS REQUIRED
C
      MBPT4=M4SDQ.OR.M4SDTQ.OR.UCC.OR.MBPT3
C
C  ALLOCATE FIRST MEMORY FOR T1-AMPLITUDES
C
      I0T1A=MXCOR+1-NTAA*IINTFP
      MXCOR=MXCOR-NTAA*IINTFP
      CALL GETLST(ICORE(I0T1A),1,1,1,1,90)  
      IF(LAMBDA) THEN
       I0T2A=I0T1A-NTAA*IINTFP
       MXCOR=MXCOR-NTAA*IINTFP
       CALL GETLST(ICORE(I0T2A),1,1,2,1,190)
      ELSE
       I0T2A=I0T1A
      ENDIF
      IF(IUHF.EQ.0) THEN
       I0T1B=I0T1A
       I0T2B=I0T2A 
      ELSE
       I0T1B=I0T2A-NTBB*IINTFP
       MXCOR=MXCOR-NTBB*IINTFP
       CALL GETLST(ICORE(I0T1B),1,1,1,2,90)
       IF(LAMBDA) THEN
        I0T2B=I0T1B-NTBB*IINTFP
        MXCOR=MXCOR-NTBB*IINTFP
        CALL GETLST(ICORE(I0T2B),1,1,2,2,190)
       ELSE
        I0T2B=I0T1B
       ENDIF
      ENDIF
C
C  NOW PERFORM MULTIPLICATION
C
      DO 1000 ISPIN=1,IUHF+1
C
      IF(ISPIN.EQ.1) THEN
       IOFFT=I0T2A
       I0T1=I0T1A
       I0T2=I0T1B
       NT=NTAA
      ELSE
       IOFFT=I0T2B
       I0T1=I0T1B
       I0T2=I0T1A
       NT=NTBB
      ENDIF
      IF(IUHF.EQ.1) THEN
C
C  FIST PERFORM AAAA MULTIPLICATION
C
C  NOTE THAT THE ACTUAl SIGN MUST HERE THE NEGATIVE OF THE
C  SIGN GIVEN ABOVE BECAUSE WE ARE SWITCHING INDICES
C
      LISTG=106+ISPIN
      IF(MBPT4) THEN
       LISTT=43+ISPIN
       FACT=ONE
      ELSE IF(LAMBDA) THEN
       LISTT=43+ISPIN
       LISTL=143+ISPIN
       FACT=HALF
      ENDIF
      IF(CCSD) THEN
       LISTH=53+ISPIN+IOFFLISTH
       LISTG1=161+ISPIN
       FACTH=HALFM  
      ENDIF
C
      DO 100 IRREP=1,NIRREP
C
       NOCCSQ=0
       NVRTSQ=0
       DO 101 IRREPJ=1,NIRREP
        IRREPI=DIRPRD(IRREP,IRREPJ)
        NVRTSQ=NVRTSQ+VRT(IRREPJ,ISPIN)*VRT(IRREPI,ISPIN)
        NOCCSQ=NOCCSQ+POP(IRREPJ,ISPIN)*POP(IRREPI,ISPIN)
101    CONTINUE
       DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTT))
       NUMSYT=IRPDPD(IRREP,ISYTYP(2,LISTT))
       DISSYG=IRPDPD(IRREP,ISYTYP(1,LISTG))
       NUMSYG=IRPDPD(IRREP,ISYTYP(2,LISTG))
C
C  FOR CCSD CALCULATE FIRST THE CONTRBUTION OF H4 TO GAMMA6
C
       IF(CCSD) THEN
        DISSYH=IRPDPD(IRREP,ISYTYP(1,LISTH))
        NUMSYH=IRPDPD(IRREP,ISYTYP(2,LISTH))
        I001=1
        I002=I001+IINTFP*MAX(NUMSYH*DISSYH,DISSYG*NUMSYG)
        I003=I002+IINTFP*MAX(NUMSYH*DISSYH,NOCCSQ*NUMSYG)
        I004=I003+3*IINTFP*MAX(NUMSYG,DISSYG,NUMSYH,DISSYH)
        IF(I004.LT.MXCOR) THEN
         CALL H4G6AA(ICORE(I001),ICORE(I002),ICORE(I002),
     &               ICORE(I001),ICORE(I0T1),FACTH,DISSYH,
     &               DISSYG,NUMSYH,NUMSYG,NOCCSQ,POP(1,ISPIN),
     &               VRT(1,ISPIN),LISTH,LISTG,IRREP,ICORE(I003),
     &               TRIP1,LISTG1)
        ELSE
         CALL INSMEM('H4G6AA',I004,MXCOR)
        ENDIF
       ENDIF
C 
       I001=1
       I002=I001+IINTFP*MAX(NVRTSQ*NUMSYT,NUMSYT*NOCCSQ,NF1(ISPIN))
       I003=I002+IINTFP*NUMSYT*DISSYT
       I004=I003+IINTFP*NUMSYG*DISSYG
       IF(MIN(NUMSYT,NUMSYG,DISSYG).NE.0) THEN
        I005=I004+3*IINTFP*MAX(NUMSYG,DISSYG,NUMSYT,DISSYT)
        IF(MXCOR.GT.I005) THEN
         CALL G6AA(ICORE(I001),ICORE(I002),ICORE(I003),
     &             ICORE(IOFFT),ICORE(I0T1),ICORE(I001),FACT,
     &             LAMBDA,TAU,TRIP1,ISPIN,POP(1,ISPIN),
     &             VRT(1,ISPIN),NT,DISSYT,NUMSYT,DISSYG,NUMSYG,
     &             LISTT,LISTL,LISTG,IRREP,ICORE(I004))
        ELSE
         CALL INSMEM('G6AA',I005,MXCOR)
        ENDIF
       ENDIF
100   CONTINUE
      ENDIF
C
C  AB SPIN CASE
C
      LISTG=111-ISPIN
      IF(MBPT4) THEN
       LISTT=46
       FACT=ONEM
      ELSE IF(LAMBDA) THEN
       LISTT=46
       LISTL=146 
       FACT=HALFM
      ENDIF
      IF(CCSD) THEN
       LISTH1=55+ISPIN+IOFFLISTH
       LISTH2=59-ISPIN+IUHF+IOFFLISTH
       LISTG1=166-ISPIN  
       FACTH=HALFM
      ENDIF
C
C  LOOP OVER IRREPS
C
      DO 200 IRREP=1,NIRREP
C
       DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTT))
       NUMSYT=IRPDPD(IRREP,ISYTYP(2,LISTT))
       DISSYG=IRPDPD(IRREP,ISYTYP(1,LISTG))
       NUMSYG=IRPDPD(IRREP,ISYTYP(2,LISTG))
C
C  FOR CCSD CALCULATE FIRST THE CONTRIBUTION OF H4 TO GAMMA6
C
       IF(CCSD) THEN
        DISSYH1=IRPDPD(IRREP,ISYTYP(1,20+ISPIN))
        DISSYH2=IRPDPD(IRREP,ISYTYP(1,LISTH2))
        NUMSYH1=IRPDPD(IRREP,ISYTYP(2,20+ISPIN))
        NUMSYH2=IRPDPD(IRREP,ISYTYP(2,LISTH2))
        I001=1
        I002=I001+IINTFP*MAX(NUMSYH1*DISSYH1,NUMSYH2*DISSYH2,
     &                       DISSYG*NUMSYG)
        I003=I002+IINTFP*MAX(NUMSYH2*DISSYH2,NUMSYH1*DISSYH1)
        I004=I003+IINTFP*NUMSYG*DISSYG
        I005=I004+3*IINTFP*MAX(NUMSYH1,NUMSYH2,NUMSYG,DISSYH1,
     &                         DISSYH2,DISSYG)
        IF(I005.LT.MXCOR) THEN
         CALL H4G6AB(ICORE(I001),ICORE(I002),ICORE(I002),ICORE(I003),
     &               ICORE(I001),ICORE(I0T1),ICORE(I0T2),FACTH,
     &               DISSYH1,DISSYH2,DISSYG,NUMSYH1,NUMSYH2,NUMSYG,
     &               POP(1,ISPIN),POP(1,3-ISPIN),VRT(1,ISPIN),
     &               VRT(1,3-ISPIN),LISTH1,LISTH2,LISTG,ISPIN,
     &               IRREP,IUHF,ICORE(I005),TRIP1,LISTG1)
        ELSE
         CALL INSMEM('H4G6AB',I005,MXCOR)
        ENDIF
       ENDIF
C
       I001=1
       I002=I001+IINTFP*MAX(NUMSYT*NUMSYT,NUMSYT*DISSYT,NF1(ISPIN))
       I003=I002+IINTFP*NUMSYT*DISSYT
       I004=I003+IINTFP*NUMSYG*DISSYG
c       IF(MIN(NUMSYT,NUMSYG,DISSYT,DISSYG).NE.0) THEN
       IF(MIN(NUMSYT,NUMSYG,DISSYG).NE.0) THEN
        I005=I004+3*IINTFP*MAX(NUMSYG,NUMSYT,DISSYG,DISSYT)
        IF(MXCOR.GT.I005) THEN
         CALL G6AB(ICORE(I001),ICORE(I002),ICORE(I003),
     &             ICORE(IOFFT),ICORE(I0T1A),ICORE(I0T1B),
     &             ICORE(I001),FACT,LAMBDA,TAU,TRIP1,ISPIN,
     &             POP(1,ISPIN),POP(1,3-ISPIN),VRT(1,ISPIN),
     &             VRT(1,3-ISPIN),NT,DISSYT,NUMSYT,DISSYG,
     &             NUMSYG,LISTT,LISTL,LISTG,IRREP,ICORE(I004))
        ELSE 
         CALL INSMEM('G6AB',I005,MXCOR)
        ENDIF
       ENDIF
200   CONTINUE
1000  CONTINUE
C
C ALL DONE
C
      TWO=4.D0/DFLOAT(1+IUHF)
      if(iuhf.eq.0) then
       call checkgam1(icore,10,110,two,iuhf,2,pop)
      endif
      IF(IUHF.EQ.1) THEN
       CALL CHECKGAM(ICORE,10,110,TWO)
       CALL CHECKGAM(ICORE,7,107,TWO)
       CALL CHECKGAM(ICORE,8,108,TWO)
       CALL CHECKGAM(ICORE,9,109,TWO)
      ENDIF
C
      RETURN
      END
