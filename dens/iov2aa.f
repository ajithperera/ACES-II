      SUBROUTINE IOV2AA(G,G1,W,MAXSIZE,AIOV,FACT,ISPIN,POP,VRT,
     &                  DISSYT,NUMSYT,DISSYW,NUMSYW,NVRTSQ,LISTG,
     &                  LISTW,IRREP,TMP)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER DISSYT,DISSYW,DISMAX,DISLEFT,DISREAD,DIRPRD,POP,VRT
      DIMENSION G(DISSYT,1),G1(NVRTSQ,1),W(DISSYW,1),AIOV(1),
     &          POP(8),VRT(8),TMP(1)
C
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255,2),DIRPRD(8,8)
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      common /dropgeo/ ndrgeo
C
      DATA ONE /1.D0/
C
C GET FIRST <EF//GI> INTEGRALS, WE NEED THEM ANYWAY
C
      CALL GETLST(W,1,NUMSYW,2,IRREP,LISTW)   
C
C CAN WE DO IT IN CORE ?
C
      IF(MAXSIZE.GE.DISSYT*NVRTSQ) THEN
C
C IN CORE ALGORITHM
C
C  PICK UP THE G AMPLITUDES
C
      if (ndrgeo.eq.0) then
        CALL GETLST(G,1,NUMSYT,1,IRREP,LISTG)
      else   
        CALL GETGV2U(G,TMP,1,NUMSYT,1,IRREP,LISTG,ispin,listg,dissyt)
      endif 
C
C EXPAND THE VIRTUAL-VIRTUAL-BLOCK OF GAMMA
C
       CALL SYMEXP(IRREP,VRT,DISSYT,G)
C
C PERFORM MULTIPLICATION 
C
C JOFFG OFFSET IN THE VIRTUAL-VIRTUAL BLOCK OF G 
C JOFFW OFFSET IN THE VIRTUAL-OCCUPIED BLOCK OF W
C IOFF OFFSET IN IOV
C
       IOFF=1
       JOFFG=1
       JOFFW=1
       DO 90 IRREPJ=1,NIRREP
C         
C  GET NUMBER OF VIRTUAL ORBITALS FOR IRREPJ     
C
        NOCCJ=POP(IRREPJ)
        NVRTJ=VRT(IRREPJ)
C
C  DETERMINE IRREPI WHOSE DIRECT PRODUCT WITH IRREPJ GIVES IRREP
C
        IRREPI=DIRPRD(IRREP,IRREPJ)
C
C  GET NUMBER  OF VIRTUAL ORBITALS FOR IRREPI
C
        NVRTI=VRT(IRREPI)
C
C  IF NVRTI OR NVRTJ EQUAL ZERO, NOTHING TO COMPUTE
C
        IF(MIN(NVRTI,NVRTJ,NOCCJ).NE.0) THEN
C
          CALL XGEMM('T','N',NVRTJ,NOCCJ,NVRTI*NUMSYT,FACT,
     &              G(1,JOFFG),NVRTI*NUMSYT,W(1,JOFFW),
     &              NVRTI*NUMSYT,ONE,AIOV(IOFF),NVRTJ)
        ENDIF
C
C  UPDATE OFFSETS
C
        JOFFG=JOFFG+NVRTI*NVRTJ
        JOFFW=JOFFW+NVRTI*NOCCJ
        IOFF=IOFF+NVRTJ*NOCCJ
C
90     CONTINUE
C
      ELSE
C
C  OUT-OF-CORE ALGORITHM
C
C DETERMINE NUMBER OF DISTRIBUTIONS WHICH FIT INTO CORE
C
       DISMAX=MAXSIZE/NVRTSQ
       IF(DISMAX.LE.0) STOP 'IOV2AA'
C
C SET OFFSET FOR GAMMA LIST AND INTEGRAL LIST
C
       IOFFSET=1
       IOFFW=0
       ITIN = 1 
      NTDIS=NUMSYT
      IF (NDRGEO.NE.0) THEN
        ITIN1 = ITIN 
        CALL GETINV2U(TMP(ITIN1),NUMSYT,DISSYT,LISTG,IRREP,ISPIN)
        ITIN = ITIN1 + NUMSYT + 1 
        NIKI = 1
        IODRSET = 1
      ENDIF 
C
C SET NUMBER OF DISTRIBUTIONS TO READ
C
       DISLEFT=NUMSYT
C
10     CONTINUE
C
C  DETERMINE NUMBER OF DISTRIBUTION READ DURING THIS PASS
C
        DISREAD=MIN(DISMAX,DISLEFT)
        DISLEFT=DISLEFT-DISREAD
C
C  GET THE DISTRIBUTIONS FROM DISK
C
      if (ndrgeo.eq.0) then
       CALL GETLST(G,IOFFSET,DISREAD,1,IRREP,LISTG)
      else  
       CALL GETGV2UO(G,TMP(ITIN),IODRSET,DISREAD,1,IRREP,LISTG,ispin,
     x                     listg,dissyt,TMP(ITIN1),NIKI)
      endif 
C
C  UPDATE IOFFSET
C
        IOFFSET=IOFFSET+DISREAD
C        
C  EXPAND THE LEFT VIRTUAL-VIRTUAL BLOCK OF GAMMA
C
        CALL SYMEXP2(IRREP,VRT,NVRTSQ,DISSYT,DISREAD,G1,G)
C
C  LOOP OVER ALL DISTRIBUTIONS IN CORE
C
        DO 100 NUM=1,DISREAD
C
         IOFFW=IOFFW+1  
C
C  COPY THE REQUIRED PART OF W TO TMP IN ORDER TO PERFORM MULTIPLICATION
C
         CALL SCOPY(NUMSYW,W(IOFFW,1),DISSYW,TMP(ITIN),1)
C
C  LOOP OVER IRREPS OF A AND I
C
         IOFF=1
         JOFFG=1
         JOFFW=1
         DO 190 IRREPJ=1,NIRREP
          NOCCJ=POP(IRREPJ)
          NVRTJ=VRT(IRREPJ)
          IRREPI=DIRPRD(IRREP,IRREPJ)
          NVRTI=VRT(IRREPI)
          IF(MIN(NOCCJ,NVRTI,NVRTJ).NE.0) THEN
           CALL XGEMM('T,','N',NVRTJ,NOCCJ,NVRTI,FACT,
     &                G1(JOFFG,NUM),NVRTI,TMP(ITIN+JOFFW),
     &                NVRTI,ONE,AIOV(IOFF),NVRTJ)
          ENDIF
C
C  UPDATE OFFSETS
C
          JOFFG=JOFFG+NVRTI*NVRTJ
          JOFFW=JOFFW+NVRTI*NOCCJ
          IOFF=IOFF+NVRTJ*NOCCJ 
190      CONTINUE
100     CONTINUE
C
C  IF SOME DISTRIBUTIONS ARE LEFT ON DISK, GO TO 10
C
       IF(DISLEFT.NE.0) GO TO 10
      ENDIF
C
      RETURN
      END
