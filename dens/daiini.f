      SUBROUTINE DAIINI(DVO,AIOO,AIOV,ICORE,MAXCOR,IUHF,
     &                  NONHF_TERMS_EXIST)
C
C THIS ROUTINE CALCULATES THE CONTRIBUTIONS DUE TO DVO TO THE
C INTERMEDIATES IOO AND IOV
C
C  IOO(I,J) <---     - SUM E SUM M D(E,M) A(EMIJ)
C
C  IOV(A,I) <---     - f(II) D(A,I)
C
C  FOR ROHF, THE FIRST PART IS THE SAME, THE SECOND HAS TO BE
C  MODIFIED.
C 
C  THE SECOND PART READS AS
C
C  IOV(A,I) =         - SUM M F(I,M) D(M,A)
C
C  IOO(I,1) =         - TWO SUM E F(E,M) D(E,1)  ALPHA SPIN CASE
C
CEND
C
C CODED OCT/90 JG
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL DENS,GRAD,QRHF,NONHF,ROHF,SEMI,CANON,TRIP1,TRIP2,
     &        GABCD,RELAXED,TRULY_NONHF,NONHF_TERMS_EXIST
      INTEGER DIRPRD,POP,VRT
      CHARACTER*1 SPCASE(2)
      DIMENSION IF(4)
      DIMENSION DVO(1),AIOO(1),AIOV(1),ICORE(MAXCOR)
      COMMON/INFO/NOCCO(2),NVRTO(2)
      COMMON/FILES/LUOUT,MOINTS
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),NTOT(18)
      COMMON/SYMINF/NSTART,NIRREP,IRREPA(255,2),DIRPRD(8,8)  
      COMMON/DERIV/DENS,GRAD,QRHF,NONHF,ROHF,SEMI,CANON,TRIP1,
     &             TRIP2,GABCD,RELAXED,TRULY_NONHF
CJDW KKB stuff
C     COMMON /SYM/     POP(8,2),VRT(8,2),NT(2),NF1(2),NF2(2)
      COMMON/SYM2/     POP(8,2),VRT(8,2),NT(2),NF1(2),NF2(2)
      COMMON /DROPGEO/ NDRGEO
      COMMON /SHIFT/   ISHIFT
CJDW END
C
      DATA ZILCH,ONEM,ONE, TWOM /0.0,-1.D0,1.D0,-2.D0/
      DATA SPCASE /'A','B'/
C
      I0AA=1
      I0BB=I0AA+NT(1)*IINTFP
      CALL SYMTRA(1,VRT(1,1),POP(1,1),1,DVO,ICORE(I0AA))
      IF(IUHF.NE.0) THEN
       IBOT=I0BB+NT(2)*IINTFP
       IOFF=1+NT(1)
       CALL SYMTRA(1,VRT(1,2),POP(1,2),1,DVO(IOFF),ICORE(I0BB))
      ELSE 
       IBOT=I0BB
      ENDIF
      MXCOR=MAXCOR-IBOT+1
      CALL VOINOO(AIOO,ICORE,ICORE(IBOT),MXCOR,IUHF)
C
C  SECOND PART
C
      IF(ROHF .OR. NONHF_TERMS_EXIST) THEN
C
C ALLOCATE MEMORY FOR THE FOCK MATRICES F(I,M) AND F(i,m)
C
        IF(1)=1
        IF(2)=IF(1)+IINTFP*NF1(1)
        IF(3)=IF(2)+IINTFP*NF1(2)
C
C  READ THE OCCUPIED-OCCUPIED BLOCK OF THE FOCK MATRICES
C
CJDW ISHIFT for KKB
        CALL GETLST(ICORE(IF(1)),1,1,1,5,91+ISHIFT)
        IF (IUHF .NE. 0) CALL GETLST(ICORE(IF(2)),1,1,1,6,91+ISHIFT)
CJDW END
C
C  READ THE OCCUPIED-VIRTUAL BLOCK OF THE FOCK MATRICES
C
        I00=IF(3)+NT(1)*IINTFP
        I01=I00+NF1(1)*IINTFP
        IF(SEMI) THEN
          CALL GETREC(20,'JOBARC','STANFAJA',NT(1)*IINTFP,ICORE(IF(3)))
          IMOA=0
          IMVA=0
          IMOB=0
          IMVB=0
          IMAXW=0
          DO 3000 I=1,NIRREP
            IOOA=POP(I,1)*POP(I,1)
            IVVA=VRT(I,1)*VRT(I,1)
            IOOB=POP(I,2)*POP(I,2)
            IVVB=VRT(I,2)*VRT(I,2)
            IMOA=IMOA+IOOA
            IMVA=IMVA+IVVA
            IMOB=IMOB+IOOB
            IMVB=IMVB+IVVB
            IMAXW=MAX(IMAXW,IOOA,IVVA,IOOB,IVVB)
 3000     CONTINUE
          I000=I01
          I010=I000+IMOA*IINTFP
          I020=I010+IMVA*IINTFP
          I030=I020+IMOB*IINTFP
          I040=I030+IMVB*IINTFP
          I050=I040+IMAXW*IINTFP
          IF(I040.GT.MAXCOR) THEN
            WRITE(LUOUT,9000)
 9000       FORMAT(T3,'@DAIINI-F, Not enough memory for W matrices.')
            CALL ERREX
          ENDIF
          CALL GETREC(20,'JOBARC','WMATRXOA',IMOA*IINTFP,ICORE(I000))
          CALL GETREC(20,'JOBARC','WMATRXVA',IMVA*IINTFP,ICORE(I010))
          CALL GETREC(20,'JOBARC','WMATRXOB',IMOB*IINTFP,ICORE(I020))
          CALL GETREC(20,'JOBARC','WMATRXVB',IMVB*IINTFP,ICORE(I030))
        ELSE
CJDW ISHIFT for KKB
C     There is something worrying here. Thus, old code has a 3, not 5.
          CALL GETLST(ICORE(IF(3)),1,1,1,5,93+ISHIFT)
CJDW END
        ENDIF
C
C  LOOP OVER SPIN CASES
C
         DO 5 ISPIN=1,IUHF+1
C
C  LOOP OVER ALL IRREPS
C
          IOFFF=IF(ISPIN)
          IOFFV=IF(2+ISPIN)
          IOFF=1+(ISPIN-1)*NT(1)
          IOFFO=1+(ISPIN-1)*NF1(1)
          DO 10 IRREP=1,NIRREP
C
           NOCC=POP(IRREP,ISPIN)
           NVRT=VRT(IRREP,ISPIN)
           NOPEN=POP(IRREP,1)-POP(IRREP,2)
C
           CALL XGEMM('N','N',NVRT,NOCC,NOCC,ONEM,DVO(IOFF),NVRT,
     &                ICORE(IOFFF),NOCC,ONE,AIOV(IOFF),NVRT)
C
C         CALL XGEMM('T','N',NOCC,NOCC,NVRT,ONEM,ICORE(IOFFV),NVRT,
C     &              DVO(IOFF),NVRT,ONE,AIOO(IOFFO),NOCC)
C
           IOFFO=IOFFO+NOCC*NOCC
           IOFFV=IOFFV+NOCC*NVRT*IINTFP
           IOFFF=IOFFF+IINTFP*NOCC*NOCC
           IOFF=IOFF+NOCC*NVRT
10        CONTINUE
C
5       CONTINUE
C
        CALL ZERO(ICORE(I00),NF1(1))
        IF(SEMI) THEN
          CALL WTRANS(DVO,ICORE(I000),ICORE(I010),ICORE(I020),
     &                ICORE(I030),ICORE(I040),1)
        ENDIF
        IOFFV=IF(3)
        IOFF=1
        IOFFO=0
        DO 12 IRREP=1,NIRREP
          NOCC=POP(IRREP,1)
          NVRT=VRT(IRREP,1)
          NOPEN=POP(IRREP,1)-POP(IRREP,2)
          IF(NOPEN.GT.0) THEN
            NOCCB=POP(IRREP,2)
            IOFFA=I00+(IOFFO+NOCCB*NOCC)*IINTFP
            IF(MIN(NOCCB,NOCC,NOPEN,NVRT).NE.0) THEN
              CALL XGEMM('T','N',NOCCB,NOPEN,NVRT,TWOM,ICORE(IOFFV),
     &                   NVRT,DVO(IOFF+NOCCB*NVRT),NVRT,ZILCH,
     &                   ICORE(IOFFA),NOCC)
            ENDIF
          ENDIF
          IOFFO=IOFFO+NOCC*NOCC
          IOFFV=IOFFV+NOCC*NVRT*IINTFP
          IOFF=IOFF+NOCC*NVRT
   12   CONTINUE
        IF(SEMI) THEN
          CALL WTRANS(DVO,ICORE(I000),ICORE(I010),ICORE(I020),
     &                ICORE(I030),ICORE(I040),0)
          CALL WOO(ICORE(I00),ICORE(I000),ICORE(I020),ICORE(I040),
     &             1,0,0)
        ENDIF
        CALL SAXPY(NF1(1),ONE,ICORE(I00),1,AIOO,1)
C
      ENDIF
C
      DO 100 ISPIN=1,IUHF+1
C
       CALL GETREC(20,'JOBARC','SCFEVAL'//SPCASE(ISPIN),
     &             IINTFP*(NOCCO(ISPIN)+NVRTO(ISPIN)),ICORE)
C
       CALL VMINUS(ICORE,NOCCO(ISPIN))
C
       INDOCC=1-IINTFP
       IOFFVO=1+(ISPIN-1)*NT(1)
C
       DO 200 IRREP=1,NIRREP
C
        NOCC=POP(IRREP,ISPIN)
        NVRT=VRT(IRREP,ISPIN)
C
        DO 210 I=1,NOCC
C
         INDOCC=INDOCC+IINTFP 
C
         CALL SAXPY(NVRT,ICORE(INDOCC),DVO(IOFFVO),1,AIOV(IOFFVO),1)
C
         IOFFVO=IOFFVO+NVRT 
C
210     CONTINUE 
C
200    CONTINUE
C
100   CONTINUE
C
C ALL DONE 
C
      RETURN
      END
