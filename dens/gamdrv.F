      SUBROUTINE GAMDRV(ICORE,MAXCOR,IUHF,LCC)
C
C THIS ROUTINE DRIVES THE CONSTRUCTION OF THE GAMMA
C INTERMEDIATES AS THEY ARE REQUIRED IN CC/MBPT
C GRADIENT THEORY.
C
C NOTE THAT FOR THE VARIOUS METHODS THE FOLLOWING GAMMA 
C INTERMEDIATES ARE REQUIRED:
C
C  MBPT(2) : NONE,   G(IJ,AB) = 1/2 T1(IJ,AB)
C
C  MBPT(3) : G(IJ,KL),G(AB,CD),G(IA,JB)   G(IJ,AB) = 1/2 T2(IJ,AB)
C
C  MBPT(4) : ALL, EXCEPT G(IJ,AB) WHICH IS A SUM OF T3(IJ,AB) AND X(IJ,AB)
C
C  CCD :   SAME AS FOR MBPT(3) 
C
C  QCISD, CCSD : SAME AS FOR MBPT(4)
C
C ACTUALLY THE FOLLOWING INTERMEDIATES ARE CONSTRUCTED HERE:
C
C  IN GAMMA2        :       4*G(AB,CD)
C
C  IN GAMMA3        :       4*G(IJ,KL)
C
C  IN GAMMA4        :       G(IA,JB) 
C
C  IN GAMMA5        :       G(AB,CI)
C
C  IN GAMMA6        :       G(IJ,KA)
C
C IN ADDITION FOR METHODS WHICH INCLUDES QUADRUPLE EXCITATION
C THE CORRESPONDING X(IJ,AB) CONTRIBUTION IS CALCULATED IN
C FORMX:
C
C  X(IJ,AB) = 1/4 SUM M,N SUM E,F ...
C
C NOTE THAT FOR CCSD THE H4 ARRAY HAS TO BE RESORTED BEFORE 
C GAMMA5 AND GAMMA6 ARE CALLED.
C
CEND
C
C  CODED AUGUST/90  JG
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC
      LOGICAL DENS,GRAD,QRHF,NONHF,ROHF,SEMI,CANON,TRIP1,TRIP2,
     &        GABCD,RELAXED,TRULY_NONHF,LTRP
      LOGICAL CIS,RUMBPT3,EOM,LCC
      DIMENSION ICORE(MAXCOR)
      COMMON/EXCITE/CIS,EOM
      COMMON/METH/MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC
      COMMON/DERIV/DENS,GRAD,QRHF,NONHF,ROHF,SEMI,CANON,TRIP1,
     &             TRIP2,GABCD,RELAXED,TRULY_NONHF
      COMMON/FLAGS/IFLAGS(100)
      COMMON /LTRIP/ LTRP
C 
#include "parcc.com"
C
C
C INITIALIZE THE GAMMA INTERMEDIATES
C
      IF (.NOT. LTRP) CALL INIGAM(ICORE, MAXCOR,IUHF)
      IF(CIS)THEN
       CALL GAMMA4(ICORE,MAXCOR,IUHF)
       RETURN
      ENDIF
C
C CALCULATE V INTERMEDIATES FOR EOM CALCULATIONS
C
      IF(EOM .OR. LTRP)CALL FORMV1(ICORE,MAXCOR,IUHF)
C
C FORM THE X(IJ,AB) TERM, BUT NOT FOR MBPT3  
C SKIP IT ALSO FOR UCC BECAUSE IT WAS CALCCULATED IN ENERGY CODE
C 
      IF(.NOT.MBPT3.AND..NOT.UCC) THEN
       CALL FORMX(ICORE,MAXCOR,IUHF,LCC)
      ENDIF
C
C CALCULATE GAMMA2, GAMMA3, AND GAMMA4  (REQUIRED FOR ALL METHODS)
C 
#ifdef _DEBUG_LVL0
      write(6,*)
      write(6,"(a)") "Checksums of G(ab,cd)"
#endif 
      IF(.NOT.GABCD) CALL GAMMA2(ICORE,MAXCOR,IUHF,0)

#ifdef _DEBUG_LVL0
      write(6,*)
      write(6,"(a)") "Checksums of G(ij,kl)"
#endif 
      CALL GAMMA3(ICORE,MAXCOR,IUHF)
#ifdef _DEBUG_LVL0
      write(6,*)
      write(6,"(a)") "Checksums of G(ia,jb)"
#endif 
      CALL GAMMA4(ICORE,MAXCOR,IUHF)
C
C IF NOT MBPT3 AND NOT CCD CALCULATE GAMMA5 AND GAMMA6 
C
      RUMBPT3=MBPT3.AND.(.NOT.ROHF)
      IF(.NOT.RUMBPT3.AND..NOT.CCD) THEN
C
C RESORT H4 FOR CALLING GAMMA5 AND GAMMA6 (ONLY CCSD)
C
       IF(CCSD) CALL SORTH4(ICORE,MAXCOR,IUHF)
C
#ifdef _DEBUG_LVL0
      write(6,*)
      write(6,"(a)") "Checksums of G(ab,ci)"
#endif 
       CALL GAMMA5(ICORE,MAXCOR,IUHF)
#ifdef _DEBUG_LVL0
      write(6,*)
      write(6,"(a)") "Checksums of G(ij,ka)"
#endif 
       CALL GAMMA6(ICORE,MAXCOR,IUHF)

C Construct piece of G(ij,ab) due to H4(ME,BJ) foer DCCSD before 
C Gamma1 call to construct G(ij,ab)

       IF (ISPAR .AND. COULOMB) THEN
           CALL FORMH4(ICORE,MAXCOR,IUHF)
           CALL PDCC_FORMH4(ICORE,MAXCOR,IUHF)
           CALL H4INX2(ICORE,MAXCOR,IUHF) 
       ENDIF 

C RESORT H4 TO ORIGINAL ORDER FOR CCSD SECOND DERIVATIVES

       IF(CCSD.AND.IFLAGS(3).EQ.2) THEN
        CALL SORTH4(ICORE,MAXCOR,IUHF)

       ENDIF
      ENDIF
C
C ALL DONE
C
      RETURN
      END
