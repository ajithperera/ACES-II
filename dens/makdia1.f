
      SUBROUTINE MAKDIA1(XIA,ICORE,MAXCOR,IUHF,bRedundant)
C
C   THIS ROUTINE COMPUTES THE OCCUPIED-VIRTUAL BLOCK OF THE
C   RELAXED DENSITY MATRIX. XIA IS PASSED IN AND OVERWRITTEN 
C   BY DIA
C
C   THE Z-VECTOR EQUATION ARE SOLVED ITERATIVELY, FOR RHF AN
C   FULL IN CORE ALGORITHMN SHOULD BE ALWAYS POSSIBLE, FOR UHF
C   HOWEVER, WE IMPLEMENTED BOTH AN INCORE AND OUTCORE VERSION
C
CEND
C
C  CODED JULY AND AUGUST/90  JG
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL INCORE,DENS,GRAD,QRHF,NONHF,ROHF,SEMI,CANON,
     &        TRIP1,TRIP2,GABCD,RELAXED,TRULY_NONHF,ONLYM,ONLYP
      logical bRedundant
      INTEGER DIRPRD,POP,VRT,POPRHF,VRTRHF,POPDOC,VRTDOC
      DIMENSION XIA(1),ICORE(MAXCOR)
      COMMON/INFO/NOCCO(2),NVRTO(2)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
c      COMMON/QRHFINF/POPRHF(8),VRTRHF(8),NOSH1(8),NOSH2(8),
c     &               POPDOC(8),VRTDOC(8),NAI,N1I,N2A,
c     &               NUMISCF,NUMASCF
      COMMON/QRHFINF/POPRHF(8),VRTRHF(8),NOSH1(8),NOSH2(8),
     &               POPDOC(8),VRTDOC(8),NAI,N1I,N2A,
c&line mod
     &               NUMISCF,NUMASCF,ISPINP,ISPINM,IQRHF
      COMMON/FLAGS/ IFLAGS(100)
      COMMON/SYMPOP2/IRPDPD(8,22)
      COMMON/SYMPOP/IRP_DM(8,22),ISYTYP(2,500),NTOT(18)
      COMMON/SYMINF/NSTART,NIRREP,IRREPA(255,2),DIRPRD(8,8)
      COMMON/SYM2/POP(8,2),VRT(8,2),NT(2),NF1(2),NF2(2)
      COMMON/DERIV/DENS,GRAD,QRHF,NONHF,ROHF,SEMI,CANON,TRIP1,
     &             TRIP2,GABCD,RELAXED,TRULY_NONHF
      common /dropgeo/ ndrgeo
C
C
      DATA TOL/0.0D+0/
C
CJDW KKB stuff. PS has removed these lines. Are they important ? Probably
C               not.
C
c      IF(QRHF) THEN
cC
cC SEE IF THIS IS A PURE QRHF_M OR PURE QRHF_P CASE
cC
c       ONLYM=.TRUE.
c       ONLYP=.TRUE.
c       DO 103 IRREP=1,NIRREP
c        IF(NOSH1(IRREP).NE.0)ONLYM=.FALSE.
c        IF(NOSH2(IRREP).NE.0)ONLYP=.FALSE.
c103    CONTINUE
c       IF(ONLYP)IQRHF=1
c       IF(ONLYM)IQRHF=2
c      ENDIF
C
C  SET PARAMETERS FOR SOLVING THE Z-VECTOR EQUATION
C
      KMAX=IFLAGS(31)
      CONV=10.0**(-IFLAGS(30))
C
C  ALLOCATE CORE MEMORY FOR THE ORBITAL ENERGIES
C
      MXCOR=MAXCOR
      IF(.NOT.QRHF.AND..NOT.SEMI) THEN
C
C  SIMPLE HF
C
       NORBA=NOCCO(1)+NVRTO(1)
       IEVAA=MXCOR+1-IINTFP*NORBA
       MXCOR=MXCOR-IINTFP*NORBA
       CALL GETREC(20,'JOBARC','SCFEVALA',IINTFP*NORBA,ICORE(IEVAA))
       IF(IUHF.EQ.1) THEN
        NORBB=NOCCO(2)+NVRTO(2)
        IEVBB=IEVAA-IINTFP*NORBB
        MXCOR=MXCOR-IINTFP*NORBB
        CALL GETREC(20,'JOBARC','SCFEVALB',IINTFP*NORBB,ICORE(IEVBB))
       ENDIF
      ELSEIF(QRHF.AND..NOT.SEMI) THEN
C
C QRHF       
C
       NORBA=NOCCO(IQRHF)+NVRTO(IQRHF)
       IEVAA=MXCOR+1-IINTFP*NORBA
       MXCOR=MXCOR-IINTFP*NORBA
c------------------------------------------
c      if (ndrgeo.eq.0) then
        CALL GETREC(20,'JOBARC','RHFEVAL ',IINTFP*NORBA,ICORE(IEVAA))
c      else
c       CALL GETREC(20,'JOBARC','RHFEVAL0',IINTFP*NORBA,ICORE(IEVAA))
c      endif 
c------------------------------------------
C
      ELSEIF(SEMI) THEN
       NORBA=NOCCO(1)+NVRTO(1)
       IEVAA=MXCOR+1-IINTFP*NORBA
       MXCOR=MXCOR-IINTFP*NORBA
        CALL GETREC(20,'JOBARC','ROHFEVLA',IINTFP*NORBA,ICORE(IEVAA))
       NORBB=NOCCO(2)+NVRTO(2)
       IEVBB=IEVAA-IINTFP*NORBB
       MXCOR=MXCOR-IINTFP*NORBB
        CALL GETREC(20,'JOBARC','ROHFEVLB',IINTFP*NORBB,ICORE(IEVBB))
      ENDIF
C
C   FORM NOW THE A MATRIX AND SOLVE FOR DIA*(E(I)-E(A))
C
      IF(IUHF.EQ.0) THEN
C -----------------------------THIS IS CANONICAL RHF-----------------------
C
       NUMSYW=IRPDPD(1,ISYTYP(1,19)) 
C I010 ... A MATRIX OF DIMENSION NUMSYW*NUMSYW
       I010=1
C I020 ... SCRATCH VECTOR FOR CONSTRUCTING THE A MATRIX
       I020=I010+IINTFP*NUMSYW*NUMSYW
C I030 ... TOTAL LENGTH OF CORE REQUIRED
       I030=I020+IINTFP*NUMSYW*NUMSYW
       IF(I030.LT.MXCOR) THEN
c When single_store is on, the ICORE array starting from the address
c I030 is used to generate the redundant list. At the end of the ICORE
c array we have orbital energies and we should make sure that we do not
c overwrite them during getlst_nr. This is easily accomplished by simply
c passing the MXCOR (see above), and checking memory requirements
c against it. A. Perera, 03/2005.
        CALL MKARHF1(ICORE(I010),ICORE(I020),ICORE(I030),MXCOR-I030+1,
     &               bRedundant)
       ELSE
        CALL INSMEM('MKARHF',I030,MXCOR)
       ENDIF 
C
C  SCALE XIA WITH THE ORBITAL ENERGY DENOMINATOR
C
       CALL FORMZ(XIA,ICORE(IEVAA),POP(1,1),VRT(1,1),NOCCO(1))
C
C       ALLOCATE MEMORY FOR SOLVING THE Z-VECTOR EQUATION
C
C    I010  .... A-MATRIX (ALREADY ALLOCATED
C
C    I020  .... SCRATCH VECTOR FOR XIANEW, SOLVING THE LINEAR EQUATION
C
      I030=I020+IINTFP*MAX(NUMSYW,2*KMAX)
C
C    I030  .... THE VECTOR WHICH SPAN THE ITERATIVE SUBSPACE
C
      I040=I030+IINTFP*(KMAX+1)*NUMSYW
C
C    I040  .... THE SMALL A MATRIX
C
      I050=I040+IINTFP*KMAX*KMAX
C
C    I050  .... THE NORM OF ALL EXPANSION VECTORS
C
      I060=I050+IINTFP*(KMAX+1)
C
      IF(I060.LT.MXCOR) THEN
       CALL LINEQZ1(ICORE(I010),XIA,ICORE(I020),ICORE(I030),ICORE(I040),
     &             ICORE(I050),ICORE(IEVAA),CONV,NUMSYW,KMAX,NOCCO(1))
      ELSE
       CALL INSMEM('LINEQZ1',I060,MXCOR)
      ENDIF
C
C UHF CASE, This is a confusing logic. When ROHF is asked (IUHF=2) 
C in setmet.F, ROHF is set to true and IUHF is switch to 1 (truly 
C dangerous stuff). So, the code enter into this block for
C UHF and ROHF.
C
       ELSE IF(IUHF.EQ.1) THEN
C
C  CHECK IF WE ARE RUNNING QRHF, ROHF, OR SIMPLE UHF
C
        IF(.NOT.QRHF) THEN
C----------------------------This is ROHF-------------------------
C
         IF(ROHF) THEN
C
C  Now determine the size of the W matrices.
C
           IF(SEMI) THEN
             IMOA=0
             IMVA=0
             IMOB=0
             IMVB=0
             IMAXW=0
             DO 3000 I=1,NIRREP
               IOOA=POP(I,1)*POP(I,1)
               IVVA=VRT(I,1)*VRT(I,1)
               IOOB=POP(I,2)*POP(I,2)
               IVVB=VRT(I,2)*VRT(I,2)
               IMOA=IMOA+IOOA
               IMVA=IMVA+IVVA
               IMOB=IMOB+IOOB
               IMVB=IMVB+IVVB
               IMAXW=MAX(IMAXW,IOOA,IVVA,IOOB,IVVB)
 3000        CONTINUE
           ENDIF
C
C ROHF RUN
C
          NUMSYWA=IRPDPD(1,ISYTYP(2,19))
          NUMSYWB=IRPDPD(1,ISYTYP(2,20))
C
C  I010 .... 3 BLOCKS OF A-MATRICES
C
          I010=1
          I020=I010+IINTFP*(NUMSYWA*NUMSYWA+NUMSYWB*NUMSYWB
     &                      +NUMSYWA*NUMSYWB)
C
C  I020 .... SCRATCH ARRAYS FOR CONSTRUCTING THE A MATRIX
C
          IEND1=I020+IINTFP*MAX(NUMSYWA*NUMSYWA,NUMSYWB*NUMSYWB)
C
C  ALLOCATE CORE FOR SOLUTION OF Z-VECTOR EQUATIONS
C
C  I010 .... A-MATRICES, ALREADY ALLOCATED
C
C  I020 ... SCRATCH VECTOR FOR XIANEW, SOLVING THE LINEAR EQUATIONS
C
          I030=I020+IINTFP*MAX(NUMSYWA+NUMSYWB,2*KMAX) 
C
C  I030 .... VECTORS WHICH SPAN THE ITERATIVE SUBSPACE
C
          I040=I030+IINTFP*(KMAX+1)*(NUMSYWA+NUMSYWB)
C
C  I040 .... THE SMALL A-MATRIX
C
          I050=I040+IINTFP*KMAX*KMAX
C
C  I050 ... THE NORM OF ALL EXPANSION VECTORS
C
          I060=I050+IINTFP*(KMAX+1)
C
C  I060 .... FOCK MATRICES (OCCUPIED-OCCUPIED-BLOCK)
C
          I070=I060+IINTFP*(NF1(1)+NF1(2))
C
C  I070 .... FOCK MATRICES (VIRTUAL-VIRTUAL-BLOCK)
C
          I080=I070+IINTFP*(NF2(1)+NF2(2))
C
C  I080 ... FOCK MATRIX   (OCCUPIED-VIRTUAL BETA SPIN CASE)
C
          IF(SEMI) THEN
            I090=I080+IINTFP*NT(2)
C
C  I090 = Alpha o-o W matrices
C  I100 = Alpha v-v W matrices
C  I110 = Beta o-o W matrices
C  I120 = Beta v-v W matrices
C  I130 = Scratch matrix for WTRANS
C
            I100=I090+IMOA*IINTFP
            I110=I100+IMVA*IINTFP
            I120=I110+IMOB*IINTFP
            I130=I120+IMVB*IINTFP
            IEND2=I130+IMAXW*IINTFP
          ELSE
            IEND2=I080+IINTFP*NT(2)
            I090=IEND2
            I100=IEND2
            I110=IEND2
            I120=IEND2
            I130=IEND2
          ENDIF
C
C  IEND2 ... TOTAL LENGTH REQUIRED FOR Z-VECTOR SOLUTION
C
C
          IF(MAX(IEND1,IEND2).LT.MXCOR) THEN
           INCORE=.TRUE.
c           CALL MKAUHF(ICORE(I010),ICORE(I020))
           CALL MKAUHF(ICORE(I010),ICORE(I020),icore(I030),
     &                 mxcor-I030+1,bRedundant)
          ELSE
           INCORE=.FALSE.
           write(*,*) ' Sorry, no out-of-core algorithm available'
           CALL ERREX
          ENDIF
C
          IF(SEMI) THEN
            CALL GETREC(20,'JOBARC','WMATRXOA',IMOA*IINTFP,ICORE(I090))
            CALL GETREC(20,'JOBARC','WMATRXVA',IMVA*IINTFP,ICORE(I100))
            CALL GETREC(20,'JOBARC','WMATRXOB',IMOB*IINTFP,ICORE(I110))
            CALL GETREC(20,'JOBARC','WMATRXVB',IMVB*IINTFP,ICORE(I120))
            CALL WTRANS(XIA,ICORE(I090),ICORE(I100),ICORE(I110),
     &                  ICORE(I120),ICORE(I030),1)
          ENDIF
C
          CALL ROHFZ(XIA,XIA(1+NUMSYWA),ICORE(IEVAA),
     &               ICORE(IEVBB),POP(1,1),POP(1,2),
     &               VRT(1,1),VRT(1,2),NOCCO(1),NOCCO(2))
C
          CALL LINEQZ2(ICORE(I010),XIA,ICORE(I020),ICORE(I030),
     &                 ICORE(I040),ICORE(I050),ICORE(IEVAA),
     &                 ICORE(IEVBB),ICORE(I070),ICORE(I060),ICORE(I080),
     &                 ICORE(I090),ICORE(I100),ICORE(I110),ICORE(I120),
     &                 ICORE(I130),NF2(1)+NF2(2),NF1(1)+NF1(2),NT(2),
     &                 IMOA,IMVA,IMOB,IMVB,CONV,NUMSYWA,NUMSYWB,KMAX,
     &                 NOCCO(1),NOCCO(2),INCORE,0,.TRUE.)
C
         ELSE
C ------------------------------This is CANONICAL UHF-------------------
C
C  STANDARD UHF
C
C  UHF REQUIRES MUCH MORE CORE MEMORY THAN RHF, THEREFORE CONSIDER
C  IN CORE AND OUT CORE VERSION
C
C  IF INCORE POSSIBLE, LOAD THE INTEGRALS IN THE APPROBIATE ALLOCATION
C  AND RUN THE CALCULATION
C  OTHERWISE READ THEM IN WHEN THE A*Y PRODUCT IS FORMED
C
C  TRY NOW TO ALLOCATE FOR IN-CORE
C
      NUMSYWA=IRPDPD(1,ISYTYP(2,19)) 
      NUMSYWB=IRPDPD(1,ISYTYP(2,20))
C
C  I010 ... 3 BLOCKS OF THE A-MATRIX
C
      I010=1
C
C  I020 ... SCRATCH ARRAY FOR CONTRUCTING THE A-MATRIX
C
      I020=I010+IINTFP*(NUMSYWA*NUMSYWA+NUMSYWB*NUMSYWB+NUMSYWA*NUMSYWB)
C
C  IEND1... TOTAL LENGTH OF CORE REQUIRED FOR A-MATRIX CONSTRUCTION
C
      IEND1=I020+IINTFP*MAX(NUMSYWA*NUMSYWA,NUMSYWB*NUMSYWB)           
C
C  ALLOCATE CORE FOR SOLUTION OF THE Z-VECTOR EQUATION
C
C  I010 .... A MATRIX ALREADY ALLOCATED
C
C  I020 .... SCRATCH VECTOR FOR XIANEW, SOLVING THE LINEAR EQUATION
C
      I030=I020+IINTFP*MAX(NUMSYWA+NUMSYWB,2*KMAX)
C
C  I030 ... THE VECTOR WHICH SPAN THE ITERATIVE SUBSPACE
C
      I040=I030+IINTFP*(KMAX+1)*(NUMSYWA+NUMSYWB)
C
C     I040  ... THE SMALL A MATRIX
C
      I050=I040+IINTFP*KMAX*KMAX
C
C     I050 .... THE NORM OF ALL EXPANSION VECTORS
C
      IEND2=I050+IINTFP*(KMAX+1)
C
      IF(MAX(IEND1,IEND2).LT.MXCOR) THEN
       INCORE=.TRUE.
       CALL MKAUHF(ICORE(I010),ICORE(I020),icore(I030),mxcor-I030+1,
     &             bRedundant)
      ELSE
       INCORE=.FALSE.
C
C   ALLOCATE MEMORY FOR OUT-CORE STEP
C
C   A-MATRIX BUFFER
C
       I020=I010+IINTFP*2*MAX(NUMSYWA*NUMSYWA,NUMSYWB*NUMSYWB)
C
       I030=I020+IINTFP*MAX(NUMSYWA+NUMSYWB,2*KMAX)
C
       I040=I030+IINTFP*(KMAX+1)*(NUMSYWA+NUMSYWB)
C
       I050=I040+IINTFP*KMAX*KMAX
C
       IEND=I050+IINTFP*(KMAX+1)
C
       IF(IEND.GE.MXCOR) CALL INSMEM('LINEQZ2',IEND,MXCOR)
C
      ENDIF
C
C  Allocate dummy lengths for lineqz2 call because this isn't an ROHF
C  case.
C
      IEND=0
      I060=IEND
      I070=IEND
      I080=IEND
      I090=IEND
      I100=IEND
      I110=IEND
      I120=IEND
      I130=IEND
      IMOA=0
      IMOB=0
      IMVA=0
      IMVB=0
C
C  SCALE XIA WITH THE ORBITAL ENERGY DENOMINATORS
C
        CALL FORMZ(XIA,ICORE(IEVAA),POP(1,1),VRT(1,1),NOCCO(1))
        CALL FORMZ(XIA(1+NUMSYWA),ICORE(IEVBB),POP(1,2),VRT(1,2),
     &             NOCCO(2))
C
        CALL LINEQZ2(ICORE(I010),XIA,ICORE(I020),ICORE(I030),
     &               ICORE(I040),ICORE(I050),ICORE(IEVAA),
     &               ICORE(IEVBB),ICORE(I070),ICORE(I060),ICORE(I080),
     &               ICORE(I090),ICORE(I100),ICORE(I110),ICORE(I120),
     &               ICORE(I130),NF2(1)+NF2(2),NF1(1)+NF1(2),NT(2),
     &               IMOA,IMVA,IMOB,IMVB,CONV,NUMSYWA,NUMSYWB,KMAX,
     &               NOCCO(1),NOCCO(2),INCORE,0,.FALSE.)
C
      ENDIF

C This ENDIF is for (ROHF) and ELSE IS FOR (.NOT. QRHF)

      ELSE
C --------------------------------THIS is QRHF-----------------------
C
C This block is exculsively for QRHF methods.
C
C  QRHF : FOR QRHF, WE SOLVE THE Z-VECTOR EQUATIONS ACTUALLY IN AN UHF
C  FRAMEWORK, USING RHF-ORBITAL ENERGIES AND TAKING ADVANTAGE THAT 
C  THE A MATRICES PRESERVE FULL SPIN SYMMETRY. HOWEVER, XIA IS DIFFERENT
C  FOR ALPHA AND BETA SPINS
C
      NUMSYW=IRPDPD(1,ISYTYP(2,18+IQRHF)) 
      NUMSCR=IRPDPD(1,ISYTYP(2,21-IQRHF))
C 
C  ALLOCATE MEMORY FOR IN CORE
C
C  I010 ... 2 BLOCKS OF THE A MATRIX 
C
      I010=1
C
C  I020 ... SCRATCH ARRAY FOR A MATRIX CONSTRUCTION
C
      I020=1+2*IINTFP*NUMSYW*NUMSYW
C
C  IEND1 ... TOTAL LENGTH OF CORE REQUIRED FOR A-MATRIX CONSTRUCTION 
C
      IEND1=I020+IINTFP*NUMSYW*MAX(NUMSCR,NUMSYW)
C
C  ALLOCATE CORE FOR SOLUTION OF THE Z-VECTOR EQUATION
C
C  I010 .... A MATRIX, ALREADY ALLOCATED
C
C  I020 ... SCRATCH VECTOR FOR XIANEW,SCRATCH FOR SOLVING THE LINEAR EQUATION
C
C  I030 ... THE VECTOR WHICH SPAN TEH ITERATIVE SUBSPACE
C
      I030=I020+IINTFP*MAX(NUMSYW+NUMSYW,2*KMAX)
C
C  I040 ... THE SMALL A MATRIX
C
      I040=I030+IINTFP*(KMAX+1)*(NUMSYW+NUMSYW)
C
C  I050 ... THE NORM OF ALL EXPANSION VECTORS
C
      I050=I040+IINTFP*KMAX*KMAX
C
      IEND2=I050+IINTFP*(KMAX+1)
C
      IF(MAX(IEND1,IEND2).GT.MXCOR) 
     &      CALL INSMEM('MKAQRHF',MAX(IEND1,IEND2),MXCOR)
C
       INCORE=.TRUE.
       CALL MKAQRHF(ICORE(I010),ICORE(I020))
C
C  Allocate dummy offsets because this case isn't an ROHF one.
C
        IEND=0
        I060=IEND
        I070=IEND
        I080=IEND
        I090=IEND
        I100=IEND
        I110=IEND
        I120=IEND
        I130=IEND
        IMOA=0
        IMOB=0
        IMVA=0
        IMVB=0
C
C  SCALE XIA WITH THE ORBITAL ENERGY DENOMINATORS
C
        CALL FORMZ(XIA,ICORE(IEVAA),POP(1,IQRHF),VRT(1,IQRHF),
     &            NOCCO(IQRHF))
        CALL FORMZ(XIA(1+NUMSYW),ICORE(IEVAA),POP(1,IQRHF),VRT(1,IQRHF),
     &             NOCCO(IQRHF))
C
        CALL LINEQZ2(ICORE(I010),XIA,ICORE(I020),ICORE(I030),
     &               ICORE(I040),ICORE(I050),ICORE(IEVAA),
     &               ICORE(IEVAA),ICORE(I070),ICORE(I060),ICORE(I080),
     &               ICORE(I090),ICORE(I100),ICORE(I110),ICORE(I120),
     &               ICORE(I130),NF2(1)+NF2(2),NF1(1)+NF1(2),NT(2),
     &               IMOA,IMVA,IMOB,IMVB,CONV,NUMSYW,NUMSYW,KMAX,
     &               NOCCO(IQRHF),NOCCO(IQRHF),INCORE,IQRHF,.FALSE.)
      ENDIF

      ENDIF
      RETURN
      END
