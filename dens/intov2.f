       SUBROUTINE INTOV2(AIOV,ICORE,MAXCOR,IUHF)     
C
C
C THIS ROUTINE CALCULATES THE SECOND TERM OF THE OCCUPIED-VIRTUAL BLOCK
C OF THE INTERMEDIATE I
C
C THE GENERAL FORMULA IS
C
C - 2  SUM E,F,G   G(AG,EF) <IG//EF>
C
C          SPIN TYPES : AA   AAAA AAAA
C                            ABAB ABAB
C                       BB   BBBB BBBB
C                            BABA BABA
C
C ACTUALLY 4*G(AB,CD) IS STORED, SO THAT ALL FACTORS REDUCE TO ONEM
C
C THIS SUBROUTINE USES EXPLICITELY SYMMETRY
C
CEND
C
C CODED  AUGUST/90  JG
C 
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER DIRPRD,DISSYT,DISSYW,POP,VRT
      LOGICAL MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC
      DIMENSION ICORE(MAXCOR),AIOV(1)
      COMMON /SYM2/ POP(8,2),VRT(8,2),NTAA,NTBB,NF1AA,NF1BB,NF2AA,NF2BB
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /METH/ MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC 
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255,2),DIRPRD(8,8)
      COMMON/SYMPOP2/IRPDPD(8,22)
      COMMON/SYMPOP/IRP_DM(8,22),ISYTYP(2,500),NTOT(18) 
      COMMON /SHIFT/ ISHIFT 
      COMMON /dropgeo/ ndrgeo 
C
      DATA ONE,ONEM /1.0D+0,-1.0D+0/
C
      MXCOR=MAXCOR
C
      DO 1000 ISPIN=1,IUHF+1 
C
       IF(ISPIN.EQ.1) THEN
        IOFF=1
       ELSE
        IOFF=NTAA+1
       ENDIF
       IF(IUHF.EQ.1) THEN
C
C      AA AND BB SPIN CASES
C
C  LISTG :    GAMMA AMPLITUDES
C  LISTW :    INTEGRALS 
C  FACT :     PREFACTOR
C
C
       LISTW=26+ISPIN + ISHIFT 
       LISTG=130+ISPIN
       FACT=ONEM
C
C LOOP OVER IRREPS OF EF BLOCK (THE SAME IRREPS AS THE IN AND MN BLOCKS 
C HAVE
C
       DO 100 IRREP=1,NIRREP
C
C DETERMINE LENGTH OF EXPANDED OCCUPIED-OCCUPIED BLOCK
C
        NVRT2SQ=0 
        DO 110 IRREPJ=1,NIRREP
         NVRT2SQ=NVRT2SQ+VRT(IRREPJ,ISPIN)
     &                    *VRT(DIRPRD(IRREPJ,IRREP),ISPIN)
110     CONTINUE 
        DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTG))
        NUMSYT=IRPDPD(IRREP,ISYTYP(2,LISTG))
        DISSYW=IRPDPD(IRREP,ISYTYP(1,LISTW))
        NUMSYW=IRPDPD(IRREP,ISYTYP(2,LISTW))  
        I001=1
        I002=I001+IINTFP*DISSYW*NUMSYW
        I003=I002+3*IINTFP*MAX(NUMSYT,NUMSYW,DISSYT,DISSYW)
        if (ndrgeo.ne.0) I003 = I003 + 
     x        MAX(NUMSYW,NUMSYT,DISSYT,DISSYW) + 1

c 10/20/95 nevin added for alignment
        if(mod(i003,2).eq.0)i003=i003+1

        IF(MIN(NUMSYT,DISSYT,NUMSYW,DISSYW).NE.0) THEN
         MAXSIZE=(MXCOR-I003)/IINTFP
         IF(MAXSIZE.GT.NVRT2SQ) THEN
C  
C         IN CORE VERSION
C
          CALL IOV2AA(ICORE(I003),ICORE(I003),ICORE(I001),MAXSIZE,
     &                AIOV(IOFF),FACT,ISPIN,POP(1,ISPIN),VRT(1,ISPIN),
     &                DISSYT,NUMSYT,DISSYW,NUMSYW,NVRT2SQ,LISTG,LISTW,
     &                IRREP,ICORE(I002))
         ELSE
          STOP 'IOV2AA'
         ENDIF
        ELSE
        ENDIF 
100    CONTINUE
       ENDIF
C
C       AB SPIN CASE
C
       LISTW=28+ISPIN+1-IUHF + ISHIFT 
       LISTG=133
       FACT=ONEM
C
C      LOOP OVER IRREPS.
C
       DO 200 IRREP=1,NIRREP
C
        DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTG))
        NUMSYT=IRPDPD(IRREP,ISYTYP(2,LISTG))
        DISSYW=IRPDPD(IRREP,ISYTYP(1,LISTW))
        NUMSYW=IRPDPD(IRREP,ISYTYP(2,LISTW))
        I001=1
        I002=I001+IINTFP*NUMSYW*DISSYW
        IF(MIN(NUMSYT,DISSYT).NE.0) THEN
         I003=I002+3*IINTFP*MAX(NUMSYT,DISSYT,NUMSYW,DISSYW)
         MAXSIZE=(MXCOR-I003)/IINTFP
         IF(MAXSIZE.GT.DISSYT) THEN
C
C         IN CORE VERSION
C
          CALL IOV2AB(ICORE(I003),ICORE(I001),MAXSIZE,
     &                AIOV(IOFF),FACT,ISPIN,POP(1,ISPIN),
     &                POP(1,3-ISPIN),VRT(1,ISPIN),VRT(1,3-ISPIN),
     &                DISSYT,NUMSYT,DISSYW,NUMSYW,LISTG,LISTW,
     &                IRREP,ICORE(I002),IUHF)
         
         ELSE
C
C  CURRENTLY NO OUT OF CORE VERSION
C
          STOP 'IOV2AB'
         ENDIF
        ELSE
C
C
        ENDIF
200   CONTINUE
1000  CONTINUE
C
C       Print*, "After pppp"
C       do ii=1,ntaa
C       write(*,*) ii, AIOV(ioff-1+ii)
C       enddo 
    
      RETURN

      END
