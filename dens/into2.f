C   
C THIS ROUTINE CALCULATES THE SECOND TERM OF THE OCCUPIED-OCCUPIED BLOCK
C OF THE INTERMEDIATE I
C
C THE GENERAL FORMULA IS
C
C   -  2 SUM M,N,O   G(JM,NO) <IM//NO>
C
C          SPIN TYPES : AA   AAAA AAAA
C                            ABAB ABAB
C                       BB   BBBB BBBB
C                            BABA BABA
C
C
C  NOT THAT 4 G(JM,NO) HAS BEEN STORED, SO THE 
C  ACTUAL FACTOR IN THE CALCULATION IS ONEM
C
C  FOR RHF A SPIN ADAPTED VERSION IS USED SINCE
C  THE AAAA INTEGRALS AND GAMMA INTERMEDIATES ARE
C  NOT AVAILABLE
C
C  THE FORMULA IS THERE
C
C   -2 SUM M,N,O ( 2 G(Jm,No) <Im//No> 
C
C                  + 2 G(Jm,No) <Im//No> - 2 G(Jm,No) <Im//On>)
C
C  = -4 SUM M,N,O G(Jm,No) (2 <Jm//No> - <Im//On>)
C
C THIS SUBROUTINE USES EXPLICITELY SYMMETRY
C
C CODED  JULY/90  JG
C 
      SUBROUTINE INTO2(AIOO,ICORE,MAXCOR,IUHF)     
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER DIRPRD,DISSYT,POP,VRT
      DIMENSION ICORE(MAXCOR),AIOO(1)
      COMMON /SYM2/ POP(8,2),VRT(8,2),NTAA,NTBB,NF1AA,NF1BB,NF2AA,NF2BB
      COMMON /INFO/ NOCCO(2),NVRTO(2)
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /FILES/ LUOUT,MOINTS
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),
     &DIRPRD(8,8)
      COMMON /CONTROL/ IPRNT,IXXX,IXXX2
      COMMON/SYMPOP2/IRPDPD(8,22)
      COMMON/SYMPOP/IRP_DM(8,22),ISYTYP(2,500),NTOT(18) 
      COMMON /SHIFT/ ISHIFT 
C
      DATA ONE,ONEM /1.0D+0,-1.0D+0/
C
      MXCOR=MAXCOR
C
      DO 1000 ISPIN=1,IUHF+1 
C
       IF(ISPIN.EQ.1) THEN
        IOFF=1
       ELSE
        IOFF=NF1AA+1
       ENDIF
       IF(IUHF.EQ.1) THEN
C
C      AA AND BB SPIN CASES
C
C  LISTG :    GAMMA AMPLITUDES
C  LISTW :    INTEGRALS 
C  FACT :     PREFACTOR
C
C
       LISTG=110+ISPIN
       LISTW=10+ISPIN + ISHIFT 
       FACT=ONEM
C
C LOOP OVER IRREPS OF EF BLOCK (THE SAME IRREPS AS THE IN AND MN BLOCKS 
C HAVE
C
       DO 100 IRREP=1,NIRREP
C
C DETERMINE LENGTH OF EXPANDED OCCUPIED-OCCUPIED BLOCK
C
        NOCC2SQ=0 
        DO 110 IRREPJ=1,NIRREP
         NOCC2SQ=NOCC2SQ+POP(IRREPJ,ISPIN)
     &                    *POP(DIRPRD(IRREPJ,IRREP),ISPIN)
110     CONTINUE 
        DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTW))
        NUMSYT=IRPDPD(IRREP,ISYTYP(2,LISTW))  
        I001=1
        I002=I001+IINTFP*NOCC2SQ*DISSYT
        I003=I002+IINTFP*NOCC2SQ*DISSYT
        IF(MIN(NUMSYT,DISSYT).NE.0) THEN
         IF(I003.LT.MXCOR) THEN
C  
C         IN CORE VERSION
C
C  NOTE IO2AA IS EQUAL TO IO1AA, SO NO NEW ROUTINE HAS BEEN
C  WRIITEN
C
          CALL IO1AA(ICORE(I001),ICORE(I002),AIOO(IOFF),FACT,ISPIN,
     &               POP(1,ISPIN),VRT(1,ISPIN),DISSYT,NUMSYT,LISTG,
     &               LISTW,IRREP,2)
         ELSE
          CALL INSMEM('IO2AA',I003,MXCOR)
         ENDIF
        ELSE
        ENDIF 
100    CONTINUE
       ENDIF
C
C       AB SPIN CASE
C
       LISTW=13 + ISHIFT 
       LISTG=113
       FACT=ONEM
C
C      LOOP OVER IRREPS.
C
       DO 200 IRREP=1,NIRREP
C
        DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTW))
        NUMSYT=IRPDPD(IRREP,ISYTYP(2,LISTW))
        I001=1
        I002=I001+IINTFP*NUMSYT*DISSYT
        I003=I002+IINTFP*NUMSYT*DISSYT
        IF(MIN(NUMSYT,DISSYT).NE.0) THEN
         I004=I003+3*IINTFP*MAX(NUMSYT,DISSYT)
         IF(I004.LT.MXCOR) THEN
C
C         IN CORE VERSION
C
C  NOTE IO2AB IS EQUAL TO IO1AB, SO NO NEW ROUTINE HAS BEEN
C  WRIITEN
C
          CALL IO1AB(ICORE(I001),ICORE(I002),AIOO(IOFF),
     &               FACT,ISPIN,POP(1,ISPIN),POP(1,3-ISPIN),
     &               VRT(1,ISPIN),VRT(1,3-ISPIN),DISSYT,NUMSYT,
     &               LISTG,LISTW,IRREP,ICORE(I003),IUHF,2)
         ELSE
          CALL INSMEM('IO2AB',I004,MXCOR)
         ENDIF
        ELSE
C
C
        ENDIF
200   CONTINUE
1000  CONTINUE
CSSS      Call checksum("AIOO",Aioo,Nf1aa)
C
      RETURN

      END
