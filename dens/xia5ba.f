      SUBROUTINE XIA5BA(G,W,XIA,FACT,ISPIN,POP1,POP2,VRT1,VRT2,
     &                  DISSYT,NUMSYT,DISSYW,NUMSYW,LISTG,LISTW,
     &                  IRREP,TMP,IUHF)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER DISSYT,DISSYW,DIRPRD,POP1,POP2,VRT1,VRT2
      DIMENSION G(DISSYT,NUMSYT),W(NUMSYW,DISSYW),XIA(1000),
     &          POP1(8),POP2(8),VRT1(8),VRT2(8),TMP(1)
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255,2),DIRPRD(8,8)
      common /dropgeo/ ndrgeo
C
      DATA ONE,ONEM /1.D0,-1.D0/
C
C ISPIN=1   THE INTEGRALS ARE <Ae//Fn> ORDERING (Ae,Fn)
C            THE REQUIRED ORDERING IS Fn eA
C            THEREFORE TRANSPOSE Ae AND Fn and
C            FINALLY e AND A
C ISPIN=2   THE INTEGRALS ARE <Ea//Nf> ORDERING (Ea,Nf)
C            THE REQUIRED ORDERING IS fN,Ea
C            TRANSPOSE N AND f
C            TRANSPOSE Nf AND Ea
C
C RHF
C
      if (ndrgeo.eq.0) then
        CALL GETLST(G,1,NUMSYT,1,IRREP,LISTG)
CSSS        Print*, Listg
CSSS        call output(G,1,dissyt,1,numsyt,dissyt,numsyt,1)
      else    
        CALL GETGO3Q(G,W,1,NUMSYT,1,IRREP,LISTG,ispin,listg,dissyt,2)
      endif 
C
C SPIN ADAPT FOR RHF
C
      IF(IUHF.EQ.0) THEN
       if (ndrgeo.eq.0) then
         CALL GETLST(W,1,NUMSYT,1,IRREP,123)
       else  
         CALL GETGO3(W,TMP,1,NUMSYT,1,IRREP,123,ispin,123,dissyt)
       endif 
       CALL SAXPY(NUMSYT*DISSYT,ONEM,W,1,G,1)
      ENDIF
CSSS      Print*, "118-123"
CSSS      call output(G,1,dissyt,1,numsyt,dissyt,numsyt,1)
C
C PICK UP THE INTEGRALS REQUIRED
C
      CALL GETTRN(W,TMP,DISSYW,NUMSYW,2,IRREP,LISTW)
CSSS      Print*, listw
CSSS      call output(W,1,numsyw,1,dissyw,numsyw,dissyw,1)
C
C REORDER INTEGRALS
C
      IF(ISPIN.EQ.2) THEN
       CALL SYMTR3(IRREP,POP2,VRT1,NUMSYW,DISSYW,W,TMP,
     &             TMP(1+DISSYW),TMP(1+2*DISSYW))
      ENDIF
C
      IF(ISPIN.EQ.1) THEN
       CALL SYMTR1(IRREP,VRT1,VRT2,NUMSYW,W,TMP,TMP(1+NUMSYW),
     &             TMP(1+2*NUMSYW))
      ENDIF
C
C NOW ALL ARRAYS HAVE BEEN SET UP FOR THE MULTIPLICATION
C
C PERFORM MULTIPLICATION 
C
C JOFFG OFFSET IN THE OCCUPIED-VIRTUAL BLOCK OF G 
C JOFFW OFFSET IN THE VIRTUAL-VIRTUAL BLOCK OF W
C IOFF OFFSET IN IOV
C
      IOFF=1
      JOFFG=1
      JOFFW=1
C
      DO 90 IRREPJ=1,NIRREP
C          
C GET NUMBER OF VIRTUAL ORBITALS FOR IRREPJ     
C
       NOCCJ=POP1(IRREPJ)
       NVRTJ=VRT1(IRREPJ)
C
C DETERMINE IRREPI WHOSE DIRECT PRODUCT WITH IRREPJ GIVES IRREP
C
       IRREPI=DIRPRD(IRREP,IRREPJ)
C
C GET NUMBER  OF VIRTUAL ORBITALS FOR IRREPI
C
       NVRTI=VRT2(IRREPI)
C
C IF NVRTI, NOCCJ, OR NVRTJ EQUAL ZERO, NOTHING TO COMPUTE
C
       IF(MIN(NVRTI,NVRTJ,NOCCJ).NE.0) THEN
C
          CALL XGEMM('T','N',NVRTJ,NOCCJ,NVRTI*DISSYT,FACT,
     &             W(1,JOFFW),NVRTI*DISSYT,G(1,JOFFG),
     &             NVRTI*DISSYT,ONE,XIA(IOFF),NVRTJ)
       ENDIF
C
C UPDATE OFFSETS
C
       JOFFG=JOFFG+NVRTI*NOCCJ
       JOFFW=JOFFW+NVRTI*NVRTJ
       IOFF=IOFF+NVRTJ*NOCCJ
90    CONTINUE
C
      RETURN
      END
