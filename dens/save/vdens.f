      PROGRAM VDENS
C
C VECTORIZED CC/MBPT PROGRAM FOR CALCULATING ONE- AND TWO-PARTICLE
C DENSITY MATRICES.
C
C THIS PROGRAM CALCULATES THE RELAXED DENSITY MATRIX FOR MBPT AND
C CC THEORY AS WELL COMPUTES THE QUANTITIES I(IA),I(IJ), AND I(AB)
C REQUIRED FOR GRADIENT CALCULATION
C IN ADDITION THE INTERMEDIATES GAMMA WERE FORMED AND STORED, THEY
C ARE USED TO CALCULATE THE TWO-ELECTRON-INTEGRAL DERIVATIVE              
C CONTRIBUTION TO THE GRADIENT
C THIS PROGRAM IS EFFICIENTLY VECTORIZED (BY WRITING ALL TERMS
C AS MATRIX PRODUCTS) AND USES EXPLICITELY SYMMETRY.
C 
C FOR NOTATION SEE :
C
C  J. GAUSS, J.F. STANTON, R.J. BARTLETT, J.C.P. 95 (1991) 2623
C
C AND ALSO :
C
C  E.A. SALTER, PH.D. THESIS, U.F. 1988
C  E.A. SALTER, G.W. TRUCKS, R.J. BARTLETT, J.C.P. 90 (1989) 1752
C
C THE IMPLEMENTATION IS MAINLY BASED ON THE THESIS OF SALTER AND 
C A RECENT FORMALISM DEVELOPED INDEPENDENTLY BY J. GAUSS IN COLOGNE
C (J. GAUSS AND D. CREMER, ADV. QUANT. CHEM. 23 (1992) 205). WITH
C RESPECT TO THE FORMALISM OF SALTER, THERE ARE SOME SUBTLE MODI-
C FICATION, MAINLY THE QUADRUPLE TERMS HAVE BEEN REFORMULATED AS
C FIRST SUGGESTED BY :
C
C  J. GAUSS AND D. CREMER ( CHEM. PHYS. LETT. 138 (1987) 131)
C
C THE DIFFERENCE TO THE ORIGINAL IMPLEMENTATION EITHER OF MBPT
C AS WELL AS OF CC GRADIENTS IS THAT THIS PROGRAM USES EXPLICITELY
C SYMMETRY AND IS VECTORIZED. ACTUALLY, THIS SHOULD BE THE MOST
C EFFICIENT IMPLEMENTATION WHICH CAN BE ACHIEVED ON MODERN SUPER
C COMPUTER.
C
C THIS PROGRAM HANDLES RHF, UHF, ROHF, AND QRHF REFERENCE FUNCTION.
C
C FOR ROHF REFERENCE FUNCTIONS SEE:
C
C  J. GAUSS, W.J. LAUDERDALE, J.F. STANTON, J.D. WATTS,
C  AND R.J. BARTLETT, C.P.L. 182 (1991) 207
C
C THE SOLUTION OF THE ROHF-CPHF Z-VECTOR EQUATIONS IN A 
C SEMICANONICAL REPRESENTATION HAS BEEN IMPLEMENTED AS AN
C ADDITIONAL OPTION:
C
C  W.J. LAUDERDALE, J.F. STANTON, J. GAUSS, J.D. WATTS,
C  R.J. BARTLETT, J.C.P. 97 (1992) 6606
C
C FOR ROHF-MBPT(3), SEE J. GAUSS, UNPUBLISHED NOTES.
C FOR QRHF REFERENCE FUNCTIONS SEE:
C
C  J. GAUSS, J.F. STANTON, AND R.J. BARTLETT, J.C.P. 95 (1991) 2639
C
C SOME FURTHER EXTENSIONS ARE DUE TO J.F. STANTON (UNPUBLISHED).
C
C FOR AN EFFICIENT TREATMENT OF TRIPLE SUBSTITUTIONS WE
C INCLUDED CANONICAL PERTURBED ORBITALS FOLLOWING A 
C SUGGESTION BY T.J. LEE AND A.P. RENDELL (J.CHEM.PHYS. 
C 94, 6229(1991).
C HOWEVER, REGARDING ALL OTHER ASPECTS TRIPLE EXCITATIONS 
C ARE TREATED AS FIRST SUGGESTED AND IMPLEMENTED BY GAUSS
C AND CREMER (C.P.L. 153 (1988) 303) AND INDEPENDENTLY BY 
C BARTLETT'S GROUP (C.P.L. ... (1988) ...). 
C APPROPRIATE REFERENCES FOR TRIPLES IN ACES II ARE:
C
C  J.D. WATTS, J. GAUSS, AND R.J. BARTLETT C.P.L. 200 (1992) 1
C  J.D. WATTS, J. GAUSS, AND R.J. BARTLETT J.C.P., 98 (1993) 8718
C
C GRADIENTS ARE ALSO AVAILABLE FOR UNITARY CC METHODS (P.SZALAY,
C UNPUBLISHED).
C
C DENSITIES FOR EXCITED STATE APPROACHES ARE OFFERED FOR CIS
C (TDA) IN FORM OF CIS-GRADIENTS AS WELL FOR EOM-CC APPROACHES
C 
C  J.F. STANTON, J.C.P. 99 (1993) XXXX
C  J.F. STANTON AND J. GAUSS J.C.P. 100 (1994) XXXX
C  J.F. STANTON AND J. GAUSS, TO BE PUBLISHED.
C 
C VARIOUS APPROACHES HAVE BEEN INCLUDED TO REDUCE DISK SPACE REQUIREMENTS.
C TOWARDS THE IMPLEMENTATION OF `DIRECT CC GRADIENTS' AS A FIRST STEP
C AO-BASED ALGORITHMS HAVE BEEN IMPLEMENTED (DEC. 93 -- FEBR. 94,
C J. GAUSS AND J.F. STANTON, UNPUBLISHED)
C
C TD-CC EXTENSION ADDED BY P.G. SZALAY (ROUTINES WITH 'OS')
C
C THIS PROGRAM HAS BEEN DEVELOPED AT THE QUANTUM THEORY PROJECT
C IN 1990-1992 BY J.F. STANTON AND J. GAUSS. EXTENSIONS HAVE BEEN
C MADE IN KARLSRUHE AS WELL IN AUSTIN.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER POP,VRT,DIRPRD
CJDW KKB stuff
      INTEGER POP2,VRT2
CJDW END
      INTEGER POPRHF,POPDOC,VRTRHF,VRTDOC
      LOGICAL CIS,HFM3,EOM
      LOGICAL GABCD
      LOGICAL MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC
      LOGICAL DENS,GRAD,QRHF,NONHF,ROHF,SEMI,CANON,TRIP1,TRIP2
C SG 11/20/97
      LOGICAL MRCC, SEWARD
C
      COMMON//ICORE(1)
      COMMON/EXCITE/CIS,EOM
      COMMON/ADD/SUM
      COMMON/INFO/NOCCO(2), NVRTO(2)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/SYMLOC/ISYMOFF(8,8,25)
      COMMON/FLAGS/ IFLAGS(100)
      COMMON/FLAGS2/ IFLAGS2(500)
      COMMON/METH/ MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC
      COMMON/QRHFINF/POPRHF(8),VRTRHF(8),NOSH1(8),NOSH2(8),
c&two line mod
     &               POPDOC(8),VRTDOC(8),NAI,N1I,NA2,
     &               NUMISCF,NUMASCF,ISPINP,ISPINM,IQRHF
      COMMON/DERIV/DENS,GRAD,QRHF,NONHF,ROHF,SEMI,CANON,TRIP1,
     &              TRIP2,GABCD
      COMMON/SYMINF/NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON/IOPOS/ICRSIZ,ICHCSZ,IOFF(2),LENREC
      COMMON/ISTART/IO
CJDW KKB stuff
      COMMON /SHIFT/   ISHIFT
      COMMON /SYMDROP/ NDRPOP(8),NDRVRT(8)
      COMMON /DROPGEO/ NDRGEO
      COMMON /SYM/     POP(8,2),VRT(8,2),MTAA,MTBB,MD1AA,MD1BB,
     &                                             MD2AA,MD2BB
      COMMON /SYM2/    POP2(8,2),VRT2(8,2),NTAA,NTBB,ND1AA,ND1BB,
     &                                               ND2AA,ND2BB
      COMMON /SYMPOP/  IRP_DM(8,22),ISYTYP(2,500),ID(18)
      COMMON /SYMPOP2/ IRPDPD(8,22)
C
corig COMMON/SYM/POP(8,2),VRT(8,2),NTAA,NTBB,ND1AA,ND1BB,ND2AA,ND2BB
corig COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),ID(18)
C
C     At the beginning of a dropped core run, /SYM/, /SYMPOP/ will have
C     dropped core dimensions. /SYM2/ and /SYMPOP2/ are set in RECALAT.
C     When xdens is entered in dropped core runs, JOBARC will be JOBARC_DM.
C     Lists 1-200 or 1-290 will have dropped core dimensions. Allocation
C     of D, I, X is done in terms of NTAA, NTBB, etc, i.e. full MO space
C     dimensions.
CJDW END
C
      DATA HALF,ONE /0.5D0,1.0D0/
C
      sum=0.
C
      CALL CRAPSI(ICORE,IUHF,0)
      MAXCOR=ICRSIZ
      MAXCOR=100000
C
C FILL COMMON BLOCK /METH/
C
      CALL SETMET(IUHF)
C
C NEW FLAG FOR RHF AND UHF BASED MBPT(3)
C
      HFM3=MBPT3.AND.(.NOT.ROHF)
C
C SG 11/20/97 If a MRCC calculation, the density matrices are already on disk
C
      MRCC = IFLAGS2(132) .EQ. 3
      SEWARD = (IFLAGS(46) .EQ.4)
C
C CALCULATE THE GAMMA INTERMEDIATES FOR THE VARIOUS METHODS
C
C NOTE THAT FOR MBPT(2) NO GAMMA INTERMEDIATES ARE REQUIRED, SO SKIP 
C THE CALL
C
      IF (.NOT.MBPT2 .AND. .NOT.MRCC) THEN
       CALL GAMDRV(ICORE(IO),MAXCOR,IUHF)
      ENDIF
c
cmn      write(6,*) ' situation after gamdrv'
cmn      write(6,*)
      CALL CHECKGAM1(ICORE(io),16,116,TWO,IUHF,2,VRT)
      CALL CHECKGAM1(ICORE(io),133,233,TWO,IUHF,2,VRT)
      call checkgam1(icore(io),13,113,ONE,IUHF,1,POP)
      CALL CHECKGAM(ICORE(io),23,123,TWO)
      CALL CHECKGAM(ICORE(io),25,125,TWO)
      CALL CHECKGAM(ICORE(io),18,118,TWO)
      call checkgam1(icore(io),30,130,two,iuhf,2,vrt)
      call checkgam1(icore(io),10,110,two,iuhf,2,pop)
c
CJDW KKB stuff
      CALL GETREC(20,'JOBARC','NBASTOT ',1,NBAS)
      CALL RECALAT(IUHF,NIRREP,NDROP0,ICORE(IO),
     &             ICORE(IO+NBAS*(IUHF+1)),IINTFP,IFLAGS(77))
CJDW END
C
C ALLOCATE MEMORY FOR THE DENSITY MATRIX AT THE TOP OF ICORE
C
      MXCOR=MAXCOR

c Nevin 10/20/95 added for alignment
c      if(mod(mxcor,2).ne.0)mxcor=mxcor-1
C
C MEMORY FOR THE OCCUPIED-OCCUPIED BLOCK
C
      IDOO=IO+MXCOR-(ND1AA+IUHF*ND1BB)*IINTFP
      MXCOR=MXCOR-(ND1AA+IUHF*ND1BB)*IINTFP
C
C MEMORY FOR THE VIRTUAL-VIRTUAL BLOCK
C
      IDVV=IDOO-(ND2AA+IUHF*ND2BB)*IINTFP
      MXCOR=MXCOR-(ND2AA+IUHF*ND2BB)*IINTFP
C
C MEMORY FOR THE VIRTUAL-OCCUPIED BLOCK
C
      IDOV=IDVV-(NTAA+IUHF*NTBB)*IINTFP
      MXCOR=MXCOR-(NTAA+IUHF*NTBB)*IINTFP
C
C MEMORY FOR THE XOV INTERMEDIATE
C
C FOR NON HF WE HAVE TO ALLOCATE ADDITIONAL MEMORY FOR THE XOV INTERMEDIATE
C FOR HF CASES EQUIVALENCE MEMORY FOR XIA WITH THAT FOR DOV
C
      IF(QRHF.OR.NONHF.OR.ROHF) THEN
       IXOV=IDOV-(MAX(NTAA,NTBB)+IUHF*MAX(NTAA,NTBB))*IINTFP
       MXCOR=MXCOR-(MAX(NTAA,NTBB)+IUHF*MAX(NTAA,NTBB))*IINTFP
       LXOV=(1+IUHF)*MAX(NTAA,NTBB)
      ELSE
       IXOV=IDOV
       LXOV=0
      ENDIF
C
C MEMORY FOR THE IOV INTERMEDIATE
C
      IIOV=IXOV-(NTAA+IUHF*NTBB)*IINTFP
      MXCOR=MXCOR-(NTAA+IUHF*NTBB)*IINTFP
C
C MEMORY FOR THE IVO INTERMEDIATE
C
      IIVO=IIOV-(NTAA+IUHF*NTBB)*IINTFP
      MXCOR=MXCOR-(NTAA+IUHF*NTBB)*IINTFP
C
C MEMORY FOR THE IOO INTERMEDIATE
C
      IIOO=IIVO-(ND1AA+IUHF*ND1BB)*IINTFP
      MXCOR=MXCOR-(ND1AA+IUHF*ND1BB)*IINTFP
C
C MEMORY FOR THE IVV INTERMEDIATE
C
      IIVV=IIOO-(ND2AA+IUHF*ND2BB)*IINTFP
      MXCOR=MXCOR-(ND2AA+IUHF*ND2BB)*IINTFP
C
C SET ITOP SO THAT NON-HF WILL WORK
C
      ITOP=IIVV
C
C ZERO THE ALLOCATED SPACE FOR THE INTERMEDIATES IOO AND IVV
C
      LENGTH=LXOV+3*NTAA+2*ND1AA+2*ND2AA+
     &                IUHF*(3*NTBB+2*ND1BB+2*ND2BB)
C
      CALL IZERO(ICORE(IIVV),LENGTH*IINTFP)
C
      IF (.NOT.CIS .AND. .NOT.EOM .AND. .NOT.MRCC)THEN
C
C COMPUTE THE OCCUPIED-OCCUPIED BLOCK OF D
C      
       CALL DENSOO(ICORE(IDOO),ICORE(IO),MXCOR,IUHF)
       IF(IFLAGS(1).GE.15.AND.NDRGEO.EQ.0)THEN
        write(6,*) ' D intermediates after densoo '
        CALL DUMPIT(ICORE(IDOO),ICORE(IDVV),ICORE(IIVO),ICORE(IIOV),
     &              IUHF)
       ENDIF
C
C COMPUTE THE VIRTUAL-VIRTUAL BLOCK OF D
C      
       CALL DENSVV(ICORE(IDVV),ICORE(IO),MXCOR,IUHF)
       IF(IFLAGS(1).GE.15.AND.NDRGEO.EQ.0)THEN
        write(6,*) ' D intermediates after densvv '
        CALL DUMPIT(ICORE(IDOO),ICORE(IDVV),ICORE(IIVO),ICORE(IIOV),
     &              IUHF)
       ENDIF
C
C FOR NON HF CCSD COMPUTE DIRECT CONTRIBUTION TO THE OCCUPIED
C VIRTUAL BLOCK OF THE D, ROHF IS HERE TREATED AS NON-HF 
C
       IF(QRHF.OR.NONHF.OR.ROHF)THEN
        CALL DENSVO(ICORE(IDOV),ICORE(IO),MXCOR,IUHF)
        IF(IFLAGS(1).GE.15.AND.NDRGEO.EQ.0)THEN
         write(6,*) ' D intermediates after densvo '
         CALL DUMPIT(ICORE(IDOO),ICORE(IDVV),ICORE(IDVO),ICORE(IIOV),
     &               IUHF)
        ENDIF
       ENDIF
C
      ELSE
C
C FOR CIS (TDA), GET DENSITY MATRIX FROM GAMLAM FILE
C THE CONTRIBUTIONS ARE CALCULATED IN VEE
C
       IF(CIS)CALL GETDCIS(ICORE(IDOO),ICORE(IDVV),IUHF)
       IF (EOM .OR. MRCC) THEN
        CALL GETD(ICORE(IDOO),ICORE(IDOO+IINTFP*MD1AA),
     &           ICORE(IDVV),ICORE(IDVV+IINTFP*MD2AA),
     &           ICORE(IDOV),ICORE(IDOV+IINTFP*MTAA),
     &           IUHF,ROHF.OR.QRHF.OR.NONHF)
       ENDIF
C
       IF(IFLAGS(1).GE.15.AND.NDRGEO.EQ.0)THEN
        write(6,*) ' D intermediates after getd '
        CALL DUMPIT(ICORE(IDOO),ICORE(IDVV),ICORE(IDVO),ICORE(IIOV),
     &              IUHF)
       ENDIF
C
      ENDIF
C
C GENERATE FOR ALL METHODS EXCEPT MBPT3 AND MBPT2 HERE THE GAMMA1
C AMPLITUDES. ROHF-MBPT(3) REQUIRES CALL TO GAMMA1.
C
      IF (.NOT.CIS .AND. .NOT.MBPT2 .AND. .NOT.HFM3
     &   .AND. .NOT.MRCC) THEN
       CALL GAMMA1(ICORE(IO),MXCOR,IUHF)
      ENDIF
C 
C FOR NON-HF THERE WILL BE NO GRADIENTS AVAILABLE IN THE FUTURE,
C SKIP EVERYTHIUNG AND WRITE ONLY DENSITY MATRIX TO JOBARC
C
CJDW KKB stuff
c-------------------------------------------------------------------
      ISHIFT = 0 
      ISHIFT2= 0 
      if (ndrgeo.ne.0) then 
       ISHIFT = 300  
       if (iuhf.ne.0) then 
        call dmove (ICORE(IDOO+IINTFP*MD1AA),ICORE(IDOO+IINTFP*ND1AA),
     x               MD1BB)
        call expand(ICORE(IDOO+IINTFP*ND1AA),ICORE(IO),NIRREP,4,2,ND1BB)
        call dmove (ICORE(IDVV+IINTFP*MD2AA),ICORE(IDVV+IINTFP*ND2AA),
     x               MD2BB)
        call expand(ICORE(IDVV+IINTFP*ND2AA),ICORE(IO),NIRREP,1,2,ND2BB)
        call dmove (ICORE(IDOV+IINTFP*MTAA),ICORE(IDOV+IINTFP*NTAA),
     x               MTBB)
        call expand(ICORE(IDOV+IINTFP*NTAA),ICORE(IO),NIRREP,3,2,NTBB) 
       endif
       call expand(ICORE(IDOO),ICORE(IO),NIRREP,4,1,ND1AA) 
       call expand(ICORE(IDVV),ICORE(IO),NIRREP,1,1,ND2AA) 
       call expand(ICORE(IDOV),ICORE(IO),NIRREP,3,1,NTAA) 
       IF(IFLAGS(1).GE.15.AND.NDRGEO.EQ.0)THEN
        write(6,*) ' D intermediates after dmove and expand'
        CALL DUMPIT(ICORE(IDOO),ICORE(IDVV),ICORE(IDVO),ICORE(IIOV),
     &              IUHF)
       ENDIF
      endif 
C
      IF(NDROP0.NE.0)THEN
        CALL PCHANGE(IUHF,NIRREP,1,IFLAGS(77))
      ENDIF
c-------------------------------------------------------------------
CJDW END
C
      IF(NONHF) GO TO 1500
C
C FOR GRADIENT CALCULATION CALCULATE ALSO I(IJ) AND I(AB)
C FOR NONHF METHODS THESE TERMS ARE NEEDED ANYWAY, FOR 
C GRADIENT AND PROPERTY CALCULATIONS
C
      IF(GRAD.OR.QRHF)THEN
C
C LOAD I INTERMEDIATES CALCULATED IN EOM CODE FOR "DIRECT"
C G(ABCD) ALGORITHM
C
      IF(EOM.AND..NOT.GABCD)THEN
       DO 50 ISPIN=1,1+IUHF
        CALL GETLST(ICORE(IIVV+IINTFP*(ISPIN-1)*ND2AA),1,1,1,ISPIN,92)
        CALL GETLST(ICORE(IIOV+IINTFP*(ISPIN-1)*NTAA),1,1,1,ISPIN,93)
50     CONTINUE
      ENDIF
C
C NOTE THE INTERMEDIATES ARE CALCULATED HERE IN ORDER TO
C BE ABLE TO RESORT SOME OF THE GAMMA INTERMEDIATES TO
C A NEW ORDERING AS REQUIRED FOR THE CALCULATION OF IOV
C
C FIRST TERM IS REQUIRED FOR ALL METHODS
C
      IF(IFLAGS(1).GE.15)THEN
       write(6,*) ' i intermediates before INTO1 '
       CALL DUMPIT(ICORE(IIOO),ICORE(IIVV),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
      ENDIF
      IF(.NOT.CIS)CALL INTO1(ICORE(IIOO),ICORE(IO),MXCOR,IUHF)
      IF(IFLAGS(1).GE.15)THEN
       write(6,*) ' i intermediates after  INTO1 '
       CALL DUMPIT(ICORE(IIOO),ICORE(IIVV),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
      ENDIF
C
C SECOND AND THIRD TERM ARE REQUIRED FOR MBPT3 AND CCD
C WHILE ALL OTHER METHODS REQUIRE ALL TERMS
C
      IF(.NOT.MBPT2)THEN
       IF(.NOT.CIS)CALL INTO2(ICORE(IIOO),ICORE(IO),MXCOR,IUHF)
      IF(IFLAGS(1).GE.15)THEN
       write(6,*) ' i intermediates after  INTO2 '
       CALL DUMPIT(ICORE(IIOO),ICORE(IIVV),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
      ENDIF
       CALL INTO3(ICORE(IIOO),ICORE(IO),MXCOR,IUHF)
      IF(IFLAGS(1).GE.15)THEN
       write(6,*) ' i intermediates after  INTO3 '
       CALL DUMPIT(ICORE(IIOO),ICORE(IIVV),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
      ENDIF
       IF(.NOT.CIS.AND..NOT.HFM3.AND..NOT.CCD) THEN
        IF(IFLAGS(93).NE.2.or.(iuhf.ne.0)) THEN
C
C IF, THE <AB||CD> CONTRIBUTION TO XIA IS CALCULATED
C WITH AO INTEGRALS, SKIP INTO4. THIS CONTRIBUTION
C IS THEN A BY-PRODUCT IN XINT6AO
C
         CALL INTO4(ICORE(IIOO),ICORE(IO),MXCOR,IUHF)
      IF(IFLAGS(1).GE.15)THEN
       write(6,*) ' i intermediates after  INTO4 '
       CALL DUMPIT(ICORE(IIOO),ICORE(IIVV),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
      ENDIF
        ENDIF
        CALL INTO5(ICORE(IIOO),ICORE(IO),MXCOR,IUHF)
      IF(IFLAGS(1).GE.15)THEN
       write(6,*) ' i intermediates after  INTO5 '
       CALL DUMPIT(ICORE(IIOO),ICORE(IIVV),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
      ENDIF
        CALL INTO6(ICORE(IIOO),ICORE(IO),MXCOR,IUHF)
      IF(IFLAGS(1).GE.15)THEN
       write(6,*) ' i intermediates after  INTO6 '
       CALL DUMPIT(ICORE(IIOO),ICORE(IIVV),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
      ENDIF
       ENDIF
      ENDIF
C
C IN THE CASE OF CANONICAL PERTURBED ORBITALS, SKIP
C THE CALL TO DXAINI (IT IS CALLED AFTER X(I,J) HAS
C BEEN FORMED AND THE FULL BLOCKS OF D(I,J) AND D(A,B)
C ARE AVAILABLE.
C
      IF(.NOT.CANON) THEN
       CALL DXAINI(ICORE(IDOO),ICORE(IDOV),ICORE(IDVV),
     &             ICORE(IIOO),ICORE(IO),MXCOR,IUHF)
      ENDIF
C
C FIRST TERM REQUIRED FOR ALL METHODS
C
      IF(.NOT.CIS)CALL INTV1(ICORE(IIVV),ICORE(IO),MXCOR,IUHF)
C
C SECOND AND THIRD TERM ARE REQUIRED FOR MBPT3 AND CCD
C WHILE ALL OTHER METHODS REQUIRE ALL TERMS
C
      IF(.NOT.MBPT2)THEN
       IF(.NOT.CIS) THEN
C
C CHOOSE BETWEEN THE VARIOUS ALGORITHMS FOR THE INTV2 TERM
C
        IF(GABCD) THEN
         CALL INTV2(ICORE(IIVV),ICORE(IO),MXCOR,IUHF)
        ELSE
          CALL ERREX
        ENDIF
       ENDIF
C
       CALL INTV3(ICORE(IIVV),ICORE(IO),MXCOR,IUHF)
       IF(.NOT.CIS.AND..NOT.HFM3.AND..NOT.CCD) THEN
        CALL INTV4(ICORE(IIVV),ICORE(IO),MXCOR,IUHF)
        CALL INTV5(ICORE(IIVV),ICORE(IO),MXCOR,IUHF)
        CALL INTV6(ICORE(IIVV),ICORE(IO),MXCOR,IUHF)
       ENDIF
      ENDIF
      ENDIF
C
C GO ON WITH DENSITY STUFF
C
C COMPUTE THE INTERMEDIATE I(IA)
C
      IF(.NOT.CIS)CALL INTOV1(ICORE(IIOV),ICORE(IO),MXCOR,IUHF)
C
C FOR MBPT(3) AND CCD IN ADDITION THE SECOND AND THIRD
C TERM ARE REQUIRED, FOR ALL OTHER METHODS ALL TERMS ARE REQUIRED
C
      IF(.NOT.MBPT2)THEN
C
C RESORT FIRST THE G(IA,JB) AMPLITUDES
C
       CALL SORTGAM(ICORE(IO),MXCOR,IUHF)
CJDW KKB stuff
C
C     Note that this is always called. The value of 2 means that /SYM/ is
C     copied to /SYM2/.
C
      CALL PCHANGE(IUHF,NIRREP,2,IFLAGS(77))
CJDW END
       IF(.NOT.CIS) THEN
        IF(GABCD) THEN
         CALL INTOV2(ICORE(IIOV),ICORE(IO),MXCOR,IUHF)
        ELSE
         CALL ERREX
        ENDIF
       ENDIF
       CALL INTOV3(ICORE(IIOV),ICORE(IO),MXCOR,IUHF)
       IF(.NOT.CIS.AND..NOT.HFM3.AND..NOT.CCD) THEN
        CALL INTOV4(ICORE(IIOV),ICORE(IO),MXCOR,IUHF)
        Write(6,*) "I am going to intov5"
        CALL INTOV5(ICORE(IIOV),ICORE(IO),MXCOR,IUHF)
        CALL INTOV6(ICORE(IIOV),ICORE(IO),MXCOR,IUHF)
       ENDIF
      ENDIF
C
C COMPUTE THE INTERMEDIATE X(IA)
C
C NOTE THE FIRST AND SECOND CONTRIBUTION ARE FOR ALL METHODS IDENTICAL
C
      IF(.NOT.CANON) THEN
       CALL XINT1(ICORE(IIVO),ICORE(IDOO),ICORE(IO),MXCOR,IUHF)
       CALL XINT2(ICORE(IIVO),ICORE(IDVV),ICORE(IO),MXCOR,IUHF)
      ENDIF
      IF(QRHF.OR.ROHF) THEN
       CALL XINT9(ICORE(IIVO),ICORE(IDOV),ICORE(IO),MXCOR,IUHF)
      ENDIF
C
C  FOR MBPT(3) AND CCD IN ADDITION THE FOURTH AND FIFTH
C  TERM ARE REQUIRED, FOR ALL OTHER METHODS ALL TERMS ARE REQUIRED
C
      IF(.NOT.MBPT2)THEN
       IF(.NOT.CIS)CALL XINT4(ICORE(IIVO),ICORE(IO),MXCOR,IUHF)
       CALL XINT5(ICORE(IIVO),ICORE(IO),MXCOR,IUHF)
       IF(.NOT.CIS.AND..NOT.HFM3.AND..NOT.CCD) THEN
C
C CHOOSE BETWEEN THE TWO POSSIBLE ALGORITHM FOR THE XINT6 CONTRIBUTION
C (I.E., AO OR MO BASED)
C
        IF(IFLAGS(93).EQ.2.and.(iuhf.eq.0)) THEN
         CALL ERREX
        ELSE 
         CALL XINT6(ICORE(IIVO),ICORE(IO),MXCOR,IUHF)
        ENDIF
C
        CALL XINT7(ICORE(IIVO),ICORE(IO),MXCOR,IUHF)
        CALL XINT8(ICORE(IIVO),ICORE(IO),MXCOR,IUHF)
       ENDIF
      ENDIF
C
C THE THIRD CONTRIBUTION IS REQUIRED FOR ALL METHODS (EXCEPT CIS)
C
      IF(.NOT.CIS)CALL XINT3(ICORE(IIVO),ICORE(IO),MXCOR,IUHF)
C
C ADD FINALLY THE F(P,R)*D(Q,R) CONTRIBUTION TO THE
C INTERMEDIATES
C
      CALL DFINI(ICORE(IDOO),ICORE(IDVV),ICORE(IDOV),ICORE(IIOO),
     &           ICORE(IIVV),ICORE(IIOV),ICORE(IIVO),ICORE(IO),
     &           MXCOR,IUHF)
C
      IF(IFLAGS(1).GE.15)THEN
       write(6,*) ' i intermediates after DFINI '
       CALL DUMPIT(ICORE(IIOO),ICORE(IIVV),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
      ENDIF
      IF(IFLAGS(1).GE.10)THEN
       write(6,*) ' D matrices '
       CALL DUMPIT(ICORE(IDOO),ICORE(IDVV),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
      ENDIF
C
C IN THE CASE OF CANONICAL PERTURBED ORBITALS, FORM HERE
C X(IJ) AND X(AB) AS WELL AS THE FINAL I(IJ) AND I(AB).
C SOLVE FOR D(IJ) AND D(AB) AND AUGMENT X(AI)
C
      IF(CANON) THEN
C
       IEVAL=IO
       IXOO=IEVAL+IINTFP*(NOCCO(1)+NVRTO(1))
C
C
      IF(IFLAGS(1).GE.15)THEN
       CALL DUMPIT(ICORE(IIOO),ICORE(IDVV),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
       CALL DUMPIT(ICORE(IDOO),ICORE(IDVV),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
       CALL DUMPIT(ICORE(IXOO),ICORE(IEVAL),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
      ENDIF
       CALL FORMXIJ(ICORE(IIOO),ICORE(IDOO),
     &              ICORE(IXOO),ICORE(IEVAL),IUHF,QRHF)
      IF(IFLAGS(1).GE.15)THEN
       CALL DUMPIT(ICORE(IIOO),ICORE(IDVV),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
       CALL DUMPIT(ICORE(IDOO),ICORE(IDVV),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
       CALL DUMPIT(ICORE(IXOO),ICORE(IEVAL),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
      ENDIF
C
       IF(ROHF) THEN
        IFAI=IXOO+IINTFP*(ND1AA+ND1BB)
        CALL ADDIA1(ICORE(IXOO),ICORE(IIVO),ICORE(IFAI))
       ENDIF
C
       IXVV=IXOO
C
       CALL FORMXAB(ICORE(IIVV),ICORE(IDVV),
     &              ICORE(IXVV),ICORE(IEVAL),IUHF,QRHF)
C
       IF(ROHF) THEN
        IFAI=IXVV+IINTFP*(ND2AA+ND2BB)
        CALL ADDIA2(ICORE(IXVV),ICORE(IIOV),ICORE(IFAI))
       ENDIF
C
       CALL XINT1(ICORE(IIVO),ICORE(IDOO),ICORE(IO),MXCOR,IUHF)
       CALL XINT2(ICORE(IIVO),ICORE(IDVV),ICORE(IO),MXCOR,IUHF)
C
C  ADD THE CONTRIBUTION DUE TO DOO AND DVV TO IOO
C
       CALL DXAINI(ICORE(IDOO),ICORE(IDOV),ICORE(IDVV), 
     &             ICORE(IIOO),ICORE(IO),MXCOR,IUHF)
C
      ENDIF
C
      IF(IFLAGS(1).GE.10)THEN
       CALL DUMPIT(ICORE(IIOO),ICORE(IIVV),ICORE(IIVO),ICORE(IIOV),
     &             IUHF)
      ENDIF
C
C FORM X(A,I) REQUIRED FOR SOLVING THE Z-VECTOR EQUATIONS
C
      IF(QRHF) THEN
C
C FOR NON-HF WAVE FUNCTION THIS IS A LITTLE BIT COMPLICATED
C NONHFX EXTRACTS THE RELEVANT TERMS FOR QRHF-CCSD CALCULATIONS
C
C ALLOCATE FIRST ADDITIONAL MEMORY FOR THE X1A AND X1B ARRAYS
C
C
       IX1=IIVV-2*IINTFP*N1I
       MXCOR=MXCOR-IINTFP*2*N1I
       IX2=IX1-2*IINTFP*NA2
       MXCOR=MXCOR-IINTFP*2*NA2
       ITOP=IX2
       CALL IZERO(ICORE(IX1),2*IINTFP*N1I)
       CALL IZERO(ICORE(IX2),2*IINTFP*NA2)
C
       CALL QRHFX(ICORE(IIOO),ICORE(IIVV),ICORE(IIOV),ICORE(IIVO),
     &            ICORE(IIOO+IINTFP*ND1AA),ICORE(IIVV+IINTFP*ND2AA),
     &            ICORE(IIOV+IINTFP*NTAA),ICORE(IIVO+IINTFP*NTAA),
     &            ICORE(IXOV),ICORE(IXOV+IINTFP*NAI),ICORE(IX1),
     &            ICORE(IX1+IINTFP*N1I),ICORE(IX2),
     &            ICORE(IX2+IINTFP*NA2),ICORE(IO))
C
C  FORM HERE NOW THE Z1I (OR ZA1) CONTRIBUTION TO THE DENSITY
C  AND CALCULATE XAI(TWIDDLE)
C
       IEV=ITOP-IINTFP*(NOCCO(1)+NVRTO(1))
       CALL QRHFZ(ICORE(IXOV),ICORE(IXOV+IINTFP*NAI),ICORE(IX1),
     &            ICORE(IX1+IINTFP*N1I),ICORE(IX2),
     &            ICORE(IX2+IINTFP*NA2),ICORE(IEV),ICORE(IO),
     &            MXCOR,IUHF)
C
      ELSE
c YAU : old
c      CALL ICOPY(IINTFP*(NTAA+IUHF*NTBB),ICORE(IIVO),1,ICORE(IXOV),1)
c YAU : new
       CALL DCOPY((NTAA+IUHF*NTBB),ICORE(IIVO),1,ICORE(IXOV),1)
c YAU : end
       CALL SAXPY((NTAA+IUHF*NTBB),ONE,ICORE(IIOV),1,ICORE(IXOV),1)
       ITOP=IIVV
      ENDIF
C
C  SOLVE THE Z-VECTOR EQUATION WITHIN CPHF THEORY
C
      CALL MAKDIA1(ICORE(IXOV),ICORE(IO),MXCOR,IUHF)
C
C  FOR HF CASES MAKDIA1 RETURNS THE OCCUPIED-VIRTUAL BLOCK OF THE
C  DENSITY MATRIX AT ADDRESS  IDOV (=IXOV), FOR NON-HF CASES 
C  IDOV NE IXOV
C
C  FORM NOW FINAL INTERMEDIATES AND SAVE QUANTITIES
C
      IF(QRHF) THEN
C
C  FOR NON-HF CASES THE INDIRECT CONTRIBUTION (ICORE(IXOV)) 
C  HAS TO BE TREATED SEPARATELY FROM THE DIRECT CONTRIBUTION
C  SINCE FOR GRADIENT RUNS THEY HAVE TO CONTRACTED WITH
C  DIFFERENT FOCK MATRIX DERIVATIVES
C
C  FORM FULL UNPACKED NON-DIRECT PART OF THE MO DENSITY MATRIX
C  AND WRITE IT TO DISK
C
       MXCOR1=MXCOR
       NBAS=NOCCO(1)+NVRTO(1)
       IDFULL=ITOP-2*NBAS*NBAS*IINTFP
       MXCOR=MXCOR-2*NBAS*NBAS*IINTFP
       IDROO=IDFULL-(ND1AA+ND1BB)*IINTFP
       IDRVV=IDROO-(ND2AA+ND2BB)*IINTFP
       IDROV=IDRVV-(NTAA+NTBB)*IINTFP
       CALL IZERO(ICORE(IDROV),IINTFP*(ND1AA+ND1BB+ND2AA
     &            +ND2BB+NTAA+NTBB))
       MXCOR=MXCOR-(ND1AA+ND1BB+ND2AA+ND2BB+NTAA+NTBB)*IINTFP
C
C  DISTRIBUTE NOW THE XOV AND X1 ELEMENTS CALCULATED AMONG THE 
C  VARIOUS BLOCKS OF THE DENSITY MATRIX
C
C  THIS IS HOWEVER A BOTHER !
C
       CALL QRHFD(ICORE(IXOV),ICORE(IXOV+IINTFP*NAI),ICORE(IX1),
     &            ICORE(IX1+IINTFP*N1I),ICORE(IX2),
     &            ICORE(IX2+IINTFP*NA2),ICORE(IDROO),
     &            ICORE(IDROO+IINTFP*ND1AA),ICORE(IDRVV),
     &            ICORE(IDRVV+IINTFP*ND2AA),ICORE(IDROV),
     &            ICORE(IDROV+IINTFP*NTAA),ICORE(IO))
       CALL FRMFUL(ICORE(IDROO),ICORE(IDRVV),ICORE(IDROV),ICORE(IDFULL),
     &             ICORE(IO),MXCOR,NBAS,IUHF,'REL')
C
C  TO CALCULATE THE REMAINING CONTRIBUTION TO I(P,Q), IT
C  IS HERE ADVANTAGEOUS TO CONSTRUCT THE SPIN-SYMMETRIZED DENSITY
C  MATRIX.  THE ADDRESSES BELOW REFER TO THIS QUANTITY, WHICH IS 
C  COMPUTED WITHIN QRHFI.  
C  
       IDSOO=IDROV-IINTFP*(ND1AA+ND1BB)
       IDSVV=IDSOO-IINTFP*(ND2AA+ND2BB)
       IDSOV=IDSVV-IINTFP*(NTAA+NTBB)
       MXCOR=MXCOR-IINTFP*(ND1AA+ND1BB+ND2AA+ND2BB+NTAA+NTBB)
C
       CALL QRHFI (ICORE(IIOO),ICORE(IIVV),ICORE(IIOV),
     &             ICORE(IDROO),ICORE(IDRVV),ICORE(IDROV),
     &             ICORE(IIOO+IINTFP*ND1AA),ICORE(IIVV+IINTFP*ND2AA),
     &             ICORE(IIOV+IINTFP*NTAA),ICORE(IDROO+IINTFP*ND1AA),
     &             ICORE(IDRVV+IINTFP*ND2AA),ICORE(IDROV+IINTFP*NTAA),
     &             ICORE(IDSOO),ICORE(IDSVV),ICORE(IDSOV),      
     &             ICORE(IDSOO+IINTFP*ND1AA),ICORE(IDSVV+IINTFP*ND2AA),
     &             ICORE(IDSOV+IINTFP*NTAA),
     &             ICORE(IO),ICORE(IO),MXCOR,
c&new line
     &             ICORE(IIVO),ICORE(IIVO+IINTFP*NTAA))
C
C RESET CORE MEMORY
C
       MXCOR=MXCOR1
C
      ELSE
C
C  NOTE, THAT DAINI TAKES CARE OF ALL THE ROHF STUFF
C
       CALL DAIINI(ICORE(IXOV),ICORE(IIOO),ICORE(IIOV),ICORE(IO),
     &             MXCOR,IUHF)
C
C FOR ROHF, ADD DIRECT AND IN-DIRECT CONTRIBUTIONS
C
       IF(ROHF) THEN
        CALL SAXPY(NTAA+NTBB,ONE,ICORE(IXOV),1,ICORE(IDOV),1)
       ENDIF
C
      ENDIF
C
C  FORM FULL UNPACKED MO-DENSITY AND WRITE IT TO DISK
C
C PRESERVE MXCOR SINCE THIS MXCOR FOR ALL LATER STEPS
C
C  REENTRY POINT FOR NONHF
C
1500  CONTINUE
C
      MXCOR1=MXCOR
      NBAS=NOCCO(1)+NVRTO(1)
      IDFULL=ITOP-(1+IUHF)*NBAS*NBAS*IINTFP
      MXCOR=MXCOR-(1+IUHF)*NBAS*NBAS*IINTFP
      CALL FRMFUL(ICORE(IDOO),ICORE(IDVV),ICORE(IDOV),
     &            ICORE(IDFULL),ICORE(IO),MXCOR,NBAS,IUHF,'DEN')
C
C  FORM FULL UNPACKED INTERMDIATES AND WRITE IT TO DISK
C
C PRESERVE MXCOR SINCE THIS MXCOR FOR ALL LATER STEPS
C
      IF(GRAD.AND.(.NOT.NONHF)) THEN
      MXCOR=MXCOR1
      NBAS=NOCCO(1)+NVRTO(1)
      IIFULL=ITOP-(1+IUHF)*NBAS*NBAS*IINTFP
      MXCOR=MXCOR-(1+IUHF)*NBAS*NBAS*IINTFP
      CALL FRMFUL(ICORE(IIOO),ICORE(IIVV),ICORE(IIOV),
     &            ICORE(IIFULL),ICORE(IO),MXCOR,NBAS,IUHF,'INT')
      ENDIF
C
C DIAGONALIZE DENSITY AND FORM NATURAL ORBITALS IF REQUESTED.
C
      IF(IFLAGS(9).NE.0)THEN
       I000=IO
       I010=I000+NBAS*NBAS*IINTFP
       CALL NATORB(ICORE(I000),ICORE(I010),NBAS,IUHF)
      ENDIF
C
C OLD CODE, IF G(AB,CD) IS NOT CALCULATED, IT IS CALCULATED
C ON THE FLY IN ANTI.
C
C IF G(AB,CD) IS NOT CALCULATED, COMPUTE HERE 
C AND STORE IT ON LIST 231 -- 233
C
c      IF(IFLAGS(18).NE.1.AND.(.NOT.GABCD)) THEN
C
C CREATE LISTS 231 -- 233 IF THEY ARE NOT THERE     
C
c       IF(IFLAGS(93).EQ.2) THEN
c        IMODE=0
c        CALL INIPCK(1,13,13,233,IMODE,0,1)
c        IF(IUHF.NE.0) THEN
c         CALL INIPCK(1,1,1,231,IMODE,0,1)
c         CALL INIPCK(1,2,2,232,IMODE,0,1)
c        ENDIF
c       ENDIF
C 
c       IF(EOM)CALL EOMDABCD(ICORE(IO),MAXCOR,IUHF)
c       CALL GAMMA2(ICORE(IO),MAXCOR,IUHF,100)
C
c      ENDIF
C
C FOR OPEN-SHELL CCSD CALCULATIONS, COMPUTE SPIN MULTIPLICITY
C
      IF(NDRGEO.EQ.0)THEN
C
      IF(.NOT.EOM.AND.GABCD.AND.CCSD.AND.IFLAGS(11).NE.0)THEN
       CALL S2EXPECT(ICORE(IO),MAXCOR,IUHF,'R',.FALSE.,0)
      ENDIF
C
      ENDIF
C
C FOR CC AND MBPT(4) SECOND DERIVATIVE CALCULATIONS, SCALE H4 BY A
C FACTOR OF 1/2. FOR CC, TRANSPOSE THE H4 ARRAY.
C
      IF(IFLAGS(3).EQ.2) THEN
C
       CALL FIXH4(ICORE(IO),MAXCOR,IUHF)
C
      ENDIF
C
      WRITE(6,3001)
3001  FORMAT('  Density calculation successfully completed.')
c-------------------------------------------
      if (ndrgeo.ne.0) then 
       call resetscf(iuhf,nirrep,ndrop0,ICORE(IO),IINTFP)
      endif 
c-------------------------------------------
C For Molcas gradient calculations let's built the AO
C basis density matrix and the I(p,q) intermediates here. For
C vdint based analytical derivative calculations these steps are
C done internally. The total SCF density is already in the JOBARC file (see 
C vscf.f, blt_efctvfcok.f in vscf module). Ajith Perera 07/2000.
C
      IF (SEWARD) THEN
         CALL BLTAO_QUNTITES(ICORE(IO), MAXCOR, IUHF, NONHF)
      ENDIF
C
      call aces_fin  
      STOP
      END 
