C
C THIS ROUTINE IS FOR INTERFACING TO BERNHOLDT'S SCF CODE.  THINGS
C  WHICH WERE EXTREMELY DIFFICULT TO DETERMINE FROM AN EVE FILE ARE
C  NOW MOSTLY JUST PICKED OFF OF JOBARC.
C
      SUBROUTINE GTNRB2(IBUF,IHUGE,IUHF,NBAS,NCOMP,IENTRY)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      CHARACTER*8 LBEVCA,LBEVCB,LBEVLA,LBEVLB
      INTEGER DIRPRD
      LOGICAL SEMI
      DIMENSION IBUF(IHUGE)
      COMMON /FLAGS/ IFLAGS(100)
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),
     &DIRPRD(8,8)
      COMMON /FILES/ LUOUT,MOINTS
      COMMON /INFO/ NOCCO(2),NVRTO(2)
C
C IINTLN IS THE INTEGER LENGTH IN BYTES.
C IFLTLN IS THE FLOATING POINT LENGTH IN BYTES.
C IINTFP IS THE RATIO IFLTLN/IINTLN
C
      IONE=1
      ITWO=2
      SEMI=.FALSE.
      IF(IFLAGS(39).EQ.1)SEMI=.TRUE.
      IF(IFLAGS(1).GE.1)WRITE(LUOUT,331)NIRREP
331   FORMAT(T3,'@GTNRB2-I, There are ',I2,' irreducible ',
     &          'representations.')
      NORBS=NBAS
      NORBS2=NORBS*NORBS
C
C  CONSTRUCT THE REORDERING VECTOR AND PUT IT OUT ON DISK.
C   THERE WILL BE ONE OF THESE FOR EACH SPIN CASE.  DO ALPHA
C   FIRST.
C
      IF(IENTRY.EQ.1)THEN
       LBEVLA='SCFEVLA0'
       LBEVLB='SCFEVLB0'
       LBEVCA='SCFEVCA0'
       LBEVCB='SCFEVCB0'
      ELSEIF(IENTRY.EQ.2)THEN
       LBEVLA='SCFEVALA'
       LBEVLB='SCFEVALB'
       LBEVCA='SCFEVECA'
       LBEVCB='SCFEVECB'
      ENDIF
C
C The new records EESCFORA(B) (eigenvalues) and EVSCFORA(B) (eigenvectors)
C are added to keep the SCF-ordered corresponding vectors for future use.
C One of the uses is to compute the SCF gradient along with total gradient
C (SCF + CORRELATION). This is useful in some of the extrapolation schemes
C and one of the most immediate application is in rate constant work. See
C the notes in vdint for additional information. Ajith Perera, 01/2006.
C
      I000=1
      I010=I000+NORBS
C
C  Add this conditional to correct the FPS's brain-damaged compiler . . 
C
      IF(MOD(I010,2).EQ.0) I010=I010+1
      I020=I010+NIRREP
      CALL GETREC(20,'JOBARC','OCCUPYA ',NIRREP,IBUF(I010))
      CALL GETREC(20,'JOBARC','IRREPALP',NCOMP,IBUF(I020))
      CALL FMREVC(IBUF,IBUF(I010),IBUF(I020),NCOMP,NIRREP,1,
     &            IUHF, "VTRAN")
C
C REORDER THE EIGENVALUES, EIGENVECTORS AND FOCK MATRIX.
C
      I020=I010+NCOMP*IINTFP
      CALL GETREC(20,'JOBARC',LBEVLA,NCOMP*IINTFP,IBUF(I010))
C
      CALL PUTREC(20,'JOBARC','EESCFORA',NCOMP*IINTFP,IBUF(I010))
      IF (IUHF.EQ.0) THEN
         CALL PUTREC(20,'JOBARC','EESCFORB',NCOMP*IINTFP,IBUF(I010))
      END IF
C
      CALL REORDR(IBUF,IBUF(I010),IBUF(I020),1,NCOMP)
      CALL PUTREC(20,'JOBARC',LBEVLA,NCOMP*IINTFP,IBUF(I020))
      IF(IUHF.EQ.0)THEN
       CALL PUTREC(20,'JOBARC',LBEVLB,NCOMP*IINTFP,IBUF(I020))
      ENDIF
      LEN=NORBS*NCOMP
      I020=I010+LEN*IINTFP
      CALL GETREC(20,'JOBARC',LBEVCA,LEN*IINTFP,IBUF(I010))
C
      CALL PUTREC(20,'JOBARC','EVSCFORA',LEN*IINTFP,IBUF(I010))
      IF (IUHF.EQ.0) THEN
         CALL PUTREC(20,'JOBARC','EVSCFORB',LEN*IINTFP,IBUF(I010))
      END IF
C
      CALL REORDR(IBUF,IBUF(I010),IBUF(I020),NBAS,NCOMP)
      CALL PUTREC(20,'JOBARC',LBEVCA,LEN*IINTFP,IBUF(I020))
C
C  THIS STUFF IS NEEDED FOR SEMICANONICAL GRADIENT CALCULATIONS.
C  IT WILL CURRENTLY ONLY WORK IF THERE ARE NO DROPPED MOS.
C
      IF(SEMI) THEN
       CALL GETREC(20,'JOBARC','ROHFEVCA',LEN*IINTFP,IBUF(I010))
       CALL PUTREC(20,'JOBARC','ROHFSCCA',LEN*IINTFP,IBUF(I010))
       CALL REORDR(IBUF,IBUF(I010),IBUF(I020),NBAS,NCOMP)
       CALL PUTREC(20,'JOBARC','ROHFEVCA',LEN*IINTFP,IBUF(I020))
      ENDIF
C
      IF(IUHF.EQ.0)THEN
       CALL PUTREC(20,'JOBARC',LBEVCB,LEN*IINTFP,IBUF(I020))
      ENDIF
C
C DO THE SAME FOR THE BETA BLOCK IF THIS IS UHF.
C
C  CONSTRUCT THE REORDERING VECTOR AND PUT IT OUT ON DISK.
C   THERE WILL BE ONE OF THESE FOR EACH SPIN CASE.  DO ALPHA
C   FIRST.
C
      IF(IUHF.EQ.1)THEN
       I000=1
       I010=1+NORBS
C
C  Add this conditional to correct the FPS's brain-damaged compiler . . 
C
       IF(MOD(I010,2).EQ.0) I010=I010+1
       I020=I010+NIRREP
       CALL GETREC(20,'JOBARC','OCCUPYB ',NIRREP,IBUF(I010))
       CALL GETREC(20,'JOBARC','IRREPBET',NCOMP,IBUF(I020))
       CALL FMREVC(IBUF,IBUF(I010),IBUF(I020),NCOMP,NIRREP,2,
     &             IUHF, "VTRAN")
C
C REORDER THE EIGENVALUES AND EIGENVECTORS
C
       I020=I010+NCOMP*IINTFP
       CALL GETREC(20,'JOBARC',LBEVLB,NCOMP*IINTFP,IBUF(I010))
C
       CALL PUTREC(20,'JOBARC','EESCFORB',NCOMP*IINTFP,IBUF(I010))
C
       CALL REORDR(IBUF,IBUF(I010),IBUF(I020),1,NCOMP)
       CALL PUTREC(20,'JOBARC',LBEVLB,NCOMP*IINTFP,IBUF(I020))
       I020=I010+LEN*IINTFP
       CALL GETREC(20,'JOBARC',LBEVCB,LEN*IINTFP,IBUF(I010))
C
       CALL PUTREC(20,'JOBARC','EVSCFORB',LEN*IINTFP,IBUF(I010))
C
       CALL REORDR(IBUF,IBUF(I010),IBUF(I020),NORBS,NCOMP)
       CALL PUTREC(20,'JOBARC',LBEVCB,LEN*IINTFP,IBUF(I020))
C
C  This stuff is needed for semicanonical gradient calculations.
C  It will currently only work if there are no dropped MOs.
C
       IF(SEMI) THEN
        CALL GETREC(20,'JOBARC','ROHFEVCB',LEN*IINTFP,IBUF(I010))
        CALL PUTREC(20,'JOBARC','ROHFSCCB',LEN*IINTFP,IBUF(I010))
        CALL REORDR(IBUF,IBUF(I010),IBUF(I020),NBAS,NCOMP)
        CALL PUTREC(20,'JOBARC','ROHFEVCB',LEN*IINTFP,IBUF(I020))
       ENDIF
C
      ENDIF
C
C SYMMETRY STUFF - FIRST GET DIRECT PRODUCT TABLE AND THEN CALL
C                   THE SYMMETRY DRIVER WITH THE FULL SCRATCH
C                   VECTOR.
C
c YAU : old
c     CALL GETDPT
c YAU : new
#ifdef _ASSERT
      if (dirprd(1,1).ne.1) then
         print *, '@GTNRB2: Assertion failed.'
         print *, '   dirprd(*,*) = ',dirprd
         call aces_exit(1)
      end if
#endif
c YAU : end
      CALL PUTREC(20,'JOBARC','IRREPCOU',1,NIRREP)
C
C  This section is necessary if we are doing an ROHF gradient using
C  semicanonical orbitals. 
C
      IF(IFLAGS(3).GE.1.AND.SEMI) THEN
       I000=1
       I010=I000+NBAS*NBAS*IINTFP
       I020=I010+3*NBAS*NBAS*IINTFP
       IF(I020.GT.IHUGE) THEN
        WRITE(LUOUT,9000)
 9000   FORMAT(T3,'@GTNRB2-F, Unable to allocate memory to generate',
     &            'Fock lists.')
        CALL ERREX
       ENDIF
C
       CALL FOCKSTAN(IBUF(I000),IBUF(I010),NBAS,NIRREP,IUHF)
C
      ENDIF
C
      RETURN
      END
