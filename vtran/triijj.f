      SUBROUTINE TRIIJJ(CMO,ICORE,MAXCOR,IUHF)
C
C THIS ROUTINE DRIVES THE PARTIAL TRANSFORMATION OF TWO
C ELECTRON INTEGRALS OF TYPE IIJJ
C
CEND
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL RHF,LAST,FIRST
      INTEGER DIRPRD,POP,VRT
      CHARACTER*80 FNAME
C
      DIMENSION CMO(1),ICORE(MAXCOR)
      DIMENSION ISIZE2(8),ISIZE3(8),ISIZE4(8),IOFFI(8),
     &          IOFFAO(8),IOFFMO(8,2),ISIZT(8,8),NSIZE2(8)
      DIMENSION NSTART(8),NEND(8)
C
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/INFO/NOCCO(2),NVRTO(2)
      COMMON/INFO2/NBASIS,NBAS(8),NMO(8),POP(8,2),VRT(8,2)
      COMMON/SYMINF/NDUMMY,NIRREP,IRREPA(255,2),DIRPRD(8,8)
      COMMON/AOOFST/INDOCC(8,2)
C
      NNP1O2(I)=(I*(I+1))/2
C
C  CREATE LOOK UP VECTOR FOR IRREP OF EACH AO
C
      ISYMAO=1
      IREORD=ISYMAO+NBASIS
      ISTART=IREORD+(1+IUHF)*NBASIS
      IF(MOD(ISTART,2).NE.1) ISTART=ISTART+1
C 
      NCOMP=NOCCO(1)+NVRTO(1)
C
      IND=0
      DO 1 IRREP=1,NIRREP
       DO 1 I=1,NBAS(IRREP)
        IND=IND+1
        ICORE(IND)=IRREP
1     CONTINUE
C
C FILL REORDER VECTOR FOR WRITING INTEGRALS TO HF2
C
      IND=IREORD-1
      DO 5 ISPIN=1,MIN(IUHF+1,2)
       IOFFOCC=0
       IOFFVRT=NOCCO(ISPIN)
       DO 4 IRREP=1,NIRREP
        DO 2 IOCC=1,POP(IRREP,ISPIN)
         IND=IND+1
         ICORE(IND)=IOCC+IOFFOCC
2       CONTINUE
        IOFFOCC=IOFFOCC+POP(IRREP,ISPIN)
        DO 3 IVRT=1,VRT(IRREP,ISPIN)
         IND=IND+1
         ICORE(IND)=IOFFVRT+IVRT
3       CONTINUE
        IOFFVRT=IOFFVRT+VRT(IRREP,ISPIN)
4      CONTINUE
5     CONTINUE
C
C DETERMINE VALUE OF RHF FLAG
C
      RHF=IUHF.EQ.0
C
C LOOP OVER SPIN CASES
C
C      RHF : ONE LOOP
C      UHF : TWO LOOPS
C      ROHF : CURRENTLY TWO LOOPS, LATER THE HANDY-POPLE TRANSFORMATION
C             MIGHT BE IMPLEMENTED
C
      DO 1000 ISPIN=1,MIN(1+IUHF,2)
C
C OPEN INTEGRAL FILE IIJJ (UNIT 10)
C
       LUINT=10
       CALL GFNAME('IIJJ    ',FNAME,ILENGTH)
       OPEN(LUINT,FILE=FNAME(1:ILENGTH),STATUS='OLD',
     &      FORM='UNFORMATTED',ACCESS='SEQUENTIAL')
       CALL LOCATE(LUINT,'TWOELSUP')
C
C FILL NSTART AND NEND FOR hHANDLING OUT-OF-CORE
C
       DO 6 IRREP=1,NIRREP
        NSTART(IRREP)=1
        NEND(IRREP)=POP(IRREP,ISPIN)
6      CONTINUE
C
C CALCULATE SIZE OF SYMMETRIC TRIANGULAR ARRAY FOR EACH IRREP
C
       CALL IZERO(IOFFAO,8)
       CALL IZERO(IOFFMO,16)
       CALL IZERO(IOFFI,8)
       CALL IZERO(ISIZE2,8)
       CALL IZERO(ISIZE3,8)
       CALL IZERO(ISIZE4,8)
       CALL IZERO(ISIZT,64)
       CALL IZERO(NSIZE2,8)
       NSIZE=0
       MSIZE=0
       IAO=0
       IMO=0
       DO 10 IRREP=1,NIRREP
C
C OFFSET OF BASIS FUNCTIONS FOR EACH IRREP
C
        IOFFAO(IRREP)=IAO
        IOFFMO(IRREP,1)=IMO
        IOFFMO(IRREP,2)=IMO+NCOMP
C
C SIZE OF TWO-DIMENSION INTEGRAL ARRAY OF IRREP IRREP
C
        ISIZE2(IRREP)=NNP1O2(NBAS(IRREP))
C
C COUNTER FOR TWO-DIMENSIONAL INTEGRAL ARRAY AND BASIS FUNCTIONS
C
        DO 9 IRREP1=1,NIRREP
C
C OFFSET WITHIN THE TOTAL TWO-DIMENSION INTEGRAL ARRAY FOR EACH IRREP
C
         ISIZT(IRREP1,IRREP)=NSIZE2(IRREP1)
         IF(IRREP1.NE.IRREP) THEN
          NSIZE2(IRREP1)=NSIZE2(IRREP1)+ISIZE2(IRREP)
         ENDIF
9       CONTINUE
        IAO=IAO+NBAS(IRREP)
        IMO=IMO+NMO(IRREP)
C
10     CONTINUE
C
C NSIZE2 IS HERE THE TOTAL SIZE OF THE TWO-DIMENSIONAL INTEGRAL ARRAY
C
       DO 15 IRREP=1,NIRREP
C
C SIZE OF THREE DIMENSIONAL INTEGRAL ARRAY OF IRREP IRREP
C
        ISIZE3(IRREP)=NSIZE2(IRREP)*NBAS(IRREP)
C
C SIZE OF FOUR-DIMENSIONAL INTEGRAL ARRAY OF IRREP IRREP
C
        ISIZE4(IRREP)=ISIZE3(IRREP)*POP(IRREP,ISPIN)
C
C OFFSET WITHIN THE INTEGRAL ARRAY FOR EACH IRREP
C
        IOFFI(IRREP)=NSIZE
C
C NSIZE CORRESPONDS TO THE TOTAL SIZE 
C AND MSIZE GIVES THE MAXIMUM SIZE OF THE THREE DIMENSIONAL INTEGRAL ARRAY
C FOR ONE IRREP
C
        NSIZE=NSIZE+ISIZE4(IRREP)
        MSIZE=MAX(MSIZE,ISIZE3(IRREP),2*NBAS(IRREP)*
     &            NBAS(IRREP))
C
15     CONTINUE
C
C INTEGRAL BUFFER LENGTH
C
       ILNBUF=600
C
C WE IMPLEMENT AT THE MOMENT ONLY FULL IN CORE MBPT(2) TRANSFORNATIONS
C 
       I000=ISTART
C
C I000 .... FOUR DIMENSIONAL INTEGRAL ARRAY OF SIZE NSIZE
C
       I010=I000+NSIZE*IINTFP
       IEND2=I010+IINTFP*MSIZE
C
C I010 .... SCRATCH ARRAY OF MAXIMUM SIZE NBASIS
C
       I020=I010+IINTFP*NBASIS
C
C I020 .... INTEGRAL VALUES OF ONE RECORD READ IN FROM IIJJ
C
       I030=I020+ILNBUF*IINTFP
C 
C I030 .... INTEGRAL INDICES OF ONE RECORD READ IN FROM IIJJ
C
       IEND1=I030+ILNBUF
       IEND=MAX(IEND1,IEND2)
C
C CHECK WHETHER FULL IN-CORE ALGORITHM IS POSSIBLE
C
       IF(IEND.GE.MAXCOR) THEN
C
C MULTIPLE PASSES ARE REQUIRED (OUT-OF-CORE ALGORITHM)
C
        I010=ISTART
        I020=I010+IINTFP*NBASIS
        I030=I020+IINTFP*ILNBUF
        IEND1=I030+ILNBUF
        IEND2=I010+IINTFP*MSIZE
        IEND=MAX(IEND1,IEND2)
        IF(MOD(IEND,2).NE.1) IEND=IEND+1
        I000=IEND
C
C MXCOR IS MAXIMUM OF AVAILABLE CORE MEMORY
C
        MXCOR=MAXCOR-IEND 
C
C SET FIRST ORBITAL TO 1
C
        JSTART=1
C
        JEND=0
        DO 915 IRREP=1,NIRREP
         JEND=JEND+POP(IRREP,ISPIN)
915     CONTINUE
C
       ELSE
C
        LAST=.TRUE.
        NSIZE1=NSIZE
        GO TO 950
C
       ENDIF
C
900    CONTINUE
C
       MXCOR1=MXCOR
       NSIZE1=0
       CALL IZERO(IOFFI,8)
       CALL IZERO(NEND,8) 
       DO 901 IRREP=1,NIRREP
        NSTART(IRREP)=1
901    CONTINUE
       JST=JSTART
       DO 910 IRREP=1,NIRREP
        JRREP=IRREP
        IF(JST.LE.POP(IRREP,ISPIN)) GO TO 920
        JST=JST-POP(IRREP,ISPIN)
910    CONTINUE
920    CONTINUE
C
       NSTART(JRREP)=JST
C
       FIRST=.TRUE.
C
930    CONTINUE
       NLEFT=POP(JRREP,ISPIN)+1-NSTART(JRREP)
       IF(ISIZE3(JRREP).NE.0) THEN
        NORB=MXCOR1/(ISIZE3(JRREP)*IINTFP)
        IF(NORB.EQ.0.AND.FIRST) THEN
         write(*,*) ' @TRIIJJ-F, Sorry, there is not enough memory !'
         CALL ERREX
        ENDIF
       ELSE
        NORB=NMO(JRREP)+1
       ENDIF
       FIRST=.FALSE.
       NEND(JRREP)=NSTART(JRREP)+MIN(NLEFT,NORB)-1
       MXCOR1=MXCOR1-MIN(NLEFT,NORB)*IINTFP*ISIZE3(JRREP)
       JSTART=JSTART+MIN(NLEFT,NORB)
       IOFFI(JRREP)=NSIZE1
       NSIZE1=NSIZE1+MIN(NLEFT,NORB)*ISIZE3(JRREP)
       LAST=.FALSE. 
       IF(JSTART.GT.JEND) LAST=.TRUE.
       IF((.NOT.LAST).AND.(NORB.GT.NLEFT)) THEN
        JRREP=JRREP+1
        NSTART(JRREP)=1
        GO TO 930
       ENDIF
950    CONTINUE
C
       CALL LOAD2(CMO,ICORE(I000),ICORE(I010),ICORE(I020),
     &            ICORE(I030),ICORE(ISYMAO),NBAS,
     &            POP(1,ISPIN),NSTART,NEND,ISIZE3,ISIZT,
     &            IOFFAO,IOFFI,NSIZE1,ILNBUF,ISPIN,LUINT,
     &            LAST)
C
       CALL INTRN2(CMO,ICORE(I000),ICORE(I010),RHF,NBASIS,
     &             NBAS,NMO,POP(1,ISPIN),POP(1,3-ISPIN),
     &             NSTART,NEND,ISIZE3,
     &             IOFFMO,NSIZE1,ISPIN,ICORE(IREORD))
       IF(.NOT.LAST) GO TO 900
1000   CONTINUE        
       RETURN 
       END
