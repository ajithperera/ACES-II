
      SUBROUTINE LOAD1(CMO,W,W2,BUF,IBUF,ISYMAO,NBAS,
     &                 NFIRST,NSTART,NEND,ISIZE,
     &                 IOFFAO,IOFFI,NSIZE,
     &                 ILNBUF,ISPIN,LUINT,LAST)
C
C THIS ROUTINE LOADS AO INTEGRALS FROM
C THE INTEGRAL FILE IIII AND TRANSFORMS THE FIRST
C INDEX.
C
CEND
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INTEGER DIRPRD,AND,OR
      LOGICAL LAST
C
      DIMENSION IBUF(ILNBUF),BUF(ILNBUF),W(1),W2(1),CMO(1)
      DIMENSION NBAS(8),NFIRST(8),NSTART(8),NEND(8),
     &          ISIZE(8),IOFFAO(8),IOFFI(8)
      DIMENSION ISYMAO(100) 
C
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/SYMINF/NDUMMY,NIRREP,IRREPA(255,2),DIRPRD(8,8)
      COMMON/FLAGS/IFLAGS(100)
      COMMON/FLAGS2/IFLAGS2(500)
      COMMON/AOOFST/INDOCC(8,2)
      COMMON/VTINFO/NPASS1,NPASS2,NPASS3,NPASS4,
     &              NLOAD1,NLOAD2,NLOAD3,NLOAD4,
     &              NWRIT1,NWRIT2,NWRIT3,NWRIT4,
     &              NWRIT1A,NWRIT2A,NWRIT3A,NWRIT4A,
     &              NWRIT1B,NWRIT2B,NWRIT3B,NWRIT4B
C
      DATA HALF/0.5D0/
C
      IUPKI(IX)=AND(IX,IALONE)
      IUPKJ(IX)=AND(ISHFT(IX,-IBITWD),IALONE)
      IUPKK(IX)=AND(ISHFT(IX,-2*IBITWD),IALONE)
      IUPKL(IX)=AND(ISHFT(IX,-3*IBITWD),IALONE)
      INDXT(I,J)=J+(I*(I-1))/2
      INDXF(I,J,N)=I+N*(J-1)
C
C ZERO SCRATCH ARRAY
C
      CALL ZERO(W,NSIZE)
C
C INCREMENT NPASS1
C
      NPASS1=NPASS1+1
C
C READ IN INTEGRALS
C
      NAOBUF=0
      NAOINT=0
1     READ(LUINT) BUF,IBUF,NUT
      NAOBUF=NAOBUF+1
      DO 10 INT=1,NUT
       X=BUF(INT)
       ITMP=IBUF(INT)
C
C  X VALUE, IX,JX,KX,LX INDICES  
C
       IX=IUPKI(ITMP)
       JX=IUPKJ(ITMP)
       KX=IUPKK(ITMP)
       LX=IUPKL(ITMP)
C
C GET IRREP OF INTEGRAL
C
       IRREPX=ISYMAO(IX)
C
C  OFFSET WITHIN BASIS FUNCTIONS
C
       IOFF=IOFFAO(IRREPX)
C
C  INDICES WITHIN IRREP
C
       IX=IX-IOFF
       JX=JX-IOFF
       KX=KX-IOFF
       LX=LX-IOFF
C
       I=MAX(IX,JX)
       J=MIN(IX,JX)
       K=MAX(KX,LX)
       L=MIN(KX,LX)
C
       IF(I.EQ.K.AND.J.EQ.L) THEN
        X=X*HALF
       ENDIF
C
C  OFFSET FOR CMO
C
       IOFFC=INDOCC(IRREPX,ISPIN)-1
C
C  NUMBER OF OCCUPIED ORBITALS WITHIN IRREPX
C
       NSTARTX=NSTART(IRREPX)
       NENDX=NEND(IRREPX)
       IF(NENDX.LT.NSTARTX) GO TO 10
C
C  NUMBER OF BASIS FUNCTIONS WITHIN IRREPX 
C
       NBASX=NBAS(IRREPX)
C
C  OFFSET WITHIN W
C
       IOFFW=IOFFI(IRREPX)
C
       ISIZEX=ISIZE(IRREPX)
C
C DETERMINE REDUNDANCY FACTOR FOR PLUGGING IN INTEGRALS
C
C THERE ARE A TOTAL OF EIGHT CONTRIBUTIONSa
C
C   (IJ|KL) (JI|KL) (IJ|LK) (JI|LK)
C   (KL|IJ) (KL|JI) (LK|IJ) (LK|JI)
C
C HOWEVER, WE NEED ONLY FOUR SINCE WE STORE THE AS
C
C   NU, SIGMA >= RHO,  I   
C
C FIRST ELEMENT:     TRANSFORM INDEX L TO MO BASIS
C
        IND=INDXT(I,J)-1
        X1=X
        IF(K.EQ.L) X1=X1*HALF
        IOFFCL=IOFFC+LX
        DO 9001 IFIRST=NSTARTX,NENDX
         W2(IFIRST)=CMO(IOFFCL+(IFIRST-1)*NBASX)*X1 
9001    CONTINUE 
C
C INCREMENT L(KX,IX,JX;I)
C
        IADRR=IOFFW+KX+NBASX*IND
*VOCL LOOP,NOVREC
CDIR$ IVDEP
        DO 9002 IFIRST=NSTARTX,NENDX
         IADR=IADRR+ISIZEX*(IFIRST-NSTARTX)
         W(IADR)=W(IADR)+W2(IFIRST)
9002    CONTINUE
        
C
C SECOND ELEMENT:     TRANSFORM INDEX K TO MO BASIS
C
        IOFFCK=IOFFC+KX
        DO 9003 IFIRST=NSTARTX,NENDX
         W2(IFIRST)=CMO(IOFFCK+(IFIRST-1)*NBASX)*X1
9003    CONTINUE 
C
C INCREMENT L(LX,JX,IX;I)
C
        IADRR=IOFFW+LX+NBASX*IND
*VOCL LOOP,NOVREC
CDIR$ IVDEP
        DO 9004 IFIRST=NSTARTX,NENDX
         IADR=IADRR+ISIZEX*(IFIRST-NSTARTX)
         W(IADR)=W(IADR)+W2(IFIRST)
9004    CONTINUE
C
C THIRD ELEMENT:     TRANSFORM INDEX J TO MO BASIS
C
        IND=INDXT(K,L)-1
        X2=X
        IF(I.EQ.J) X2=X2*HALF
        IOFFCJ=IOFFC+JX
        DO 9005 IFIRST=NSTARTX,NENDX
         W2(IFIRST)=CMO(IOFFCJ+(IFIRST-1)*NBASX)*X2
9005    CONTINUE 
C
C INCREMENT L(IX,KX,LX;I)
C
        IADRR=IOFFW+IX+NBASX*IND
*VOCL LOOP,NOVREC
CDIR$ IVDEP
        DO 9006 IFIRST=NSTARTX,NENDX
         IADR=IADRR+ISIZEX*(IFIRST-NSTARTX)
         W(IADR)=W(IADR)+W2(IFIRST)
9006    CONTINUE
C
C FOURTH ELEMENT:     TRANSFORM INDEX I TO MO BASIS
C
        IOFFCI=IOFFC+IX
        DO 9007 IFIRST=NSTARTX,NENDX
         W2(IFIRST)=CMO(IOFFCI+(IFIRST-1)*NBASX)*X2
9007    CONTINUE 
C
C INCREMENT L(JX,LX,KX;I)
C
        IADRR=IOFFW+JX+NBASX*IND
*VOCL LOOP,NOVREC
CDIR$ IVDEP
        DO 9008 IFIRST=NSTARTX,NENDX
         IADR=IADRR+ISIZEX*(IFIRST-NSTARTX)
         W(IADR)=W(IADR)+W2(IFIRST)
9008    CONTINUE
10    CONTINUE
C
      
      IF(NUT.EQ.ILNBUF) THEN
       NAOINT=NAOINT+NUT
       GO TO 1
      ENDIF
      IF(NUT.EQ.-1) NUT=0
C
      NAOINT=NAOINT+NUT
      IF(LAST) THEN
C
CJDW 2/1/95. Delete integral file if possible.
C
       IF(IFLAGS(18).GE.3.OR.IFLAGS(26).EQ.1.OR.IFLAGS(93).EQ.2.OR.
     &   (ISPIN.EQ.1.AND.IFLAGS(11).GT.0)   .OR.IFLAGS2(103).EQ.1)THEN
        CLOSE(UNIT=LUINT,STATUS='KEEP')
       ELSE
        CLOSE(UNIT=LUINT,STATUS='DELETE')
       ENDIF
C
      ELSE
       REWIND(LUINT)
       CALL LOCATE(LUINT,'TWOELSUP')
      ENDIF
c      WRITE(6,1002)NAOINT
      NLOAD1=NAOINT
1002  FORMAT(T3,'@LOAD1-I, ',I8,' integrals read in from ',
     &          'file IIII')
C      
      RETURN
900   WRITE(6,1000)
1000  FORMAT(T3,'@LOAD-F, Unexpected end-of-file on integral file.')
      CALL ERREX
      RETURN
901   WRITE(6,1000)
1001  FORMAT(T3,'@LOAD-F, I/O error on unit ',I5,'.')
      CALL ERREX
      RETURN
      END
