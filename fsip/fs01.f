      SUBROUTINE FS01(ICORE,MAXCOR,IUHF)
C
C DRIVER FOR FOCK SPACE (0,1) SECTOR (ELECTRON REMOVAL) CALCULATIONS
C
      IMPLICIT INTEGER (A-Z)
      LOGICAL ALLDONE
      DIMENSION ICORE(MAXCOR)
C
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /SYMINF/ NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON /FSSYMPOP/ FSDPDAN(8,22),FSDPDNA(8,22),FSDPDAA(8,22),
     &                  FSDPDIN(8,22),FSDPDNI(8,22),FSDPDII(8,22),
     &                  FSDPDAI(8,22),FSDPDIA(8,22)
      COMMON /SYM/ POP(8,2),VRT(8,2),NT(2),NFMI(2),NFEA(2)
      COMMON /FSSYM/ POPA(8,2),POPI(8,2),VRTA(8,2),VRTI(8,2),
     &               NTAN(2),NTNA(2),NTAA(2),
     &               NTIN(2),NTNI(2),NTII(2),
     &               NTAI(2),NTIA(2),
     &               NF1AN(2),NF1AA(2),NF1IN(2),NF1II(2),NF1AI(2),
     &               NF2AN(2),NF2AA(2),NF2IN(2),NF2II(2),NF2AI(2)
      COMMON /INFO/ NOCCO(2),NVRTO(2)
      COMMON /CONVERGE/ ALLDONE
      COMMON /FLAGS/ IFLAGS(100)
C
      ALLDONE=.FALSE.
      NPASS=0
      CALL FSLIST(ICORE,MAXCOR,IUHF,'01')
C
C LIST STRUCTURE:
C
C     SINGLE AMPLITUDES
C
C   SPIN        WORKING       
C   CASE      AMPLITUDES     INCREMENTS
C
C    AA          1,94           3,94
C    BB          2,94           4,94
C    
C     DOUBLE AMPLITUDES
C
C   SPIN        WORKING       
C   CASE      AMPLITUDES     INCREMENTS
C
C   AAAA         96              196
C   BBBB         97              197
C   BABA         98              198
C   ABAB         99              199
C
C FOR RHF CALCULATIONS, ONLY THE AA SPIN CASE IS STORED FOR T1.  
C FURTHERMORE, ONLY THE ABAB CASE IS STORED FOR T2 AND *IT IS
C STORED IN SPIN ADAPTED FORM*.  T1 AND T2 AMPLITUDES ARE STORED
C AS IK AND IJKA, RESPECTIVELY.  THE RESTRICTION TO AN ACTIVE K
C INDEX IS DONE IMPLICITLY THROUGH SPECIAL FS IO ROUTINES
C
      CALL MODF(ICORE,MAXCOR,IUHF,1)
      CALL REPART(ICORE,MAXCOR,IUHF)
C
C INITIALIZE AMPLITUDES
C
      CALL INIT101(ICORE,MAXCOR,IUHF)
      CALL INIT201(ICORE,MAXCOR,IUHF)
      CALL DENWT01(ICORE,MAXCOR,IUHF,.TRUE.)
      CALL RST01  (ICORE,MAXCOR,IUHF)
      call largeamp(icore,maxcor,iuhf)
C
C INITIALIZE DOUBLES INCREMENTS (SINGLES ARE INITIALIZED IN SING01)
C
      IEXCYC=0
      CALL EXTDRV(ICORE,MAXCOR,IUHF,IEXCYC,.FALSE.)
1     CONTINUE
      NPASS=NPASS+1
      IF(MOD(NPASS,IFLAGS(13)).EQ.0)CALL LARGEAMP(ICORE,MAXCOR,IUHF)
      WRITE(6,1000)NPASS
1000  FORMAT(T3,' Beginning iteration ',I4,' of FS(0,1) equations.')
      CALL INIT201(ICORE,MAXCOR,IUHF)
C
C CALCULATE AND DIAGONALIZE EFFECTIVE HAMILTONIAN
C
      CALL MODF(ICORE,MAXCOR,IUHF,1)
      CALL HEFF01 (ICORE,MAXCOR,IUHF)
      NBAS=NOCCO(1)+NVRTO(1)
      I000=1
      I010=I000+2*NBAS*NBAS*IINTFP
      CALL MODF(ICORE(I010),MAXCOR,IUHF,-1)
      CALL DIAG01 (ICORE(I000),ICORE(I010),MAXCOR,IUHF,NBAS)
C
C SOLVE SINGLE AND DOUBLE EQUATIONS
C
      I000=1
      I010=I000+IINTFP*(NF1AA(1)+MIN(1,IUHF)*NF1AA(2))
      CALL MODF(ICORE(I010),MAXCOR,IUHF,1)
      CALL MODHEFF(ICORE,MAXCOR,IUHF,-1)
      CALL MODF(ICORE(I010),MAXCOR,IUHF,-1)
      CALL SING01 (ICORE(I000),ICORE(I010),MAXCOR,IUHF)
      CALL DOUB01 (ICORE(I000),ICORE(I010),MAXCOR,IUHF)
      CALL MODHEFF(ICORE,MAXCOR,IUHF,1)
C
C DENOMINATOR WEIGHT AMPLITUDES
C
      CALL DENWT01(ICORE,MAXCOR,IUHF,.TRUE.)
C
C EXTRAPOLATE AND CHECK CONVERGENCE
C
      IEXCYC=IEXCYC+1
      CALL EXTDRV(ICORE,MAXCOR,IUHF,IEXCYC,.FALSE.)
      IF(ALLDONE)THEN
       WRITE(6,1001)
1001   FORMAT(T3,'@FS01-I, Another miracle has passed. FS has ',
     &        'converged.')
       RETURN
      ENDIF
C
C FORM RESORTED DOUBLES AMPLITUDES
C
      CALL RST01 (ICORE,MAXCOR,IUHF)
C
      IF(NPASS.GT.50)THEN
       write(6,*)' fs01 did not converge. sorry.'
      ELSE
       GOTO 1
      ENDIF
C
      RETURN
      END
