      SUBROUTINE PSI4DBG_RDRIVER(IOCRE,MAXCOR,IUHF,MICRO_ITER)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION ICORE

      DIMENSION ICORE(MAXCOR)
      DIMENSION ECORR(3)
      INTEGER RELCYC
     
      LOGICAL PCCD,CCD,LCCD,MBPT2
      LOGICAL PCCDS,PCCDTS
      LOGICAL NONHF
      LOGICAL CIS,EOM
      LOGICAL BRUECK,BRKCNV
      LOGICAL MICRO_ITER
      LOGICAL READT
C
#include "flags.h" /* for h_IFLAGS_* and h_IFLAGS2_* */
#include "machsp.com"
#include "syminf.com" /* for nirrep */
#include "sym.com"
#include "flags.com"
#include "flags2.com"
#include "bwcc.com"
#include "sympop.com"

      COMMON/METH/PCCD,CCD,LCCD,MBPT2
      COMMON /ENERGY/ ENERGY(500,2)
      COMMON/EXCITE/EOM,CIS
      COMMON/NHFREF/NONHF
      COMMON/EXTRAPO/RLE

C Note at the first-iteration, T1 vector is zero and T2 is MBPT(2).

      CALL PSI4DBG_SETMET()
C
C Initializations of various intermediate lists etc.
C
      INEXT   = 1
      RLECYC  = 0
      IREF    = 1
      IBWPASS = 0
      I0      = 1
      BRUECK  = .FALSE.
      ICONTL  = IFLAGS(h_IFLAGS_cc_conv)
      NCYCLE  = IFLAGS(h_IFLAGS_cc_maxcyc)
      NKEEP   = IFLAGS(h_IFLAGS_cc_exporder)
      IEVERY  = IFLAGS(h_IFLAGS_tamp_sum)
      BRUECK  = (IFLAGS(h_IFLAGS_brueckner) .EQ. 1)
      MBPT    = IFLAGS(h_IFLAGS_calc) .EQ. 1
      pCCD    = IFLAGS(h_IFLAGS_calc) .EQ. 52
      pCCDS   = IFLAGS(h_IFLAGS_calc) .EQ. 55
      pCCDTS  = IFLAGS(h_IFLAGS_calc) .EQ. 56
      If (pCCD) THEN
         METHOD=8
      ELSEIF (pCCDS) THEN
         METHOD=10
      ELSEIF (pCCDTS) THEN
         METHOD=10
      ELSEIF (MBPT2) THEN
         METHOD = 1
      ENDIF 

      IF (METHOD.GE.1.OR.NONHF) CALL INSING(METHOD,IUHF)

      CALL CMPENG(ICORE(I0),MAXCOR,43,0,ECORR,
     &            ENERGY(1,1),ENERGY(1,2),IUHF,1)
      ELAST = ENERGY(1,2)

      IF ((IFLAGS2(117).EQ. 2  .OR. IFLAGS2(117).EQ. 4 .OR.
     &        IFLAGS2(117).EQ. 5  .OR. IFLAGS2(117).EQ. 10)
     &       .AND. .NOT. NONHF) THEN

      CALL INMBPT(ICORE(I0),MAXCOR,IUHF)
      CALL INSING(10,IUHF)
      CALL SETLST(ICORE(I0),MAXCOR,IUHF)
      CALL INITIN(ICORE(I0),MAXCOR,IUHF)
      CALL INITSN(ICORE(I0),MAXCOR,IUHF)
      CALL INCOR(I0,MAXCOR,IUHF)
      CALL RNABIJ(ICORE(I0),MAXCOR,IUHF,'T')
      CALL GENINT(ICORE(I0),MAXCOR,IUHF,2,.FALSE.)
      CALL INIT2(IUHF,PCCD.OR.PCCDS.OR.PCCDTS)
C
C  PUT CONVERGED AMPLITUDES AS INITIAL GUESS FOR SOLVING THE
C  LAMBDA EQUATIONS ON THE GAMLAM FILE
C
      DO ISPIN = 3, 3-2*IUHF, -1
         CALL MVSYM(ICORE(I0),MAXCOR,IUHF,1,43+ISPIN,143+ISPIN)
      END DO
      INTL1 = .FALSE.
      IF (INTL1) THEN
         DO ISPIN=1,IUHF+1
            CALL UPDMOI(1,NT(ISPIN),ISPIN,190,0,0)
            CALL UPDMOI(1,NT(ISPIN),ISPIN+2,190,0,0)
         END DO
C ZERO THE L1 LIST (ALL CYCLES)
         CALL ZERLST(ICORE,NT(1),1,1,1,190)
         IF (IUHF.NE.0) CALL ZERLST(ICORE,NT(2),1,1,2,190)
      ENDIF 
C
      IF (IUHF.EQ.0) CALL RESET(ICORE(I0),MAXCOR,IUHF)
      IF (IFLAGS(h_IFLAGS_incore).NE.0) THEN
          CALL ACES_AUXCACHE_FLUSH
          CALL ACES_AUXCACHE_RESET
      END IF
      WRITE(6,1020)
      ENDIF
C
      CALL PCCD_INITL2D2(IUHF)
      IF (MICRO_ITER) THEN 
         Write(6,*)
         CALL INMBPT(ICORE(I0),MAXCOR,IUHF)
         CALL PSI4DBG_DRDTGSS(ICORE(I0),MAXCOR,IUHF,'TGUESS  ',0,READT)
CSSS         CALL PSI4DBG_RETRIVE(ICORE(I0),MAXCOR,IUHF)
         RETURN
      ENDIF 
      CALL PCCD_RNABIJ(ICORE(I0),MAXCOR,IUHF,'T')
      IF (NONHF) THEN
         CALL PSI4DBG_ROHFPT(ICORE(I0),MAXCOR,IUHF)
         CALL INMBPT(ICORE(I0),MAXCOR,IUHF)
         CALL INSING(10,IUHF)
         CALL SETLST(ICORE(I0),MAXCOR,IUHF)
         CALL INITIN(ICORE(I0),MAXCOR,IUHF)
         CALL INITSN(ICORE(I0),MAXCOR,IUHF)
         CALL INCOR(I0,MAXCOR,IUHF)
CSSS         CALL RNABIJ(ICORE(I0),MAXCOR,IUHF,'T')
CSSS         CALL GENINT(ICORE(I0),MAXCOR,IUHF,2,.FALSE.)
         CALL INIT2(IUHF,PCCD.OR.PCCDS.OR.PCCDTS)
C
C PUT CONVERGED AMPLITUDES AS INITIAL GUESS FOR SOLVING THE
C LAMBDA EQUATIONS ON THE GAMLAM FILE
C
         DO ISPIN = 3, 3-2*IUHF, -1
            CALL MVSYM(ICORE(I0),MAXCOR,IUHF,1,43+ISPIN,143+ISPIN)
         END DO
         INTL1 = .FALSE.
         IF (INTL1) THEN
            DO ISPIN=1,IUHF+1
               CALL UPDMOI(1,NT(ISPIN),ISPIN,190,0,0)
               CALL UPDMOI(1,NT(ISPIN),ISPIN+2,190,0,0)
            END DO
C ZERO THE L1 LIST (ALL CYCLES)
            CALL ZERLST(ICORE,NT(1),1,1,1,190)
            IF (IUHF.NE.0) CALL ZERLST(ICORE,NT(2),1,1,2,190)
         ENDIF 
C
         IF (IUHF.EQ.0) CALL RESET(ICORE(I0),MAXCOR,IUHF)
         IF (IFLAGS(h_IFLAGS_incore).NE.0) THEN
             CALL ACES_AUXCACHE_FLUSH
             CALL ACES_AUXCACHE_RESET
         END IF
CSSS         CALL PSI4DBG_STORE(ICORE(I0),MAXCOR,IUHF)
         CALL PSI4DBG_DDMPTGSS(ICORE(I0),MAXCOR,IUHF,0,'TGUESS  ')
         CALL PSI4DBG_MBPTOUT
         WRITE(6,1020)
      ELSE
         CALL DDMPTGSS(ICORE(I0),MAXCOR,IUHF,0,'TGUESS  ')
         CALL PSI4DBG_MBPTOUT
      ENDIF 

 1020 FORMAT(/,77('-'),/,32X,'Exiting xvcc',/,77('-'),/)
C
      RETURN
      END
