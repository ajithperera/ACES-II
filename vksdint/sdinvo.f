         
      SUBROUTINE SDINVO(IRREPX,IVO,DOO,ICORE,MXCOR,IUHF)
C
C THIS ROUTINE COMPUTES THE CONTRIBUTIONS:
C
C      FD(A,I) = - SUM SD(M,N) * <MA||NI> + SD(m,n) * <Am|In> (ISPIN=1)
C
C      FD(a,i) = - SUM SD(m,n) * <ma||ni> + SD(M,N) * <aM|iN> (ISPIN=2)
C
CEND
C

      IMPLICIT INTEGER (A-Z)
      CHARACTER*4 TYPE
      DOUBLE PRECISION IVO,DOO
      DIMENSION DOO(1),IVO(1),ICORE(MXCOR)
      COMMON /SYM/ POP(8,2),VRT(8,2),NT(2),NFMI(2),NFEA(2)
      COMMON /SYMINF/ NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
C
      DATA ONE /1.0D0/
C
      IF(IUHF.EQ.0)THEN
C
C SPIN ADAPTED RHF CODE
C
       LISTW=10
       DO 120 IRREP=1,NIRREP
        DISSIZ=IRPDPD(IRREP,ISYTYP(1,LISTW)) 
        NUMDIS=IRPDPD(IRREP,ISYTYP(2,LISTW)) 
        I000=1
        I010=I000+IINTFP*NUMDIS*DISSIZ
        I020=I010+IINTFP*DISSIZ*NUMDIS
        IF(I020.GE.MXCOR) CALL ERREX
c        write(*,*) i000,i010,i020
        CALL GETLST(ICORE(I000),1,NUMDIS,1,IRREP,LISTW)
c        call kkk(3,icore(i000))
        CALL SPINAD3(IRREP,POP(1,1),DISSIZ,NUMDIS,ICORE(I000),
     &               ICORE(I010),ICORE(I010+IINTFP*NUMDIS))
        CALL TRANSP(ICORE(I000),ICORE(I010),NUMDIS,DISSIZ)
c YAU : old
c       CALL ICOPY(NUMDIS*DISSIZ*IINTFP,ICORE(I010),1,ICORE(I000),1)
c YAU : new
        CALL DCOPY(NUMDIS*DISSIZ,ICORE(I010),1,ICORE(I000),1)
c        call kkk(3,icore(i000))
c YAU : end
        NUMTMP=DISSIZ
        DISSIZ=NUMDIS
        NUMDIS=NUMTMP
        CALL VMINUS(ICORE(I000),NUMDIS*DISSIZ)
c        call kkk(3,icore(i000))
c        call kkk(3,IVO)
        CALL DDOT24(IRREPX,IRREP,IVO,DOO,ICORE(I000),ICORE(I010),DISSIZ,
     &             VRT(1,1),POP(1,1),POP(1,1),VRT(1,1),POP(1,1),
     &             POP(1,1),'STST')
c       call kkk(3,ivo)
120    CONTINUE
      ELSEIF(IUHF.NE.0)THEN
       DO 10 ISPIN=1,2
        LISTW1=6+ISPIN
        LISTW2=8+ISPIN
        DO 20 IRREP=1,NIRREP
         NDSZ1=IRPDPD(IRREP,ISYTYP(1,LISTW1))
         NDIS1=IRPDPD(IRREP,ISYTYP(2,LISTW1))
         NDSZF=IRPDPD(IRREP,20+ISPIN)
         NDSZ2=IRPDPD(IRREP,ISYTYP(1,LISTW2))
         NDIS2=IRPDPD(IRREP,ISYTYP(2,LISTW2))
         IOFFI=1+(ISPIN-1)*IRPDPD(IRREPX,9)
C
C DO FIRST PART - SD(m,n) * I(ma,nb)
C
         I000=1
         I010=I000+IINTFP*NDSZF*NDIS1
         I015=I010+IINTFP*NDSZ1*NDIS1
         I020=I015+IINTFP*IRPDPD(IRREPX,18+ISPIN)
         IOFFD=1+(ISPIN-1)*IRPDPD(IRREPX,21)
         CALL GETLST(ICORE(I010),1,NDIS1,2,IRREP,LISTW1)
         CALL TRANSP(ICORE(I010),ICORE(I000),NDIS1,NDSZ1)
         CALL SYMEXP(IRREP,POP(1,ISPIN),NDIS1,ICORE(I000))
         CALL VMINUS(ICORE(I000),NDSZF*NDIS1)
         CALL DDOT24(IRREPX,IRREP,IVO(IOFFI),DOO(IOFFD),ICORE(I000),
     &              ICORE(I010),NDIS1,VRT(1,ISPIN),POP(1,ISPIN),
     &              POP(1,ISPIN),VRT(1,ISPIN),POP(1,ISPIN),POP(1,ISPIN),
     &             'STST')
C
C NOW DO SECOND PART 
C
C        SD(m,n) * <Am|In> [ISPIN=1]
C
C        SD(M,N) * <aM|iN> [ISPIN=2]
C
         I000=1
         I005=I000+IINTFP*NDSZ2*NDIS2
         I010=I005+IINTFP*NDSZ2*NDIS2
         I020=I010+IINTFP*IRPDPD(IRREPX,18+ISPIN)
         IOFFD=1+(2-ISPIN)*IRPDPD(IRREPX,21)
         CALL GETLST(ICORE(I005),1,NDIS2,2,IRREP,LISTW2)
         CALL TRANSP(ICORE(I005),ICORE(I000),NDIS2,NDSZ2)
         CALL VMINUS(ICORE(I000),NDSZ2*NDIS2)
         IF(ISPIN.EQ.1) THEN
          TYPE='TSTS'
          CALL DDOT24(IRREPX,IRREP,IVO(IOFFI),DOO(IOFFD),ICORE(I000),
     &              ICORE(I010),NDIS2,VRT(1,1),POP(1,1),
     &              VRT(1,1),POP(1,2),POP(1,1),
     &              POP(1,2),TYPE)
         ELSE
          TYPE='STST'
         CALL DDOT24(IRREPX,IRREP,IVO(IOFFI),DOO(IOFFD),ICORE(I000),
     &              ICORE(I010),NDIS2,VRT(1,2),POP(1,2),
     &              POP(1,1),VRT(1,2),POP(1,1),
     &              POP(1,2),TYPE)
         ENDIF
20      CONTINUE
10     CONTINUE
      ENDIF
      RETURN
      END
