c Becke exchange functional and potential 
c                                          
c       by Stan Ivanov, April 1998              


      subroutine func_exch_becke(func)





c**************************************************************************
c The following comments may be ignored when appearing in a .f file.
c They are only meaningful in a .F file.
c**************************************************************************

c  Macros beginning with M_ are machine dependant macros.
c  Macros beginning with F_ are general fortran macros.
c  Macros beginning with B_ are blas/lapack routines.

c  M_REAL         set to either "real" or "double precision" depending on
c                 whether single or double precision math is done on this
c                 machine
c  M_SINGLE       set iff M_REAL="real"
c  M_DOUBLE       set iff M_REAL="double precision"

c  M_IMPLICITNONE set iff the fortran compiler supports "implicit none"
c  M_TRACEBACK    set to the call which gets a traceback if supported by
c                 the compiler


















c Different fortran data types (used in parsing routines).










c The following definitions define the blas routines to call.  It is done
c to distinguish between single and double precision routines.

c Instead of calling any blas routine by name, call it using the appropriate
c B_ macro below.  For the following lines:
c     call scopy(w,x,incx,y,incy)
c     call dcopy(w,x,incx,y,incy)
c should both be replaced with:
c     call B_COPY(w,x,incx,y,incy)

c All macros are of the form B_NAME where NAME is the name of the routine
c (minus the leading S or D).  The only exception is that the functions
c isamax and idamax have the macro B_AMAX.



c Blas 1













c Blas 2

















c Blas 3







c Lapack linear equations










c Lapack least squares



c Lapack eigenvalue








c Lapack generalized eigenvalue



c Lapack linear equations (expert)










c Lapack least squares (expert)


c Lapack eigenvalue (expert)







c Linpack (minv is stupid)












c A block-diagonal symmetric matrix can be stored in several different forms.
c These include:
c   full:  All elements (including zeroes) are stored.
c   sqr :  Each square block is stored (both upper and lower triangles), but
c          none of the zeros.
c   tri :  Only the upper triangular part of each block is stored.
c
c An individual block can be referenced in one of several ways including:
c   triblk :  One of the triangular blocks.
c   triseg :  A specific block in a "tri" matrix.
c   sqrblk :  One of the square blocks.
c   sqrseg :  A specific block in a "sqr" matrix.
c   fullseg:  A specific block in a "full" matrix (the zeroes are ignored).
c
c To make working with these matrices and blocks easier, the following
c constants are defined:














c**************************************************************************
c End of special comment section
c**************************************************************************


      implicit none






c This file contains parameters which are used in defining common blocks in
c the other include files and any common blocks which are global to ALL
c routines.  See the individual files for their description.

c mem.com
      integer dynmem,nondynimem,nondyndmem
      parameter (dynmem=1)
      parameter (nondynimem=1)
      parameter (nondyndmem=1)
c      parameter (nondynimem=1000000)
c     parameter (nondyndmem=4000000)

c flags.com
c      integer nflags,nflags2
c      parameter (nflags=100)
c      parameter (nflags2=500)

c jobarc.com
      integer jamaxrec,jarecwrd
      parameter (jamaxrec=1000)
      parameter (jarecwrd=128)

c callstack.com
c      integer callstack_num,callstack_len
c      parameter (callstack_num=100)
c      parameter (callstack_len=20)
c      character*(callstack_len) callstack_curr
c      common /callstack_curr/ callstack_curr

c namelist.com
c      integer nlmaxline,nllinelen
c      parameter (nlmaxline=64)
c      parameter (nllinelen=132)

c mol.com
c     12 => s,p,d,f,g,h,i,j,k,l,m,n
c     ***NOTE*** This is a genuine (though not serious) limit on what Aces3
c                can do.
      integer maxangshell
      parameter (maxangshell=12)
c     ***NOTE*** Another constraint (the number of symmetry unique atoms)
      integer maxorbit
      parameter (maxorbit=1000)

c pertab.com
      integer maxpertab
      parameter (maxpertab=103)

c sym.com
c      integer maxirrep,num2comb,max2comb,numlist,numsublis,
c     &    numlistfile,scrlistfile,totlistfile,scrlist,totlist,
c     &    listperfile
c    parameter (maxirrep=8)
c    parameter (num2comb=22)
c    parameter (max2comb=25)
c    parameter (numlistfile=5)
c    parameter (scrlistfile=2)
c    parameter (totlistfile=numlistfile+scrlistfile)
c    parameter (listperfile=100)
c    parameter (numlist=numlistfile*listperfile)
c    parameter (scrlist=scrlistfile*listperfile)
c    parameter (totlist=numlist+scrlist)
c    parameter (numsublis=10)














c This file contains a number of physical constants and conversion
c factors.  Physical constants are all stored in a variable named
c CONST_name where 'name' is the name of the physical constant.
c 
c Conversion factors are stored in variables named CONV_unit1_unit2
c where 'unit1' and 'unit2' are the names of two physical units.  To
c get from unit1 to unit2, multiply by this factor.
c 
c Example: To convert 20.4 meters/s to miles/hour in a perl script,
c          include the following line at the top of the script:
c              require "Constants.pl";
c          and then, at the point in the script where the conversion
c          is required, the following returns the desired value:
c              20.4 * $CONV_m_mile / $CONV_s_hr
c 
c          To do the same thing in either a C or Fortran program, include
c          the file "Constants.h" or "Constants.f" as appropriate and
c          at the point where the conversion is required, the following
c          returns the desired value:
c              20.4 * CONV_m_mile / CONV_s_hr
c 
c This file was generated automatically on 6/4/96.
c 
c Do not edit this file.  If you wish to add or change a conversion
c factor or constant, edit the file GenerateConstants.pl and rerun it.





c Physical Constants
c ====================
c 
c e       = e
c pi      = pi
c c       = speed of light in a vacuum     m s-1
c g       = gravitational acceleration     m s-2
c G       = gravitational constant         N m+2 kg-2
c me      = mass of an electron            kg
c mn      = mass of a neutron              kg
c mp      = mass of a proton               kg
c mmu     = mass of a mu particle          kg
c u       = atomic mass unit               kg
c ec      = elementary charge              C
c h       = planck's' constant              J s
c hbar    = h/2 pi                         J s
c k       = boltmann's' constant            J K-1
c u0      = permeability of vacuum         N A-2
c e0      = permittivity of vacuum         C+2 N-1 m-2
c re      = classical electron radius      m
c alpha   = fine structure constant   
c a0      = bohr radius                    m
c RH      = quantum hole resistance        ohm
c Rh      = Rydberg constant               m-1
c phi0    = magnetic flux quantum (h/2 ec) m+2 kg s-2 A-1
c uB      = Bohr magneton                  m+2 A
c ue      = electron magnetic moment       m+2 A
c un      = neutron magnetic moment        m+2 A
c uN      = nuclear magneton               m+2 A
c up      = proton magnetic moment         m+2 A
c umu     = mu particle magnetic moment    m+2 A
c lambdac = compton electron wavelength    m
c lambdacp= compton proton wavelength      m
c sigma   = Stefan-Boltmann constant       W m-2 K-4
c NA      = avogadro's' number              mole-1
c Vm      = ideal gas volume at STP        m+3 mole-1
c R       = gas constant                   J K-1 mole-1
c F       = faradays constant              C mole-1
c ea      = atomic unit of energy          J












































c TIME (s)
c ====================
c 
c s      = second
c min    = minute
c hr     = hour
c day    = day
c week   = week
c yr     = calendar year (365 days)
c yrleap = calendar year (leap year)
c 
c yrave  = average year (calendar year averaged over 4 years)
c yrside = year (sidereal)
c yrtrop = year (tropical)
c monave = month (averaged over 4 calendar years)
c daysid = sidereal day
c 
c shake  = shake


































































































































































c LENGTH (m)
c ====================
c 
c METRIC
c km     = kilometer
c m      = meter (SI)
c cm     = cm
c mm     = mm
c um     = micrometer
c nm     = nanometer
c pm     = picometer
c micron = micron
c mmicr  = millimicron
c fermi  = fermi
c 
c ATOMIC
c a      = angstrom
c a0     = bohr radius
c 
c AMERICAN/BRITISH
c hand   = hand
c ell    = ell
c in     = inch
c ft     = foot
c yd     = yard
c mile   = mile
c mileu  = mile (US survey)
c mil    = mil
c rod    = rod
c fur    = furlong
c chaing = chain (Gunter's')
c chainr = chain (Ramsden's')
c leag   = league
c cable  = cable length (U.S.)
c calib  = caliber
c cubit  = cubit
c ftu    = foot (US survey)
c barley = barleycorn (Brit)
c x      = x-unit
c span   = span
c nail   = nail (Brit)
c 
c NAUTICAL
c milen  = mile (nautical)
c leagn  = league (nautical)
c fathom = fathom
c degn   = nautical degree
c circn  = nautical circle
c cablen = cable length (international)
c 
c ASTRONOMICAL
c ly     = light year
c au     = astronomical unit
c pc     = parsec
c ls     = light second
c lm     = light minute
c 
c MISC
c bolt   = bolt (of cloth)


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































c MASS (kg)
c ====================
c 
c METRIC
c g      = gram
c kg     = kilogram (SI unit of mass)
c ktonm  = kiloton (metric)
c tonne  = tonne
c tonm   = ton (metric)
c 100wtm = hundredweight (metric)
c caratm = carat (metric)
c ng     = nanogram
c pg     = picogram
c mg     = milligram
c ug     = microgram
c 
c ATOMIC
c amu    = atomic mass units
c 
c AVOIRDUPOIS (US)
c 100wt  = hundredweight (short)
c 100wtl = hundredweight (long)
c cental = cental
c dram   = dram (solid)
c geelb  = geepound
c lb     = pound
c oz     = ounce (avoirdupois)
c slug   = slug
c stone  = stone
c ton    = ton (short)
c tonl   = ton (long)
c 
c TROY
c ozt    = ounce (Troy or apothecary)
c penny  = pennyweight
c scruple= scruple
c grain  = grain
c lbt    = pound (Troy)
c dramt  = dram (Troy or apothecary)


















































































































































































































































































































































































































































































































































































































































































































































































































































c ELECTRIC CURRENT (A)
c ====================
c 
c abA    = abampere
c A      = ampere
c Aint   = ampere (international)
c Aus    = ampere (U.S.)
c biot   = biot
c gilb   = gilbert




































c TEMPERATURE INTERVAL (K)
c ====================
c 
c degc   = celcius degree
c degf   = farenheit degree
c degr   = rankine degree
c K      = kelvin degree


















c LUMINOUS INTENSITY
c ====================
c 
c cd     = candela
c hef    = hefner unit
c lumPsr = lumen per steradian












c ANGLES (rad)
c ====================
c 
c amin   = minutes of an angle
c as     = seconds of an angle
c circum = circumference
c deg    = degrees
c gon    = gon (grade)
c quad   = quadrant
c rad    = radians
c rev    = revolution






























































c SOLID ANGLES (sr)
c ====================
c 
c sphere = sphere
c sr     = steradians
c sqdeg  = square degree
c sphra  = spherical right angle


















c AREA (m2)
c ====================
c 
c METRIC
c cm2    = square cm
c km2    = square kilometer
c m2     = square meter
c are    = are
c circmm = circular millimeter
c hect   = hectare
c mm2    = square millimeter
c barn   = barn
c 
c US
c acre   = acre
c ft2    = square ft
c in2    = square inch
c mile2  = square mile
c yd2    = square yd
c acreus = acre (US survey)
c chaig2 = square chain (Gunter's')
c chair2 = square chain (Ramsden's')
c chaiu2 = square chain (US survey)
c circin = circular inch
c circmil= circular mil
c ftu2   = square foot (US survey)
c linkg2 = square link (Gunter's')
c linkr2 = square link (Ramsden's')
c mil2   = square mil
c mileu2 = square mile (US survey)
c rod2   = square rod
c town   = township (US)
c darcy  = darcy




































































































































































































































































































































































































































































































































































































































































































































c VOLUME (l)
c ====================
c 
c METRIC
c cc     = cubic centimeter
c cl     = centiliter
c cm3    = cubic centimeter
c cupm   = cup (metric)
c dm3    = cubic decimeter
c km3    = cubic kilometer
c l      = liter
c litero = old (1901-1964) value of liter
c m3     = cubic meter
c ml     = milliliter
c mm3    = cubic millimeter
c 
c US/British
c acreft = acre-foot
c acrein = acre-inch
c bag    = bag (Brit)
c bbl    = barrel (petroleum)
c bblbb  = barrel (Brit, beer)
c bblbw  = barrel (Brit, wine)
c bbluc  = barrel (US, cranb)
c bblud  = barrel (US, dry)
c bblul  = barrel (US, liquid)
c board  = board foot
c boardf = board foot
c bu     = bushel (US)
c bub    = bushel (Brit)
c buck   = bucket (Brit)
c cord   = cord
c cordft = cord-foot
c cup    = cup
c dra    = dram (US, liquid)
c drach  = drachm (Brit, liquid)
c firkb  = firkin (Brit)
c firku  = firkin (US)
c floz   = ounce (US, liquid)
c ft3    = cubic foot
c gal    = gallon (US, liquid)
c galb   = gallon (Brit)
c gald   = gallon (US, dry)
c gill   = gill (US)
c gillb  = gill (Brit)
c in3    = cubic inch
c mile3  = cubic mile
c minim  = minim (US)
c minimb = minim (Brit)
c ozbf   = ounce (Brit, liquid)
c peck   = peck (US)
c peckb  = peck (Brit)
c pt     = pint (US, liquid)
c ptb    = pint (Brit)
c ptd    = pint (US, dry)
c qt     = quart (US, liquid)
c qtb    = quart (Brit)
c qtd    = quart (US, dry)
c regton = register ton
c scrup  = scruple (Brit, liquid)
c seam   = seam (Brit)
c yd3    = cubic yard














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































c FREQUENCY (Hz)
c ====================
c 
c Hz     = hertz
c pS     = per seconds (s-1)








c FORCE (N)
c ====================
c 
c dyn    = dyne
c kgf    = kg-force
c N      = newton
c lbal   = poundal
c lbf    = pound-force
c mgf    = mg-force




































c PRESSURE (Pa)
c ====================
c 
c atm      = atmosphere
c atmt     = atmosphere (tech)
c bar      = bar
c barye    = barye
c cmh2o    = cm of water
c cmhg     = cm of mercury
c dynPcm2  = dyne per square cm
c fth2o    = foot of water
c gPcm2    = gram-force per square cm
c inh2o    = inch of water
c inhg     = inch of mercury
c kgPcm2   = kg-force per square cm
c kgPm2    = kg-force per square m
c kgPmm2   = kg-force per square mm
c kPa      = kilopascal
c lbalPft2 = poundal per square foot
c lbPft2   = pound-force per square foot
c lbPin2   = pound-force per square inch
c mbar     = millibar
c megaPa   = megapascal
c mh2o     = meter of water
c mmh2o    = mm of water
c mmhg     = mm of mercury
c NPcm2    = newton per square cm
c NPm2     = newton per square m
c NPmm2    = newton per square mm
c Pa       = pascal (N m-2) (SI)
c psf      = pound-force per square foot
c psi      = pound-force per square inche
c t        = torr
c tonlPft2 = ton-force (long) per square foot
c tonlPin2 = ton-force (long) per square inch
c tonmPin2 = ton-force (metric) per square inch
c tonmPm2  = ton-force (metric) per square meter
c tonsPft2 = ton-force (short) per square foot
c tonsPin2 = ton-force (short) per square inch


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































c ENERGY, WORK, QUANTITY OF HEAT (J)
c ====================
c 
c cal      = calorie (thermochemical)
c kcal     = kilocalorie (thermochemical)
c ea       = hartree
c erg      = erg (g cm+2 s-2)
c ev       = electron volt
c hz       = energy measured as hertz
c J        = joule (N m) (SI)
c Nm       = newton-meter
c megaJ    = megajoule
c kcalPmol = kcal/mole
c kJPmol   = kjoule/mole
c wn       = cm-1
c ryd      = rydberg
c btu      = British thermal unit
c ft3atm   = cubic foot-atmosphere
c ft3lbPin2= cubic foot-pount-force/square inche
c ftlbal   = foot-poundal
c ftlb     = foot-pound-force
c hphr     = horsepower-hour
c hphrm    = horsepower-hour (metric)
c kgm      = kilogram-force-meter
c gcm      = gram-force-cm
c kWhr     = kilowatt-hour
c gWhr     = gigawatt-hour
c latm     = liter-atmosphere
c lbar     = liter-bar
c Whr      = watt-hour
c Ws       = watt-sec
c dyncm    = dyne-cm
c chu      = centigrade heat unit
c btu39    = btu (39 deg F, 4 deg C)
c but60    = btu (60 deg F, 15.6 deg C)
c btuave   = btu (mean)
c btuth    = btu (thermochemical)
c calor    = calorie
c kcalor   = kilocalorie
c cal15    = calorie (15 deg C)
c cal20    = calorie (20 deg C)
c calave   = calorie (mean)
c calth    = calorie (thermochemical)
c ccatm    = cubic centimeter-atmosphere














































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































c POWER, RADIANT FLUX (W)
c ====================
c 
c btuPhr  = btu per hour
c btuPmin = btu per minute
c btuPs   = btu per sec
c calPmin = calorie per minute
c calPs   = calorie per second
c ergPs   = erg per second
c ftlbPhr = foot-pound-force per hour
c ftlbPmin= foot-pound-force per minute
c ftlbPs  = foot-pound-force per second
c hp      = horsepower
c hpb     = horsepower (boiler)
c hpe     = horsepower (electric)
c hpm     = horsepower (metric)
c hpw     = horsepower (water)
c JPhr    = joule per hour
c JPmin   = joule per minute
c JPs     = joule per second
c kcalPhr = kilocalories per hour
c kcalPmin= kilocalories per minute
c kcalPs  = kilocalories per second
c kgmPhr  = kilogram-force-meter per hr
c kgmPmin = kilogram-force-meter per minute
c kgmPs   = kilogram-force-meter per second
c W       = watt
c kW      = kilowatt
c Wave    = watt (int. mean)
c Wu      = watt (int. US)




































































































































































































































































































































































































































































































































































































































































































































c QUANTITY OF ELECTRICITY, ELECTRIC CHARGE (C)
c ====================
c 
c abC    = abcoulomb
c As     = ampere-second
c Ahr    = ampere-hour
c C      = coulomb
c frank  = franklin


























c ELECTRIC POTENTIAL, POTENTIAL DIFFERENCE, ELECTROMOTIVE FORCE (V)
c ====================
c 
c abV    = abvolt
c kV     = kilovolt
c V      = volt
c Vave   = volt (int. mean)
c Vus    = volt (int. US)


























c CAPACITANCE (F)
c ====================
c 
c abF    = abfarad
c F      = farad
c Fave   = farad (int. mean)
c Fus    = farad (int. US)
c uF     = microfarad


























c ELECTRICAL RESISTANCE
c ====================
c 
c abO    = abohm
c O      = ohm
c Oave   = ohm (int. mean)
c Ous    = ohm (int. US)


















c CAPACITANCE (S)
c ====================
c 
c S      = siemens
c mhO    = mho (omh-1)
c abmhO  = abmho












c MAGNETIC FLUX (Wb)
c ====================
c 
c max   = maxwell
c pole  = unit pole
c Vs    = volt-sond
c Wb    = weber


















c MAGNETIC FLUX DENSITY (T)
c ====================
c 
c T        = tesla
c WbPm2    = weber per square meter








c INDUCTANCE (H)
c ====================
c 
c abH    = abhenry
c H      = henry
c Have   = henry (int. mean)
c Hus    = henry (int. US)


















c ILLUMINANCE (lx)
c ====================
c 
c lx     = lux
c lmPcm2 = lumen per square cm
c lmPm2  = lumen per square meter
c lmPft2 = lumen per square foot
c ph     = phot


























c ACTIVITY (Bq)
c ====================
c 
c Bq     = becquerel
c cur    = curie








c ABSORBED DOSE (Gy)
c ====================
c 
c Gy     = gray
c JPkg   = joule per kg








c SOUND INTENSITY
c ====================
c 
c db     = decibel
c neper  = neper









      double precision
     &    zero,one,two,three,four,five,six,seven,eight,nine,ten

      parameter (zero =0.0d0)
      parameter (one  =1.0d0)
      parameter (two  =2.0d0)
      parameter (three=3.0d0)
      parameter (four =4.0d0)
      parameter (five =5.0d0)
      parameter (six  =6.0d0)
      parameter (seven=7.0d0)
      parameter (eight=8.0d0)
      parameter (nine =9.0d0)
      parameter (ten  =1.0d1)

      double precision
     &    half,third,fourth,fifth,sixth

      parameter (half  =one/two)
      parameter (third =one/three)
      parameter (fourth=one/four)
      parameter (fifth =one/five)
      parameter (sixth =one/six)

      double precision
     &    pi

      parameter (pi    =3.14159265358979d0)

c Hopefully we can get away from storing a bunch of strings




















c Abelian groups






c The following constants are generated in a3const.F.

      double precision
     &    CONST_nan

      common /const/ CONST_nan







c The following values are used in determining the values of the various
c functionals:
c
c    roa    : The alpha density
c    rob    :
c    ro     : roa+rob
c    roinv  : 1/ro
c    rom    : roa-rob
c    rs     : (3 / 4 pi ro)**(1/3)
c    zeta   : (roa-rob)/ro
c
c    gradx  : d(roa)/dx + d(rob)/dx
c    grady  :
c    gradz  :
c    gradxm : d(roa)/dx - d(rob)/dx
c    gradym :
c    gradzm :
c    gro2   : gradx**2 + grady**2 + gradz**2
c    gro    : sqrt(gro2)
c    gro2a  : [d(roa)/dx]**2 + [d(roa)/dy]**2 + [d(roa)/dz]**2
c    gro2b  :
c
c    hesxx  : d2(roa)/dx2 + d2(rob)/dx2
c    hesyy  :
c    heszz  :
c    hesxy  :
c    hesxz  :
c    hesyz  :
c    hesxxm : d2(roa)/dx2 - d2(rob)/dx2
c    hesyym :
c    heszzm :
c    hesxym :
c    hesxzm :
c    hesyzm :
c    xlap   : hesxx + hesyy + heszz
c    xlapm  : hesxxm + hesyym + heszzm
c    trm1   :
c    trm1m  :
c    trm2   :
c    trm2m  :
c    grdaa  : gradroa.gradroa
c    grdbb  :
c    grdab  :
c    thresh : Parameter which tells what is the cutoff value
c           :  for is for the density, functionals and potetentials.
c           : The flag is cutoff and the default value is 10**(-12).
      double precision
     &    roa,rob,ro,rom,rs,zeta,roinv,
     &    gradx,grady,gradz,gradxm,gradym,gradzm,gro,gro2,gro2a,gro2b,
     &    hesxx,hesyy,heszz,hesxy,hesxz,hesyz,
     &    hesxxm,hesyym,heszzm,hesxym,hesxzm,hesyzm,
     &    xlap,xlapm,trm1,trm1m,trm2,trm2m,
     &    grdaa,grdbb,grdab,thresh

c There are several types of exchange and correlation energy functionals
c as well as hybrid schemes.  There are also corresponding potentials
c for use in Kohn-Sham.  Define the number of each type of energy functional
c and parameters to make calling them clearer.
c
c We want to have freedom to sellect potential and functional for
c better flexibility. Usually, the choice of functional determines 
c the poential  to be used in the  KS calculations.
c 
c
c fun_num_exch  : the number of exchange energy functionals (or potentials)
c fun_exch      : the total exchange energy contribution from the current
c                 atom
c tot_exch      : the total exchange energy contribution from all atoms
c coef_exch     : the coefficient of each exchange functional
c ene_exch      : the total energy with this functional
c nam_exch      : the name of the functional
c coef_pot_exch : the coefficient of each exchange component in the KS potential
c coef_pot_corr : the coefficient of each correlation component in the KS potential

      integer fun_num_exch,fun_num_corr,fun_num_hyb
      parameter (fun_num_exch = 5)
      parameter (fun_num_corr = 6)
      parameter (fun_num_hyb  = 1)

      double precision
     &    fun_exch(fun_num_exch),fun_corr(fun_num_corr),
     &    fun_hyb(fun_num_hyb),
     &    tot_exch(fun_num_exch),tot_corr(fun_num_corr),
     &    tot_hyb(fun_num_hyb),
     &    ene_exch(fun_num_exch),ene_corr(fun_num_corr),
     &    ene_hyb(fun_num_hyb),
     &    coef_exch(fun_num_exch),coef_corr(fun_num_corr),
     &    coef_pot_exch(fun_num_exch),coef_pot_corr(fun_num_corr)

      double precision vxc_ksalpha,vxc_ksbeta

      integer fun_exch_none,fun_corr_none,fun_special,
     &    fun_dft_none,
     &    fun_exch_lda,fun_exch_becke,fun_exch_pbe,fun_exch_pw91,
     &    fun_exch_hf,
     &    fun_corr_vwn,fun_corr_lyp,fun_corr_pbe,
     &    fun_corr_pw91, fun_corr_wl,fun_corr_wi,
     &    fun_hyb_b3lyp

      character*50
     &    nam_exch(fun_num_exch),nam_corr(fun_num_corr),
     &    nam_hyb(fun_num_hyb)
      character*80 nam_func,nam_kspot
      character*10
     &    abb_exch(fun_num_exch),abb_corr(fun_num_corr),
     &    abb_hyb(fun_num_hyb)

      parameter (fun_exch_none = 0)
      parameter (fun_exch_lda  = 1)
      parameter (fun_exch_becke= 2)
      parameter (fun_exch_pbe  = 3)
      parameter (fun_exch_pw91 = 4)
      parameter (fun_exch_hf   = 5)

      parameter (fun_corr_none = 0)
      parameter (fun_corr_vwn  = 1)
      parameter (fun_corr_lyp  = 2)
      parameter (fun_corr_pbe  = 3)
      parameter (fun_corr_pw91 = 4)
      parameter (fun_corr_wl   = 5)
      parameter (fun_corr_wi   = 6)

      parameter (fun_special   = 0)

      parameter (fun_dft_none  = -1)
      parameter (fun_hyb_b3lyp = 1)

      common /dftfunc/ fun_exch,fun_corr,fun_hyb,tot_exch,tot_corr,
     &    tot_hyb,ene_exch,ene_corr,ene_hyb,coef_exch,coef_corr,
     &    roa,rob,ro,rom,rs,zeta,roinv,
     &    gradx,grady,gradz,gradxm,gradym,gradzm,gro,gro2,gro2a,gro2b,
     &    hesxx,hesyy,heszz,hesxy,hesxz,hesyz,
     &    hesxxm,hesyym,heszzm,hesxym,hesxzm,hesyzm,
     &    xlap,xlapm,trm1,trm1m,trm2,trm2m,
     &    grdaa,grdbb,grdab,thresh,vxc_ksalpha,vxc_ksbeta,
     &    coef_pot_exch,coef_pot_corr

      common /dftfuncc/ nam_exch,nam_corr,nam_hyb,nam_func,
     &    abb_exch,abb_corr,abb_hyb,nam_kspot

      save /dftfunc/
      save /dftfuncc/

c Parameters for hybrid methods:
      double precision
     &    b3lypa,b3lypb,b3lypc
      parameter (b3lypa=0.20d0)
      parameter (b3lypb=0.72d0)
      parameter (b3lypc=0.81d0)







c This common block contains values for all of the Aces3 keywords as
c specified by default or in the ZMAT file.  For historical reasons,
c the flags are broken up into two blocks (originally only 100 were
c used and later an additional 500 were added).  It is hoped that a
c more flexible way of doing this will be implemented.

c nflags,nflags2  : the number of flags in each block
c iflags,iflags2  : the values for all flags
c iprint          : a special flag containing print information
c iuhf            : 1 if a UHF calculation is done
c needbas         : set to 1 if basis set info is needed
c debug           : a logical flag which may be useful to some
c multipoint      : A flag that says this more than one single point calculation.
c getall          : logical flag that is used in mrcc
c get_nonsense    : if .not. get_nonsense aces3 stops calculation if it thinks it is wrong.
c development_version: indiacates that this is a development version rather than production.

      integer nflags,nflags2
      parameter (nflags=100)
      parameter (nflags2=500)
      
      integer iflags(nflags),iflags2(nflags2),iprint,iuhf,needbas
      logical debug, multipoint, get_nonsense, development_version

      common /flags/  iflags,iflags2,iprint,iuhf,needbas
      common /flagsl/ debug, multipoint, get_nonsense,
     &    development_version







c This contains variables used in the callstack.  See the callstack_ops
c file for a description of the callstack.
c
c callstack_num : the number of routines on the stack
c callstack_len : the length of each element on the stack
c callstack     : the strings containing the callstack
c callstack_ptr : the first unused element in the callstack

c callstack.com
      integer callstack_num,callstack_len
      parameter (callstack_num=100)
      parameter (callstack_len=20)
      character*(callstack_len) callstack_curr
      common /callstack_curr/ callstack_curr

      character*(callstack_len) callstack(callstack_num)
      integer callstack_ptr

      common /callstackc/ callstack
      common /callstackp/  callstack_ptr
      save /callstackc/
      save /callstackp/




      double precision
     &    func

      double precision
     &    con13,con32,con43,con83,beta
      parameter (con13=one/three,con32=three/two,con43=four/three,
     &    con83=eight/three)
      parameter (beta=0.0042d0)

      double precision
     &    asinh,g,ro,x,x2,xa2,xb2,xa,xb,
     &    fbeckea,fbeckeb

      asinh(x)=dlog(x+dsqrt(x**two+one))
      g(x,x2)=beta*x2/(one+six*beta*x*asinh(x))

      callstack_curr='FUNC_EXCH_BECKE'

      func=zero
      fbeckea=zero
      fbeckeb=zero

      call func_exch_lda(func)

      if (roa.ge.thresh) then
        xa2=gro2a*roa**(-con83)
        xa=dsqrt(xa2)
        fbeckea=-((roa**con43)*g(xa,xa2))
      endif

      if (iuhf.eq.0) then
        fbeckeb=fbeckea
      else 
         if (rob.ge.thresh) then
            xb2=gro2b*rob**(-con83)
            xb=dsqrt(xb2)
            fbeckeb=-((rob**con43)*g(xb,xb2))
         endif
      end if

      func=func+fbeckea+fbeckeb

      return
      end


      subroutine pot_exch_becke(pota,potb)

















      double precision
     &    pota,potb

      double precision
     &    potbeckea,potbeckeb,
     &    gradxa,gradya,gradza,hesxxa,hesyya,heszza,hesxya,hesxza,
     &    hesyza,groa,
     &    gradxb,gradyb,gradzb,hesxxb,hesyyb,heszzb,hesxyb,hesxzb,
     &    hesyzb,grob

      callstack_curr='POT_EXCH_BECKE'

      call pot_exch_lda(pota,potb)

      if (roa.ge.thresh) then
       gradxa=half*(gradx+gradxm)
       gradya=half*(grady+gradym)
       gradza=half*(gradz+gradzm)
       hesxxa=half*(hesxx+hesxxm)
       hesyya=half*(hesyy+hesyym)
       heszza=half*(heszz+heszzm)
       hesxya=half*(hesxy+hesxym)
       hesxza=half*(hesxz+hesxzm)
       hesyza=half*(hesyz+hesyzm)
       groa=dsqrt(gro2a)

c Since Becke's exchange functional has two pieces,
c we find the second piece that involves the 
c the gradient corrections in beckepot.
c The first piece is the LDA exchange. 

       call beckepot(potbeckea,roa,groa,gradxa,gradya,gradza,
     &    hesxxa,hesyya,heszza,hesxya,hesxza,hesyza)

       pota=pota+potbeckea
c       if (pota.gt.zero) pota=zero

      end if

      if (iuhf.eq.0) then
        potb=pota
      else        
        if (rob.ge.thresh) then

          gradxb=half*(gradx-gradxm)
          gradyb=half*(grady-gradym)
          gradzb=half*(gradz-gradzm)
          hesxxb=half*(hesxx-hesxxm)
          hesyyb=half*(hesyy-hesyym)
          heszzb=half*(heszz-heszzm)
          hesxyb=half*(hesxy-hesxym)
          hesxzb=half*(hesxz-hesxzm)
          hesyzb=half*(hesyz-hesyzm)
          grob=dsqrt(gro2b)

         call beckepot(potbeckeb,rob,grob,gradxb,gradyb,gradzb,
     &     hesxxb,hesyyb,heszzb,hesxyb,hesxzb,hesyzb)

          potb=potb+potbeckeb
c          if(potb.gt.zero) potb=zero
        end if

      endif

      return
      end


        subroutine beckepot(potbecke,ro,gro,gradx,grady,gradz,
     &    hesxx,hesyy,heszz,hesxy,hesxz,hesyz)











      double precision
     &    ro,gro,gradx,grady,gradz,hesxx,hesyy,heszz,hesxz,hesyz,
     &    hesxy,potbecke

        double precision
     &    beta,x,x2,f,g,asinh,potbecke1,potbecke2,
     &    con43,con13,con53,con73,t1,t1a,
     &    t2x,t2y,t2z,t2,si1,si2,si,t3x,t3y,t3z,t3,dgx,dgy,dgz

      parameter (con43=four/three,con53=five/three,
     &   con73=seven/three,con13=one/three)
      parameter(beta=0.0042d0)

      asinh(x)=log(x+dsqrt(x**two+one))
      g(x)=(one+six*beta*x*asinh(x))
      f(x)=dsqrt(one+(x*x))

      callstack_curr='BECKEPOT'


          x=gro/(ro**con43)
          x2=x*x

          potbecke1=zero
          potbecke2=zero
          potbecke=zero


c We consider a functional of the form Int f(rho, |gradrho|) dr.
c potbecke1 is df/drho piece
c potbecke2 is grad.[(df/d|gradrho|)(gradrho/|gradrho|)]
c potbecke=potbecke1-potbecke2

       potbecke1=
     & (con43*(ro**con13)*x2*(beta*six*x2-f(x)))/
     & (g(x)*g(x)*f(x))


c     t1a is df/d|gradrho|
       t1a=(-two*x*(-f(x)-three*beta*x*f(x)*asinh(x)+
     & three*beta*x2))/(f(x)*g(x)*g(x))
       t1=(t1a/gro)*(hesxx+hesyy+heszz)

c     (d/dx + d/dy + d/dz) |grad n|
      dgx=(one/gro)*(gradx*hesxx+grady*hesxy+gradz*hesxz)
      dgy=(one/gro)*(gradx*hesxy+grady*hesyy+gradz*hesyz)
      dgz=(one/gro)*(gradx*hesxz+grady*hesyz+gradz*heszz)

      t2x=(-t1a/(gro*gro))*gradx*dgx
      t2y=(-t1a/(gro*gro))*grady*dgy
      t2z=(-t1a/(gro*gro))*gradz*dgz
      t2=t2x+t2y+t2z
 
c       si = d2f/dxd|gradn|
    
        si1=-two/((g(x)*f(x))**three)
        si2=-f(x)-x2*f(x)+18.0d0*beta*x2+
     & 15.0d0*beta*x2*x2+
     & 36.0d0*beta*beta*x2*x*asinh(x)+
     & 18.0d0*beta*beta*x2*x2*x*asinh(x)-
     & 36.0d0*beta*beta*x2*x2*f(x)
       si=si1*si2

       t3x=(si/gro)*gradx*
     &  ((dgx/(ro**con43))-(con43*x/ro)*gradx)
       t3y=(si/gro)*grady*
     &  ((dgy/(ro**con43))-(con43*x/ro)*grady)
       t3z=(si/gro)*gradz*
     &  ((dgz/(ro**con43))-(con43*x/ro)*gradz)
       t3=t3x+t3y+t3z

       potbecke2=t1+t2+t3

       potbecke=-beta*(potbecke1-potbecke2)

      return
      end

c Local Variables: c
c mode: fortran c
c fortran-do-indent: 2 c
c fortran-if-indent: 2 c
c fortran-continuation-indent: 4 c
c fortran-comment-indent-style: nil c
c End: c
