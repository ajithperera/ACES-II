      SUBROUTINE DINTRN2(EVEC,AODINT,BUF,RHF,NSTART,NEND,
     &                   ISPIN)
C
C THIS ROUTINE TRANSFORMS DERIVATIVE INTEGRALS FROM THE
C AO TO MO BASIS, THIS IS THE IIJJ VERSION.
C
CEND
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL RHF
      INTEGER DIRPRD,DISZAO,DISZMO,AOPOP
C
      DIMENSION EVEC(1),AODINT(1),BUF(1)
      DIMENSION NSTART(8),NEND(8)
C
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/SYMINF/NDUMMY,NIRREP,IRREPA(255,2),DIRPRD(8,8)
      COMMON/AOOFST/INDOCC(8,2) 
      COMMON/AOPOPS/AOPOP(8)
      COMMON/INFOI/TIMEI,NWRITI  
      COMMON /TIMEINFO/ TIMEIN, TIMENOW, TIMETOT, TIMENEW 
C
      DATA AZERO,ONE/0.D0,1.D0/
C
      CALL TIMER(1)
C
C LOOP OVER ALL IRREPS
C
      IOFF2=1
      IOFF3=1
C
      DO 1000 IRREP1=1,NIRREP
C
       IOFF2I=IOFF2
       IOFF3I=IOFF3
       NAOI=AOPOP(IRREP1)
       NMOI=AOPOP(IRREP1)
       NSTARTI=NSTART(IRREP1)
       NENDI=NEND(IRREP1)
       NUMDIS=NMOI*(NENDI-NSTARTI+1)
C
C DETERMINE SIZE OF TWO-DIMENSIONAL INTEGRAL ARRAY
C
      DISZAO=0
      DO 10 IRREP2=1,NIRREP
       IF(IRREP1.NE.IRREP2) THEN
        DISZAO=DISZAO+AOPOP(IRREP2)*AOPOP(IRREP2)
       ENDIF
10    CONTINUE
C
C LOOP OVER ALL OCCUPIED ORBITALS
C
       IOFFC1=INDOCC(IRREP1,ISPIN)
C
       DO 100 IOCC=NSTARTI,NENDI
C
C  TRANSFORM SECOND INDEX  (Mu I | SIGMA RHO) --> (P I | SIGMA RHO )
C
        CALL XGEMM('T','N',NMOI,DISZAO,NAOI,ONE,EVEC(IOFFC1),
     &             NAOI,AODINT(IOFF2),NAOI,AZERO,BUF,NMOI)
C
        CALL TRANSP(BUF,AODINT(IOFF3),DISZAO,NMOI)
C
        IOFF2=IOFF2+NAOI*DISZAO
        IOFF3=IOFF3+NMOI*DISZAO
C
100    CONTINUE
C
C NOW WE HAVE THE (PI,SIGMA RHO) INTEGRALS ORDERED AS   X X P I 
C
C NOW TRANSFORM NEW LHS TO RS, SPIN CASE ISPIN,ISPIN
C
       IOFF4=IOFF3I
       IOFF5=IOFF3I
C
C LOOP OVER NUMBER OF DISTRIBUTION (I,P OF IRREP IRREP)
C
       DO 200 IDIS=1,NUMDIS
C
C LOOP OVER SECOND IRREP IRREP2
C
        DO 2000 IRREP2=1,NIRREP
C
         IF(IRREP2.EQ.IRREP1) GO TO 2000
C
         NAOI2=AOPOP(IRREP2)
         NMOI2=AOPOP(IRREP2)
C
         IX=1+NAOI2*NAOI2
         IOFFC2=INDOCC(IRREP2,ISPIN)
C
c YAU : old
c        CALL ICOPY(NAOI2*NAOI2*IINTFP,AODINT(IOFF4),1,BUF,1)
c YAU : new
         CALL DCOPY(NAOI2*NAOI2,AODINT(IOFF4),1,BUF,1)
c YAU : end
         CALL GHTRAN(BUF,BUF,EVEC,IOFFC2,IOFFC2,1,1,BUF(IX),
     &               0,1,NAOI2,NAOI2,NMOI2,NMOI2)
c YAU : old
c        CALL ICOPY(NMOI2*NMOI2*IINTFP,BUF,1,AODINT(IOFF5),1)
c YAU : new
         CALL DCOPY(NMOI2*NMOI2,BUF,1,AODINT(IOFF5),1)
c YAU : end
C
         IOFF4=IOFF4+NAOI2*NAOI2
         IOFF5=IOFF5+NMOI2*NMOI2
2000    CONTINUE
C
200    CONTINUE
C
1000  CONTINUE
C
C DUMP TRANSFORMED INTEGRAL DERIVATIVE TO DISK
C
      IOFFBUF1=1
      NSIZ2=0
      DO 6000 IRREP1=1,NIRREP
       DO 7000 IRREP2=1,NIRREP
        IF(IRREP1.NE.IRREP2) THEN
         IOFFBUF1=MAX(IOFFBUF1,1+AOPOP(IRREP1)*AOPOP(IRREP2)*
     &                AOPOP(IRREP2))
         NSIZ2=MAX(2*AOPOP(IRREP1)*AOPOP(IRREP2),NSIZ2)
        ENDIF
7000   CONTINUE
6000  CONTINUE
C
      IOFFBUF2=IOFFBUF1+NSIZ2
C
      CALL DUMP2(AODINT,BUF,BUF(IOFFBUF1),BUF(IOFFBUF2),
     &           NSTART,NEND)
C
      CALL TIMER(1)
      TIMEI=TIMEI+TIMENEW
C
      RETURN
      END
