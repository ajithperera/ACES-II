      SUBROUTINE D2IABJ(UAIA,UAIB,SIJA,SIJB,UIAA,UIAB,SABA,SABB,
     &                  ICORE,MXCOR,IRREPX,IPERT,IUHF,STERM,ANTI)
C
C  THIS ROUTINE CALCULATES THE DERIVATIVE INTEGRALS d <Aj||Ib> / d chi
C
C THESE INTEGRALS ARE FOR IMAGINARY PERTURBATIONS NOT IDENTICAL TO
C INTEGRAL DERIVATIVES d <Ab||Ij>/ d chi
C
C   THERE ARE EIGHT DIFFERENT TERMS
C
CEND
C
C CODED SEP/91 JG UNIVERSITY OF KARLSRUHE
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INTEGER DIRPRD,DISSYW,DISSYD,POP,VRT
      LOGICAL FIELD,GEOM,ROHF,QRHF,SEMI,STERM,ANTI
      DIMENSION ICORE(MXCOR) 
      DIMENSION UAIA(1),UAIB(1),UIAA(1),UIAB(1)
      DIMENSION SIJA(1),SIJB(1),SABA(1),SABB(1)
C
      COMMON/OFFSETS/IOFFU(8,2),IOFFS1(8,2),IOFFS2(8,2)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/SYMINF/NSTART,NIRREP,IRREPAA(255,2),DIRPRD(8,8)
      COMMON/SYM/POP(8,2),VRT(8,2),NT(2),NF1(2),NF2(2)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),NJUNK(18)
      COMMON/DTRAN/FIELD,GEOM,ROHF,QRHF,SEMI
      COMMON /TIMEINFO/ TIMEIN, TIMENOW, TIMETOT, TIMENEW 
C
      DATA AZERO,ONE,ONEM /0.D0,1.D0,-1.D0/
C
      CALL TIMER(1)
C
C  INCORE ALGORITHM
C
C  LOOP OVER ALL IRREPS OF THE DERIVATIVE INTEGRALS
C
      DO 1000 IRREPR=1,NIRREP
C
C  THE IRREP ON THE LEFT SIDE IS THEN GIVEN AS THE DIRECT PRODUCT
C  OF IRREPP AND IRREPR
C
       IRREPL=DIRPRD(IRREPR,IRREPX)
C
C DETERMINE LENGTH OF TARGET ARRAY
C
       LISTD=321
       NUMSYD=IRPDPD(IRREPR,ISYTYP(2,LISTD))
       DISSYD=IRPDPD(IRREPL,ISYTYP(1,LISTD))
C
C ALLOCATE CORE FOR TARGET ARRAY
C
       ID=1
       IREST=ID+IINTFP*NUMSYD*DISSYD
       IF(IREST.GE.MXCOR) CALL INSMEM('D2IABJ1',IEND,MXCOR)
C
C  ZERO TARGET LIST
C
       CALL ZERO(ICORE(ID),NUMSYD*DISSYD)
C
C FIRST TERM: 
C
C CONSIDER FIRST ALL TERMS WHICH INCLUDE U(IA)
C
C    <Mj||Ib> U(MA) 
C
C  THE IRREP ON THE RIGHT SIDE IS UNCHANGED, SO IRREPR DETERMINES
C  THE LISTS OF ORIGINAL ZEROTH ORDER INTEGRALS
C
       LISTW=10
       NUMSYW=IRPDPD(IRREPR,ISYTYP(2,LISTW))
       DISSYW=IRPDPD(IRREPR,ISYTYP(1,LISTW))
C
C  ALLOCATE CORE MEMORY
C
       IW=IREST
       IW2=IW+IINTFP*NUMSYW*DISSYW
       ITMP=IW2
       IEND1=IW2+IINTFP*NUMSYW*DISSYW
       IEND2=ITMP+3*IINTFP*MAX(NUMSYW,DISSYW,NUMSYD,DISSYD)
       IEND=MAX(IEND1,IEND2)
C
       IF(IEND.GE.MXCOR) THEN
C
        IEND=ITMP+3*IINTFP*MAX(NUMSYW,NUMSYD,DISSYD,DISSYW)
        IF(IEND.GE.MXCOR) CALL INSMEM('D2IABJ2',IEND,MXCOR)
        CALL GETTRN(ICORE(IW),ICORE(ITMP),DISSYW,NUMSYW,1,
     &              IRREPR,LISTW)
C
       ELSE
C
C  READ IN THE <Mj||Ib> AS  Mj,Ib 
C
        CALL GETLST(ICORE(IW2),1,NUMSYW,1,IRREPR,LISTW)
C
C TRANSPOSE Mj,Ib TO Ib,Mj
C
        CALL TRANSP(ICORE(IW2),ICORE(IW),NUMSYW,DISSYW)
C
       ENDIF
C
C TRANSPOSE M AND j
C
       CALL SYMTR1(IRREPR,POP(1,1),POP(1,2),NUMSYW,ICORE(IW),
     &             ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYW),
     &             ICORE(ITMP+2*IINTFP*NUMSYW))
C
C  (Ib,jA) (R,L) <------ (Ib,jM) (R,R) (A,M) (X) (UHF)
C
       CALL DFINDT(ICORE(ID),ICORE(IW),UIAA,NUMSYD,DISSYD,
     &             NUMSYW,DISSYW,POP(1,2),POP(1,1),
     &             VRT(1,1),IRREPR,IRREPL,IRREPX,
     &             IOFFU(1,1),2)
C
C  TRANSPOSE THE TARGET LIST   
C
C   Ib,jA TO Ib,Aj
C
       CALL SYMTR1(IRREPL,POP(1,2),VRT(1,1),NUMSYD,
     &             ICORE(ID),ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYD),
     &             ICORE(ITMP+2*IINTFP*NUMSYD))
C
C TRANSPOSE ALSO Ib,Aj TO bI,Aj
C
       CALL SYMTR3(IRREPR,POP(1,1),VRT(1,2),NUMSYD,DISSYD,
     &             ICORE(ID),ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYD),
     &             ICORE(ITMP+2*IINTFP*DISSYD))
C
C SECOND TERM:
C  
C  NOW DO <Ib||Ae> U(e,i)
C
       LISTW=30
       NUMSYW=IRPDPD(IRREPR,ISYTYP(2,LISTW))
       DISSYW=IRPDPD(IRREPR,ISYTYP(1,LISTW))
C
C  ALLOCATE CORE MEMORY
C
       IF(MIN(NUMSYW,DISSYW).NE.0) THEN
        IW=IREST
        ITMP=IW+IINTFP*NUMSYW*DISSYW
        IEND=ITMP+3*IINTFP*MAX(NUMSYW,DISSYW,NUMSYD,DISSYD)
C
        IF(IEND.GE.MXCOR) THEN
C
C OUT-OF-CORE ALGORITHM
C
         ITMP=IREST
         IW=ITMP+3*IINTFP*MAX(NUMSYW,NUMSYD,DISSYW,DISSYD)
         ISTART=1
         NLEFT=NUMSYW
         MEM=MXCOR-IW
         NDIS=MEM/(IINTFP*DISSYW)
         IF(NDIS.EQ.0) THEN
          write(*,*) ' @-D2IABJ-F, Out-of-core algorithm not possible.'
          CALL ERREX
         ENDIF
C
C   TRANSPOSE FOR OUT-OF-CORE THE TWO RIGHT INDICES OF D 
C
         CALL SYMTR1(IRREPL,VRT(1,1),POP(1,2),NUMSYD,ICORE(ID),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYD),
     &               ICORE(ITMP+2*IINTFP*NUMSYD))
C
900      CONTINUE
C
         NREAD=MIN(NLEFT,NDIS)
         NLEFT=NLEFT-NREAD
         IEND=ISTART+NREAD-1
         CALL GETTRN3(ICORE(IW),ICORE(ITMP),DISSYW,
     &                ISTART,IEND,NREAD,1,IRREPR,LISTW)
C
C  (bI;jA) (R,L) <----- (bI;eA) (R,R) (e,j) (X)
C
         CALL DFINDT2(ICORE(ID),ICORE(IW),UAIB,ISTART,IEND,
     &                NUMSYD,DISSYD,NREAD,DISSYW,VRT(1,1),
     &                VRT(1,2),POP(1,2),IRREPR,IRREPL,
     &                IRREPX,IOFFU(1,2),1)
C
         ISTART=IEND+1
         IF(NLEFT.NE.0) GO TO 900
C
         CALL SYMTR1(IRREPL,POP(1,2),VRT(1,1),NUMSYD,ICORE(ID),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYD),
     &               ICORE(ITMP+2*IINTFP*NUMSYD))
C
        ELSE
C
C  READ IN THE <eA||bI> AS eA, bI
C  TRANSPOSE FROM eA,bI TO bI,eA 
C
         CALL GETTRN(ICORE(IW),ICORE(ITMP),DISSYW,NUMSYW,1,
     &               IRREPR,LISTW)
C
C TRANSPOSE FROM bI,eA TO bI,Ae
C
         CALL SYMTR1(IRREPR,VRT(1,2),VRT(1,1),NUMSYW,ICORE(IW),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYW),
     &               ICORE(ITMP+2*IINTFP*NUMSYW))
C
C  (bI;Aj) (R,L) <----- (bI;Ae) (R,R) (e,j) (X)
C
         CALL DFINDT(ICORE(ID),ICORE(IW),UAIB,NUMSYD,DISSYD,
     &               NUMSYW,DISSYW,VRT(1,1),VRT(1,2),POP(1,2),
     &               IRREPR,IRREPL,IRREPX,IOFFU(1,2),1)
C
        ENDIF
C
       ENDIF
C
       IF(STERM) THEN
C
C THIRD TERM:
C
C CONSIDER FIRST ALL TERMS WHICH INCLUDE S(AE)
C
C    <Ib|Am> (-1/2 S(mj))
C
C  THE IRREP ON THE RIGHT SIDE IS UNCHANGED, SO IRREPR DETERMINES
C  THE LISTS OF ORIGINAL ZEROTH ORDER INTEGRALS
C
        LISTW=21+IUHF
        NUMSYW=IRPDPD(IRREPR,ISYTYP(2,LISTW))
        DISSYW=IRPDPD(IRREPR,ISYTYP(1,LISTW))
C
C  ALLOCATE CORE MEMORY
C
        ITMP=IW+IINTFP*NUMSYW*DISSYW
        IEND=ITMP+3*IINTFP*MAX(DISSYW,NUMSYD)
C
        IF(IEND.GE.MXCOR) CALL INSMEM('D2IABJ4',IEND,MXCOR)
C
C  READ IN THE <Ib||Am> AS bI,Am 
C
         CALL GETLST(ICORE(IW),1,NUMSYW,1,IRREPR,LISTW)
C
C  (bI;Am) (R,L) <----- (bI;Am) (R,R) (mj) (X)
C
         CALL DFINDT(ICORE(ID),ICORE(IW),SIJB,NUMSYD,DISSYD,
     &               DISSYW,NUMSYW,VRT(1,1),POP(1,2),POP(1,2),
     &               IRREPR,IRREPL,IRREPX,IOFFS1(1,2),1)
C
C  TRANSPOSE THE TARGET LIST    bI;Aj --> bI,jA
C
         CALL SYMTR1(IRREPL,VRT(1,1),POP(1,2),NUMSYD,ICORE(ID),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYD),
     &               ICORE(ITMP+2*IINTFP*NUMSYD))
C
C TRANSPOSE THE INTEGRAL LIST
C
         CALL SYMTR1(IRREPR,VRT(1,1),POP(1,2),DISSYW,ICORE(IW),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYW),
     &               ICORE(ITMP+2*IINTFP*DISSYW))
C
C  (bI;jA) (R,L) <----- (bI;jE) (R,R) (EA) (X)
C
         CALL DFINDT(ICORE(ID),ICORE(IW),SABA,NUMSYD,DISSYD,
     &               DISSYW,NUMSYW,POP(1,2),VRT(1,1),VRT(1,1),
     &               IRREPR,IRREPL,IRREPX,IOFFS2(1,1),1)
C
C  TRANSPOSE THE TARGET LIST    bI;jA --> bI,Aj
C
         CALL SYMTR1(IRREPL,POP(1,2),VRT(1,1),NUMSYD,ICORE(ID),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYD),
     &               ICORE(ITMP+2*IINTFP*NUMSYD))
C
        ENDIF 
C
C ALL DONE, SAVE THE INTEGRAL DERIVATIVES ON DISK
C HOWEVER, EACH CONTRIBUTION HAS TO BE ADDED TWICE TO THE
C CORRESPONDING INTEGRAL DERIVATIVES
C
C  FIRST, WE HAVE TO ADD    (R,L) TYPES WITH DERIVATIVES TAKEN
C  WITH RESPECT TO THE LEFT SIDE
C  SECOND WE HAVE TO TRANSPOSE THE WHOLE STUFF AND HAVE TO
C  ADD IT TO THOSE DERIVATIVES WHERE IT CORRESPONDS TO 
C  THE DERIVATIVES TAKEN WITh RESPECT TO THE LEFT SIDE
C
C  IRREPR LT IRREPL (MEANING FIRST CONTRIBUTION) AND NOT STERM,
C  INITIALIZE LIST, OTHERWISE UPDATE
C
        call checksum('d2iabj d',icore(id),numsyd*dissyd)
        IF((IRREPR.GT.IRREPL).OR.STERM) THEN
C
C UPDATE
C
         ID2=IREST
         IEND=ID2+IINTFP*NUMSYD*DISSYD
         IF(IEND.GE.MXCOR) CALL INSMEM('D2IABJ5',IEND,MXCOR)
C
C GET INTEGRAL DERIVATIVES FROM DISK
C
         CALL GETLST(ICORE(ID2),1,DISSYD,1,IRREPL,LISTD)
         call checksum('d2iabj t',icore(id2),numsyd*dissyd)
C
         CALL SAXPY(NUMSYD*DISSYD,ONE,ICORE(ID),1,ICORE(ID2),1)
C
         CALL PUTLST(ICORE(ID2),1,DISSYD,1,IRREPL,LISTD)
         call checksum('d2iabj t',icore(id2),numsyd*dissyd)
C
        ELSE  
C
C INITIALIZE
C
         CALL PUTLST(ICORE(ID),1,DISSYD,1,IRREPL,LISTD)
C
        ENDIF
C 
C  TRANSPOSE TARGET LIST
C
        ID2=IREST
        IEND=ID2+IINTFP*NUMSYD*DISSYD
        IF(IEND.GE.MXCOR) CALL INSMEM('D2IABJ6',IEND,MXCOR)
C
        CALL TRANSP(ICORE(ID),ICORE(ID2),DISSYD,NUMSYD)
C
        IF((IRREPR.GE.IRREPL).OR.STERM) THEN
C
C UPDATE
C
         CALL GETLST(ICORE(ID),1,NUMSYD,1,IRREPR,LISTD)
         call checksum('d2iabj t',icore(id),numsyd*dissyd)
C
         IF(.NOT.ANTI) THEN
          CALL SAXPY(NUMSYD*DISSYD,ONE,ICORE(ID2),1,ICORE(ID),1)
         ELSE  
          CALL SAXPY(NUMSYD*DISSYD,ONEM,ICORE(ID2),1,ICORE(ID),1)
         ENDIF
C
         CALL PUTLST(ICORE(ID),1,NUMSYD,1,IRREPR,LISTD)
         call checksum('d2iabj t',icore(id),numsyd*dissyd)
C
        ELSE
C
C INITIALIZE
C
         CALL PUTLST(ICORE(ID2),1,NUMSYD,1,IRREPR,LISTD)
C
        ENDIF
C
1000  CONTINUE
C
C ALL DONE SO FAR, WRITE INFO MESSAGE AND GET CPU TIMING
C
      CALL TIMER(1)
C
      write(6,6000) TIMENEW
6000  FORMAT(' Integral derivatives d <ia||bj>/d chi', 
     &       ' have been formed in ',f5.1,' seconds.')
C
      RETURN
C
      END
