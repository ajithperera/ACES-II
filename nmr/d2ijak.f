

      SUBROUTINE D2IJAK(UAIA,UAIB,SIJA,SIJB,UIAA,UIAB,SABA,
     &                  SABB,ICORE,MXCOR,IRREPX,IPERT,IUHF,
     &                  STERM,ANTI)
C
C  THIS ROUTINE CALCULATES THE DERIVATIVE INTEGRALS d <Ij//Ak> / d chi
C
C   THERE ARE EIGHT DIFFERENT TERMS:
C
C    d <Ij/Ak>           x         x                 x     
C    --------- = <Ij/Ak>    + SUM U   <Ej/Ak> + SUM U   <Ie/Ak>
C      d x                     E   EI            e   ej 
C
C                       x                 x
C                + SUM U   <Ij/Ae> + SUM U   <Ij/Mk>
C                   e   ek            M   MA 
C
C
C  FOR UHF THERE TWO SPIN CASES, WHILE FOR RHF THERE IS ONLY ONE
C
C
CEND
C
C CODED MARCH/91  JG
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INTEGER DIRPRD,DISSYW,DISSYD,POP,VRT
      LOGICAL FIELD,GEOM,ROHF,QRHF,SEMI,STERM,ANTI
      DIMENSION ICORE(MXCOR) 
      DIMENSION UAIA(1),UAIB(1),UIAA(1),UIAB(1)
      DIMENSION SIJA(1),SIJB(1),SABA(1),SABB(1)
C
      COMMON/OFFSETS/IOFFU(8,2),IOFFS1(8,2),IOFFS2(8,2)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/SYMINF/NSTART,NIRREP,IRREPAA(255,2),DIRPRD(8,8)
      COMMON/SYM/POP(8,2),VRT(8,2),NT(2),NF1(2),NF2(2)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),NJUNK(18)
      COMMON/DTRAN/FIELD,GEOM,ROHF,QRHF,SEMI
C
      DATA AZERO,ONE /0.D0,1.D0/
C
C  INCORE ALGORITHM
C
C  DO HERE ALPHA,BETA SPIN CASE
C
C  LOOP OVER ALL IRREPS OF THE DERIVATIVE INTEGRALS
C
      DO 1000 IRREPR=1,NIRREP
C
C  THE IRREP ON THE LEFT SIDE IS THEN GIVEN AS THE DIRECT PRODUCT
C  OF IRREPP AND IRREPR
C
       IRREPL=DIRPRD(IRREPR,IRREPX)
C
       NUMSYD=IRPDPD(IRREPR,ISYTYP(2,9))
       DISSYD=IRPDPD(IRREPL,ISYTYP(1,9))
C
C  ALLOCATE CORE MEMORY
C
       ID=1
       IW=ID+IINTFP*NUMSYD*DISSYD
C
C  ZERO TARGET LIST
C
       CALL ZERO(ICORE(ID),NUMSYD*DISSYD)
C
C CONSIDER FIRST TERMS WHICH INVOLVE THE INTEGRALS
C
C   <Ie|Ak> and <Ej|Ak>
C
C   <Ej/Ak> U(EI) + <Ie/Ak> U(ej)
C
C  THE IRREP ON THE RIGHT SIDE IS UNCHANGED, SO IRREPR DETERMINES
C  THE LISTS OF ORIGINAL ZEROTH ORDER INTEGRALS
C
C  <Ie/Ak> IS THE SAME AS <Ae|Ik>, THUS LIST 21
C 
       LISTW=21
       NUMSYW=IRPDPD(IRREPR,ISYTYP(2,LISTW))
       DISSYW=IRPDPD(IRREPR,ISYTYP(1,LISTW))
C
C ALLOCATE CORE MEMORY
C
       ITMP=IW+IINTFP*NUMSYW*DISSYW
       IEND=ITMP+3*IINTFP*MAX(NUMSYW,DISSYW,NUMSYD,DISSYD)
C
       IF(IEND.GE.MXCOR) CALL ERREX
C
C  READ IN THE <Ie/Ak> AS <Ae|Ik> (Order Ak,eI)
C
        CALL GETLST(ICORE(IW),1,NUMSYW,1,IRREPR,LISTW)
C
C  TRANSPOSE FROM A,k ; e,I TO A,k ; I,e
C
        CALL SYMTR1(IRREPR,VRT(1,2),POP(1,1),DISSYW,ICORE(IW),
     &              ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYW),
     &              ICORE(ITMP+2*IINTFP*DISSYW))
C
C  (A,k;I,j)(R,L) <---- (A,k;I;e)(R,R) (e,i) (X)
C
        CALL DFINDT(ICORE(ID),ICORE(IW),UAIB,NUMSYD,DISSYD,
     &              DISSYW,NUMSYW,POP(1,1),VRT(1,2),POP(1,2),
     &              IRREPR,IRREPL,IRREPX,IOFFU(1,2),1)
C
C  TRANSPOSE THE TARGET LIST   A,k;I,j TO A,k;j,I
C
        CALL SYMTR1(IRREPL,POP(1,1),POP(1,2),NUMSYD,ICORE(ID),
     &              ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYD),
     &              ICORE(ITMP+2*IINTFP*NUMSYD))
C
C  NOW DO <Ak|Ej> U(EI)
C
        LISTW=25
        NUMSYW=IRPDPD(IRREPR,ISYTYP(2,LISTW))
        DISSYW=IRPDPD(IRREPR,ISYTYP(1,LISTW))
C
C  ALLOCATE CORE MEMORY
C
        ITMP=IW+IINTFP*NUMSYW*DISSYW
        IEND=ITMP+3*IINTFP*MAX(NUMSYW,DISSYW,DISSYD,NUMSYD)
C
        IF(IEND.GE.MXCOR) CALL ERREX
C
C  READ IN THE <Ak|Ej> as Ak;Ej
C
        CALL GETLST(ICORE(IW),1,NUMSYW,1,IRREPR,LISTW)
C
C  TRANSPOSE A,k; E,j TO A,k;j,E
C
        CALL SYMTR1(IRREPR,VRT(1,1),POP(1,2),DISSYW,ICORE(IW),
     &              ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYW),
     &              ICORE(ITMP+2*IINTFP*DISSYW))
C
C  (Ak;jI) (R,L) <----- (Ak;jE) (R,R) (E,I) (X)
C
        CALL DFINDT(ICORE(ID),ICORE(IW),UAIA,NUMSYD,DISSYD,
     &              DISSYW,NUMSYW,POP(1,2),VRT(1,1),POP(1,1),
     &              IRREPR,IRREPL,IRREPX,IOFFU(1,1),1)
C
        IF(STERM) THEN
C
C CALCULATE <Ak|Im> S(mj) AND <Ak|Mj> S(MI)
C
         LISTW=9
         NUMSYW=IRPDPD(IRREPR,ISYTYP(2,LISTW))
         DISSYW=IRPDPD(IRREPR,ISYTYP(1,LISTW))
         IW=ID+IINTFP*NUMSYD*DISSYD
         IW2=IW+IINTFP*NUMSYW*DISSYW
         IEND1=IW2+IINTFP*NUMSYW*DISSYW
         ITMP=IW2
         IEND2=ITMP+3*IINTFP*MAX(NUMSYW,DISSYW)
         IEND=MAX(IEND1,IEND2)
         IF(IEND.GE.MXCOR) CALL ERREX
C
         CALL GETLST(ICORE(IW2),1,NUMSYW,1,IRREPR,LISTW)
C
         CALL TRANSP(ICORE(IW2),ICORE(IW),NUMSYW,DISSYW)
         NUMTMP=NUMSYW
         NUMSYW=DISSYW
         DISSYW=NUMTMP
C
         CALL SYMTR1(IRREPL,POP(1,2),POP(1,1),NUMSYD,ICORE(ID),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYD),
     &               ICORE(ITMP+2*IINTFP*NUMSYD))
C
C  (Ak;Ij) (R,L) <----- (Ak;Im) (R,R) (m,j) (X)
C
        CALL DFINDT(ICORE(ID),ICORE(IW),SIJB,NUMSYD,DISSYD,
     &              DISSYW,NUMSYW,POP(1,1),POP(1,2),POP(1,2),
     &              IRREPR,IRREPL,IRREPX,IOFFS1(1,2),1)
C
C TRANSPOSE BOTH INTEGRAL AND TARGET ARRAY
C
         CALL SYMTR1(IRREPL,POP(1,1),POP(1,2),NUMSYD,ICORE(ID),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYD),
     &               ICORE(ITMP+2*IINTFP*NUMSYD))
C
         CALL SYMTR1(IRREPL,POP(1,1),POP(1,2),DISSYW,ICORE(IW),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYW),
     &               ICORE(ITMP+2*IINTFP*DISSYW))
C
C  (Ak;jI) (R,L) <----- (Ak;jM) (R,R) (MI) (X)
C
        CALL DFINDT(ICORE(ID),ICORE(IW),SIJA,NUMSYD,DISSYD,
     &              DISSYW,NUMSYW,POP(1,2),POP(1,1),POP(1,1),
     &              IRREPR,IRREPL,IRREPX,IOFFS1(1,1),1)
C
        ENDIF
C
C  TRANSPOSE TARGET LIST A,k; j,I TO A,k;I,j
C   
        CALL SYMTR1(IRREPL,POP(1,2),POP(1,1),NUMSYD,ICORE(ID),
     &              ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYD),
     &              ICORE(ITMP+2*IINTFP*NUMSYD)) 
C
C  TRANSPOSE TARGET LIST
C
        ID2=ID+NUMSYD*DISSYD*IINTFP
        IEND=ID2+IINTFP*NUMSYD*DISSYD
        IF(IEND.GE.MXCOR) CALL ERREX
C
        CALL TRANSP(ICORE(ID),ICORE(ID2),DISSYD,NUMSYD)
c YAU : old
c       CALL ICOPY(IINTFP*NUMSYD*DISSYD,ICORE(ID2),1,ICORE(ID),1)
c YAU : new
        CALL DCOPY(NUMSYD*DISSYD,ICORE(ID2),1,ICORE(ID),1)
c YAU : end
        IF(ANTI) CALL VMINUS(ICORE(ID),NUMSYD*DISSYD)
C
C S-TERMS : <Ij|Am> S(m,k) AND <Ij|Em> S(AE)
C
        IF(STERM) THEN
C
         LISTW=9
         NUMSYW=IRPDPD(IRREPL,ISYTYP(2,LISTW))
         DISSYW=IRPDPD(IRREPL,ISYTYP(1,LISTW))
C
         IW=ID+IINTFP*NUMSYD*DISSYD
         ITMP=IW+IINTFP*NUMSYW*DISSYW
         IEND=ITMP+3*IINTFP*MAX(NUMSYW,DISSYW)
         IF(IEND.GE.MXCOR) CALL ERREX
C 
         CALL GETLST(ICORE(IW),1,NUMSYW,1,IRREPL,LISTW)
C
C  (Ij,Ak) (L,R) <----- (Ij,Am) (L,L) (mk) (X)
C
        CALL DFINDT(ICORE(ID),ICORE(IW),SIJB,DISSYD,NUMSYD,
     &              DISSYW,NUMSYW,VRT(1,1),POP(1,2),POP(1,2),
     &              IRREPR,IRREPL,IRREPX,IOFFS1(1,2),1)
C
C TRANSPOSE TARGET AND INTEGRAL LIST 
C
        CALL SYMTR1(IRREPL,VRT(1,1),POP(1,2),DISSYW,ICORE(IW),
     &              ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYW),
     &              ICORE(ITMP+2*IINTFP*DISSYW))
C
        CALL SYMTR1(IRREPR,VRT(1,1),POP(1,2),DISSYD,ICORE(ID),
     &              ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYD),
     &              ICORE(ITMP+2*IINTFP*DISSYD))
C
C  (Ij,kA) (L,R) <----- (Ij,kE) (L,L) (EA) (X)
C
        CALL DFINDT(ICORE(ID),ICORE(IW),SABA,DISSYD,NUMSYD,
     &              DISSYW,NUMSYW,POP(1,2),VRT(1,1),VRT(1,1),
     &              IRREPR,IRREPL,IRREPX,IOFFS2(1,1),1)
C
C TRANSPOSE TARGET ARRAY BACK TO ORIGINAL ORDER 
C
        CALL SYMTR1(IRREPR,POP(1,2),VRT(1,1),DISSYD,ICORE(ID),
     &              ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYD),
     &              ICORE(ITMP+2*IINTFP*DISSYD))
C
        ENDIF
C
C NOW DEAL WITH THE RIGHT HAND SIDE
C
C  FIRST TERM    <Ij|Ae> U(ek)
C
       LISTW=16
       DISSYW=IRPDPD(IRREPL,ISYTYP(1,LISTW))
       NUMSYW=IRPDPD(IRREPL,ISYTYP(2,LISTW))
C
C ALLOCATE MEMORY
C
       ITMP=IW+IINTFP*NUMSYW*DISSYW
       IW2=ITMP
       IEND1=ITMP+3*IINTFP*MAX(NUMSYD,DISSYD,NUMSYW,DISSYW)
       IEND2=IW2+IINTFP*NUMSYW*DISSYW
       IEND=MAX(IEND1,IEND2)
       IF(IEND.GT.MXCOR) CALL ERREX
C
C READ IN <Ij|Ea> INTEGRALS
C
       CALL GETLST(ICORE(IW2),1,NUMSYW,1,IRREPL,LISTW)
C 
C TRANSPOSE INTEGRALS Ea,Ij TO Ij,Ea
C
       CALL TRANSP(ICORE(IW2),ICORE(IW),NUMSYW,DISSYW)
       NUMTMP=NUMSYW
       NUMSYW=DISSYW
       DISSYW=NUMTMP
C
C  (Ij,Ak) (L,R) <----- (Ij,Ae) (L,L) (e,i) (X)
C
       CALL DFINDT(ICORE(ID),ICORE(IW),UAIB,DISSYD,NUMSYD,
     &             DISSYW,NUMSYW,VRT(1,1),VRT(1,2),POP(1,2),
     &             IRREPL,IRREPR,IRREPX,IOFFU(1,2),1)
C
C  TRANSPOSE THE TARGET LIST : Ij,Ak TO Ij,kA
C
       CALL SYMTR1(IRREPR,VRT(1,1),POP(1,2),DISSYD,
     &             ICORE(ID),ICORE(ITMP),ICORE(ITMP+IINTFP
     &             *DISSYD),ICORE(ITMP+2*IINTFP*DISSYD))
C
C  NOW DO <Ij|Mk> U(MA)
C
       LISTW=13
       NUMSYW=IRPDPD(IRREPL,ISYTYP(2,LISTW))
       DISSYW=IRPDPD(IRREPL,ISYTYP(1,LISTW))
C
C  ALLOCATE MEMORY
C 
       ITMP=IW+IINTFP*NUMSYW*DISSYW
       IEND=ITMP+3*IINTFP*MAX(NUMSYW,DISSYW)
C
       IF(IEND.GT.MXCOR) CALL ERREX
C
C  READ IN THE <Ij|Mk>
C
        CALL GETLST(ICORE(IW),1,NUMSYW,1,IRREPL,LISTW)
C
C  TRANSPOSE INTEGRALS FROM Ij;Mk TO Ij;kM
C
        CALL SYMTR1(IRREPL,POP(1,1),POP(1,2),DISSYW,ICORE(IW),
     &              ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYW),
     &              ICORE(ITMP+2*IINTFP*DISSYW))
C
C  (Ij,kA) (L,R) <----- (Ij,kM) (L,L) (M,A) (X)
C
        CALL DFINDT(ICORE(ID),ICORE(IW),UIAA,DISSYD,NUMSYD,
     &              DISSYW,NUMSYW,POP(1,2),POP(1,1),VRT(1,1),
     &              IRREPL,IRREPR,IRREPX,IOFFU(1,1),2)
C
C TRANSPOSE TARGET LIST
C
        CALL SYMTR1(IRREPR,POP(1,2),VRT(1,1),DISSYD,ICORE(ID),
     &              ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYD),
     &              ICORE(ITMP+2*IINTFP*DISSYD))
C
       CALL PUTLST(ICORE(ID),1,NUMSYD,1,IRREPR,309)
       call checksum('D2IJAK',icore(Id),numsyd*dissyd)
1000  CONTINUE
C
C ALL DONE SO FAR
C
      RETURN
      END
