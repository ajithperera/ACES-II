      SUBROUTINE DINTRN5(EVEC,AODINT,BUF,RHF,NSTART,NEND,
     &                   IRREPX,ISPIN)
C
C THIS ROUTINE TRANSFORMS DERIVATIVE INTEGRALS FROM THE AO TO THE MO
C BASIS. THIS IS THE JIII VERSION.
C
CEND
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER DIRPRD,AOPOP,AODSZ,AODIS,POP,VRT
      LOGICAL RHF
      CHARACTER*2 SP
C
      DIMENSION AODINT(1),EVEC(1),BUF(1)
      DIMENSION NSTART(8),NEND(8)
      DIMENSION IREORD(8)
      DIMENSION SP(2)
C
      COMMON/SYM/POP(8,2),VRT(8,2),NDUM(6)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/SYMINF/NDUMMY,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON/AOPOPS/AOPOP(8)
      COMMON/AOOFST/INDOCC(8,2)
      COMMON/INFO/NOCCO(2),NVRTO(2)
      COMMON/INFOI/TIMEI,NWRITI
      COMMON /TIMEINFO/ TIMEIN, TIMENOW, TIMETOT, TIMENEW 
C
      DATA ONE/1.0D0/
      DATA ZILCH/0.0D0/
      DATA SP/'AA','BB'/
C
      CALL TIMER(1)
C
      IOFF1=1
      IOFF2=1
C
      DO 1000 IRREP1=1,NIRREP
C
       NSTART1=NSTART(IRREP1)
       NEND1=NEND(IRREP1)
C
       IRREP2=DIRPRD(IRREP1,IRREPX)
       IOFF4I=IOFF2
C
       NAO=AOPOP(IRREP2)
       NMO=AOPOP(IRREP2)
       AODSZ=NAO*NAO
       MODSZ=NMO*NMO     
       NUMDIS=NMO*(NEND1-NSTART1+1)
       IX=NAO*NAO+1
       IOFFC1=INDOCC(IRREP2,ISPIN)
C
C TRANSFORM THE LHS TO THE (ISPIN,ISPIN) SPIN CASE
C
C LOOP OVER (XX) BLOCKS ON LHS AND TRANSFORM THEM TO (PI)
C
       DO 20 IOCC=NSTART1,NEND1
        CALL XGEMM('T','N',NMO,AODSZ,NAO,ONE,EVEC(IOFFC1),
     &             NAO,AODINT(IOFF1),NAO,ZILCH,BUF,NMO)
        CALL TRANSP(BUF,AODINT(IOFF2),AODSZ,NMO)
        IOFF1=IOFF1+NAO*AODSZ
        IOFF2=IOFF2+NMO*AODSZ
20     CONTINUE
C
C NOW WE HAVE (PI,XX) INTEGRALS.  TRANSPOSE TO (XX,PI)
C
C TRANSFORM NEW LHS (XX) TO (PQ) [SPIN CASE (ISPIN,ISPIN)]
C
       IOFF5=IOFF4I
       IOFF6=IOFF4I
       DO 21 IDIS=1,NUMDIS
c YAU : old
c       CALL ICOPY(NAO*NAO*IINTFP,AODINT(IOFF5),1,BUF,1)
c YAU : new
        CALL DCOPY(NAO*NAO,AODINT(IOFF5),1,BUF,1)
c YAU : end
        CALL GHTRAN(BUF,BUF,EVEC,IOFFC1,IOFFC1,1,1,
     &              BUF(IX),0,1,NAO,NAO,NMO,NMO)
c YAU : old
c       CALL ICOPY(NMO*NMO*IINTFP,BUF,1,AODINT(IOFF6),1)
c YAU : new
        CALL DCOPY(NMO*NMO,BUF,1,AODINT(IOFF6),1)
c YAU : end
        IOFF5=IOFF5+AODSZ
        IOFF6=IOFF6+MODSZ
21     CONTINUE
C
C END LOOP OVER IRREPS
C
1001   CONTINUE
1000  CONTINUE
C
C ALLOCATE MEMORY FOR DUMP5
C
       IOFFBUF1=1
       DO 1010 IRREP=1,NIRREP
        IOFFBUF1=MAX(IOFFBUF1,1+AOPOP(IRREP)*AOPOP(IRREP)*
     &               AOPOP(IRREP))
1010   CONTINUE
C
       IOFFBUF2=IOFFBUF1
       DO 1020 IRREP=1,NIRREP
        IOFFBUF2=MAX(IOFFBUF2,IOFFBUF1+
     &               2*POP(IRREP,1)*POP(IRREP,1),
     &               IOFFBUF1+2*VRT(IRREP,1)*VRT(IRREP,1),
     &               IOFFBUF1+2*VRT(IRREP,1)*POP(IRREP,1))
1020   CONTINUE
C
       CALL DUMP5(AODINT,BUF,BUF(IOFFBUF1),BUF(IOFFBUF2),
     &            NSTART,NEND,IRREPX)
C
      CALL TIMER(1)
      TIMEI=TIMEI+TIMENEW
C
      RETURN
      END
