      SUBROUTINE D3IAJB(UAIA,UAIB,SIJA,SIJB,UIAA,UIAB,SABA,SABB,
     &                  ICORE,MXCOR,IRREPX,IPERT,IUHF,STERM)
C
C  THIS ROUTINE CALCULATES THE DERIVATIVE INTEGRALS d <Ia//Jb> / d chi
C
C   THERE ARE EIGHT DIFFERENT TERMS
C
C   DUE TO PERMUTATIONAL SYMMETRY THEY REDUCE TO FOUR
C      (<Ia||Jb> <--> <Jb||Ia>
C
CEND
C
C CODED SEP/91 JG UNIVERSITY OF KARLSRUHE
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INTEGER DIRPRD,DISSYW,DISSYD,POP,VRT
      LOGICAL FIELD,GEOM,ROHF,QRHF,SEMI,STERM
      DIMENSION ICORE(MXCOR) 
      DIMENSION UAIA(1),UAIB(1),UIAA(1),UIAB(1)
      DIMENSION SIJA(1),SIJB(1),SABA(1),SABB(1)
C
      COMMON/OFFSETS/IOFFU(8,2),IOFFS1(8,2),IOFFS2(8,2)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/SYMINF/NSTART,NIRREP,IRREPAA(255,2),DIRPRD(8,8)
      COMMON/SYM/POP(8,2),VRT(8,2),NT(2),NF1(2),NF2(2)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),NJUNK(18)
      COMMON/DTRAN/FIELD,GEOM,ROHF,QRHF,SEMI
C
      DATA AZERO,ONE /0.D0,1.D0/
C
C  INCORE ALGORITHM
C
C  LOOP OVER ALL IRREPS OF THE DERIVATIVE INTEGRALS
C
      DO 1000 IRREPR=1,NIRREP
C
C  THE IRREP ON THE LEFT SIDE IS THEN GIVEN AS THE DIRECT PRODUCT
C   OF IRREPP AND IRREPR
C
       IRREPL=DIRPRD(IRREPR,IRREPX)
C
C DETERMINE LENGTH OF TARGET ARRAY
C
       LISTD=326
       NUMSYD=IRPDPD(IRREPR,ISYTYP(2,LISTD))
       DISSYD=IRPDPD(IRREPL,ISYTYP(1,LISTD))
C
C ALLOCATE CORE FOR TARGET ARRAY
C
       ID=1
       IREST=ID+IINTFP*NUMSYD*DISSYD
C
C  ZERO TARGET LIST
C
        CALL ZERO(ICORE(ID),NUMSYD*DISSYD)
C
C FIRST TERM: 
C
C CONSIDER FIRST ALL TERMS WHICH INCLUDE U(IA)
C
C    <mI||bJ> U(ma) 
C
C  THE IRREP ON THE RIGHT SIDE IS UNCHANGED, SO IRREPR DETERMINES
C  THE LISTS OF ORIGINAL ZEROTH ORDER INTEGRALS
C
       LISTW=10
       NUMSYW=IRPDPD(IRREPR,ISYTYP(2,LISTW))
       DISSYW=IRPDPD(IRREPR,ISYTYP(1,LISTW))
C
C  ALLOCATE CORE MEMORY
C
       IW=IREST
       IW2=IW+IINTFP*NUMSYW*DISSYW
       ITMP=IW2
       IEND=IW2+IINTFP*NUMSYW*DISSYW
C
       IF(IEND.GE.MXCOR) CALL ERREX
C
C  READ IN THE <Im||Jb> AS  Im,Jb 
C
        CALL GETLST(ICORE(IW2),1,NUMSYW,1,IRREPR,LISTW)
C
C TRANSPOSE Im,Jb TO Jb, Im 
C
        CALL TRANSP(ICORE(IW2),ICORE(IW),NUMSYW,DISSYW)
C
C  (Jb,Ia) (R,L) <------ (Jb,Im) (R,R) (a,m) (X) (UHF)
C
        CALL DFINDT(ICORE(ID),ICORE(IW),UIAB,NUMSYD,DISSYD,
     &              NUMSYW,DISSYW,POP(1,1),POP(1,2),
     &              VRT(1,2),IRREPR,IRREPL,IRREPX,
     &              IOFFU(1,2),2)
C
C  TRANSPOSE THE TARGET LIST   
C
C   Jb,Ia TO Jb,aI
C   jB,iA TO jB,Ai
C
        CALL SYMTR1(IRREPL,POP(1,1),VRT(1,2),NUMSYD,
     &              ICORE(ID),ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYD),
     &              ICORE(ITMP+2*IINTFP*NUMSYD))
C
C TRANSPOSE ALSO jB,Ai TO Bj,AI
C
         CALL SYMTR3(IRREPR,POP(1,1),VRT(1,2),NUMSYD,DISSYD,
     &               ICORE(ID),ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYD),
     &               ICORE(ITMP+2*IINTFP*DISSYD))
C
C SECOND TERM:
C  
C  NOW DO <bJ||aE> U(E,I)
C
        LISTW=29
        NUMSYW=IRPDPD(IRREPR,ISYTYP(2,LISTW))
        DISSYW=IRPDPD(IRREPR,ISYTYP(1,LISTW))
C
C  ALLOCATE CORE MEMORY
C
        IW=IREST
        IW2=IW+IINTFP*NUMSYW*DISSYW
        ITMP=IW2
        IEND=IW+IINTFP*NUMSYW*DISSYW
C
        IF(IEND.GE.MXCOR) CALL ERREX
C
C  READ IN THE <aE||bJ> Ea,Jb
C
        CALL GETLST(ICORE(IW2),1,NUMSYW,1,IRREPR,LISTW)
C
C  TRANSPOSE FROM Ea,Jb TO Jb,Ea
C
        CALL TRANSP(ICORE(IW2),ICORE(IW),NUMSYW,DISSYW)
C
C  TRANSPOSE FROM Jb,Ea TO bJ,Ea
C
        CALL SYMTR3(IRREPR,POP(1,1),VRT(1,2),DISSYW,NUMSYW,
     &              ICORE(IW2),ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYW),
     &              ICORE(ITMP+2*IINTFP*DISSYW))
C
C  TRANSPOSE FROM bJ,Ea TO bJ,aE
C
        CALL SYMTR1(IRREPR,VRT(1,1),VRT(1,2),NUMSYW,
     &              ICORE(IW),ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYW),
     &              ICORE(ITMP+2*IINTFP*NUMSYW))
C
C  (bJ;aE) (R,L) <----- (bJ;aE) (R,R) (E,I) (X)
C
        CALL DFINDT(ICORE(ID),ICORE(IW),UAIA,NUMSYD,DISSYD,
     &              NUMSYW,DISSYW,VRT(1,2),VRT(1,1),POP(1,1),
     &              IRREPR,IRREPL,IRREPX,IOFFU(1,1),1)
C
        IF(STERM) THEN
C
C THIRD TERM:
C
C CONSIDER FIRST ALL TERMS WHICH INCLUDE S(AE)
C
C    <bJ|aM> (-1/2 S(MI))
C
C  THE IRREP ON THE RIGHT SIDE IS UNCHANGED, SO IRREPR DETERMINES
C  THE LISTS OF ORIGINAL ZEROTH ORDER INTEGRALS
C
         LISTW=26
         NUMSYW=IRPDPD(IRREPR,ISYTYP(2,LISTW))
         DISSYW=IRPDPD(IRREPR,ISYTYP(1,LISTW))
C
C  ALLOCATE CORE MEMORY
C
         IEND=IW+IINTFP*NUMSYW*DISSYW
C
         IF(IEND.GE.MXCOR) CALL ERREX
C
C  READ IN THE <bJ||aM> AS bJ,aM
C
         CALL GETLST(ICORE(IW),1,NUMSYW,1,IRREPR,LISTW)
C
C  (bJ;aM) (R,L) <----- (bJ;aM) (R,R) (MI) (X)
C
         CALL DFINDT(ICORE(ID),ICORE(IW),SIJA,NUMSYD,DISSYD,
     &               DISSYW,NUMSYW,VRT(1,2),POP(1,1),POP(1,1),
     &               IRREPR,IRREPL,IRREPX,IOFFS1(1,1),1)
C
C  TRANSPOSE THE TARGET LIST    bJ;aI --> bJ,aI
C
         CALL SYMTR1(IRREPL,VRT(1,2),POP(1,1),NUMSYD,ICORE(ID),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYD),
     &               ICORE(ITMP+2*IINTFP*NUMSYD))
C
C TRANSPOSE THE INTEGRAL LIST
C
         CALL SYMTR1(IRREPR,VRT(1,2),POP(1,1),DISSYW,ICORE(IW),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*DISSYW),
     &               ICORE(ITMP+2*IINTFP*DISSYW))
C
C  (bJ;Ia) (R,L) <----- (bJ;Ie) (R,R) (ea) (X)
C
         CALL DFINDT(ICORE(ID),ICORE(IW),SABB,NUMSYD,DISSYD,
     &               DISSYW,NUMSYW,POP(1,1),VRT(1,2),VRT(1,2),
     &               IRREPR,IRREPL,IRREPX,IOFFS2(1,2),1)
C
C
C  TRANSPOSE THE TARGET LIST    bJ;Ia --> bJ,aI
C
         CALL SYMTR1(IRREPL,POP(1,1),VRT(1,2),NUMSYD,ICORE(ID),
     &               ICORE(ITMP),ICORE(ITMP+IINTFP*NUMSYD),
     &               ICORE(ITMP+2*IINTFP*NUMSYD))
C
        ENDIF 
C
C ALL DONE, SAVE THE INTEGRAL DERIVATIVES ON DISK
C HOWEVER, EACH CONTRIBUTION HAS TO BE ADDED TWICE TO THE
C CORRESPONDING INTEGRAL DERIVATIVES
C
C  FIRST, WE HAVE TO ADD    (R,L) TYPES WITH DERIVATIVES TAKEN
C  WITH RESPECT TO THE LEFT SIDE
C  SECOND WE HAVE TO TRANSPOSE THE WHOLE STUFF AND HAVE TO
C  ADD IT TO THOSE DERIVATIVES WHERE IT CORRESPONDS TO 
C  THE DERIVATIVES TAKEN WITh RESPECT TO THE LEFT SIDE
C
C  IRREPR LT IRREPL (MEANING FIRST CONTRIBUTION) AND NOT STERM,
C  INITIALIZE LIST, OTHERWISE UPDATE
C
        IF((IRREPR.GE.IRREPL).OR.STERM) THEN
C
C UPDATE
C
         ID2=IREST
         IEND=ID2+IINTFP*NUMSYD*DISSYD
         IF(IEND.GE.MXCOR) CALL ERREX
C
C GET INTEGRAL DERIVATIVES FROM DISK
C
         CALL GETLST(ICORE(ID2),1,DISSYD,1,IRREPL,LISTD)
C
         CALL SAXPY(NUMSYD*DISSYD,ONE,ICORE(ID),1,ICORE(ID2),1)
C
         CALL PUTLST(ICORE(ID2),1,DISSYD,1,IRREPL,LISTD)
C
        ELSE  
C
C INITIALIZE
C
         CALL PUTLST(ICORE(ID),1,DISSYD,1,IRREPL,LISTD)
C
        ENDIF
C 
C  TRANSPOSE TARGET LIST
C
        ID2=IREST
        IEND=ID2+IINTFP*NUMSYD*DISSYD
        IF(IEND.GE.MXCOR) CALL ERREX
C
        CALL TRANSP(ICORE(ID),ICORE(ID2),DISSYD,NUMSYD)
C
        IF((IRREPR.GT.IRREPL).OR.STERM) THEN
C
C UPDATE
C
         CALL GETLST(ICORE(ID),1,NUMSYD,1,IRREPR,LISTD)
C
         CALL SAXPY(NUMSYD*DISSYD,ONE,ICORE(ID2),1,ICORE(ID),1)
C
         CALL PUTLST(ICORE(ID),1,NUMSYD,1,IRREPR,LISTD)
C
        ELSE
C
C INITIALIZE
C
         CALL PUTLST(ICORE(ID2),1,NUMSYD,1,IRREPR,LISTD)
C
        ENDIF
C
1000  CONTINUE
C
C ALL DONE SO FAR
C
      RETURN
      END
