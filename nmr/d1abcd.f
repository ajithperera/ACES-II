      SUBROUTINE D1ABCD(UIA,SAB,ICORE,MXCOR,IRREPX,
     &                  IPERT,ISPIN,STERM,ANTI)
C
C  THIS ROUTINE CALCULATES THE DERIVATIVE INTEGRALS d <AB||CD> / d chi
C
C   THERE ARE TWO DIFFERENT TERMS
C
CEND
C
C CODED AUG/91  JG
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INTEGER DIRPRD,DISSYW,DISSYD,POP,VRT
      LOGICAL FIELD,GEOM,ROHF,QRHF,SEMI,STERM,ANTI
      DIMENSION ICORE(MXCOR) 
      DIMENSION UIA(1),SAB(1)
C
      COMMON/OFFSETS/IOFFU(8,2),IOFFS1(8,2),IOFFS2(8,2)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/SYMINF/NSTART,NIRREP,IRREPAA(255,2),DIRPRD(8,8)
      COMMON/SYM/POP(8,2),VRT(8,2),NT(2),NF1(2),NF2(2)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),NJUNK(18)
      COMMON/DTRAN/FIELD,GEOM,ROHF,QRHF,SEMI
C
      DATA AZERO,ONE /0.D0,1.D0/
C
C  INCORE ALGORITHM
C
C  DO HERE ALPHA,BETA SPIN CASE
C
C  LOOP OVER ALL IRREPS OF THE DERIVATIVE INTEGRALS
C
      DO 1000 IRREPR=1,NIRREP
C
C  THE IRREP ON THE LEFT SIDE IS THEN GIVEN AS THE DIRECT PRODUCT
C   OF IRREPP AND IRREPR
C
       IRREPL=DIRPRD(IRREPR,IRREPX)
C
C DETERMINE LENGTH OF TARGET ARRAY
C
       NUMSYD=IRPDPD(IRREPR,ISYTYP(2,230+ISPIN))
       DISSYD=IRPDPD(IRREPL,ISYTYP(1,230+ISPIN))
C
C DETERMINE FULL SIZE OF OCC-OCC BLOCK
C
       NVSQR=0
       NVSQL=0
       DO 1 IRREP=1,NIRREP
        NVSQR=NVSQR+VRT(IRREP,ISPIN)*VRT(DIRPRD(IRREP,IRREPR),ISPIN)
        NVSQL=NVSQL+VRT(IRREP,ISPIN)*VRT(DIRPRD(IRREP,IRREPL),ISPIN)
1      CONTINUE
C
C ALLOCATE CORE FOR TARGET ARRAY
C
       ID=1
       IREST=ID+IINTFP*DISSYD*NVSQR
C
C  ZERO TARGET LIST
C
        CALL ZERO(ICORE(ID),DISSYD*NVSQR)
C
C CONSIDER FIRST ALL TERMS WHICH INCLUDE U(AI)
C
C    <AB||CM> U(MD) + <IJ||MD> U(MC)
C
C  THE IRREP ON THE LEFT SIDE IS UNCHANGED, SO IRREPL DETERMINES
C  THE LISTS OF ORIGINAL ZEROTH ORDER INTEGRALS
C
       LISTW=26+ISPIN
       NUMSYW=IRPDPD(IRREPL,ISYTYP(2,LISTW))
       DISSYW=IRPDPD(IRREPL,ISYTYP(1,LISTW))
C
C  ALLOCATE CORE MEMORY
C
       IW=IREST
       IEND=IW+IINTFP*NUMSYW*DISSYW
C
       IF(IEND.GE.MXCOR) CALL INSMEM('D1ABCD',IEND,MXCOR)
C
C  READ IN THE <AB||CM> 
C
        CALL GETLST(ICORE(IW),1,NUMSYW,1,IRREPL,LISTW)
C
C  (AB;CD)(L,R) <---- (AB;CM)(L,L) (MD) (X)
C
        CALL DFINDT(ICORE(ID),ICORE(IW),UIA,DISSYD,NVSQR,
     &              DISSYW,NUMSYW,VRT(1,ISPIN),POP(1,ISPIN),
     &              VRT(1,ISPIN),IRREPL,IRREPR,IRREPX,
     &              IOFFU(1,ISPIN),2)
C
        IF(STERM) THEN
C
C CONSIDER  TERMS WHICH INCLUDE S(AE)
C
C    <AB||CE> (-1/2 S(ED)) + <AB||ED> (-1/2 S(EC))
C
C  THE IRREP ON THE LEFT SIDE IS UNCHANGED, SO IRREPL DETERMINES
C  THE LISTS OF ORIGINAL ZEROTH ORDER INTEGRALS
C
         LISTW=230+ISPIN
         NUMSYW=IRPDPD(IRREPL,ISYTYP(2,LISTW))
         DISSYW=IRPDPD(IRREPL,ISYTYP(1,LISTW))
C
C  ALLOCATE CORE MEMORY
C
         IW=IREST
         IEND=IW+IINTFP*DISSYW*NVSQL
C
         IF(IEND.GE.MXCOR) CALL INSMEM('D1ABCD2',IEND,MXCOR)
C
C  READ IN THE <AB||CD> INTEGRALS
C
         CALL GETLST(ICORE(IW),1,NUMSYW,1,IRREPL,LISTW)
C
C EXPAND THE RIGHT HAND SIDE:   A<B;C<D --> A<B;CD
C
         CALL SYMEXP(IRREPL,VRT(1,ISPIN),DISSYW,ICORE(IW))
C
C   (AB;CD) (L,R) <----- (AB,CE) (L,L) (E,D) (X)
C
          CALL DFINDT(ICORE(ID),ICORE(IW),SAB,DISSYD,NVSQR,
     &                DISSYW,NVSQL,VRT(1,ISPIN),VRT(1,ISPIN),
     &                VRT(1,ISPIN),IRREPL,IRREPR,IRREPX,
     &                IOFFS2(1,ISPIN),1)
        ENDIF 
C
C ANTISYMMETRIZE THE INTEGRAL DERIVATIVES 
C
       ID2=IREST  
       IEND=ID2+IINTFP*DISSYD*NUMSYD
C
       IF(IEND.GT.MXCOR) CALL INSMEM('D1ABCD3',IEND,MXCOR)
C
       CALL ASSYM(IRREPR,VRT(1,ISPIN),DISSYD,DISSYD,ICORE(ID2),
     &            ICORE(ID))
C
C  SYMMETRIZE THE INTEGRAL DERIVATIVES
C
c       CALL DSYMMET1(IRREPX,ICORE(ID2),IRPDPD(1,ISYTYP(1,230+ISPIN)))
C
       
       call checksum('D1ABCD',icore(Id2),numsyd*dissyd)
c
c        if(sterm)then
c        call getlst(icore(iend),(ipert-1)*numsyd+1,numsyd,
c     &                2,1,330+ispin)
c        open(unit=16,form='formatted')
c        read(16,'((3f20.10))')(icore(iend-1+j),j=1,numsyd*dissyd)
c        call saxpy(numsyd*dissyd,one,icore(iend),1,icore(id2),1)
c        call scopy(numsyd*dissyd,icore(iend),1,icore(id),1)
c        close(unit=16,status='keep')
c        endif
c
c       CALL PUTLST(ICORE(ID2),(IPERT-1)*NUMSYD+1,NUMSYD,1,
c     &             IRREPR,330+ispin)
1000  CONTINUE
C
C ALL DONE SO FAR
C
      RETURN
      END
