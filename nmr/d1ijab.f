

      SUBROUTINE D1IJAB(UAI,SIJ,UIA,SAB,ICORE,MXCOR,
     &                  IRREPX,IPERT,ISPIN,STERM,ANTI,GRAD1)
C
C  THIS ROUTINE CALCULATES THE DERIVATIVE INTEGRALS d <IJ//AB> / d chi
C
C   THERE ARE EIGHT DIFFERENT TERMS
C
CEND
C
C CODED JAN/91  JG
C
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INTEGER DIRPRD,DISSYW,DISSYD,POP,VRT
      LOGICAL STERM,ANTI
      DIMENSION ICORE(MXCOR) 
      DIMENSION UAI(1),UIA(1),SIJ(1),SAB(1)
C
      COMMON/OFFSETS/IOFFU(8,2),IOFFS1(8,2),IOFFS2(8,2)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/SYMINF/NSTART,NIRREP,IRREPAA(255,2),DIRPRD(8,8)
      COMMON/SYM/POP(8,2),VRT(8,2),NT(2),NF1(2),NF2(2)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),NJUNK(18)
C
      DATA AZERO,HALF,HALFM,ONE /0.D0,0.5D0,-0.5D0,1.D0/
C
C  INCORE ALGORITHM
C
C  DO HERE ALPHA,ALPHA (BETA,BETA) SPIN CASE
C
C  LOOP OVER ALL IRREPS OF THE DERIVATIVE INTEGRALS
C
      DO 1000 IRREPR=1,NIRREP
C
C  THE IRREP ON THE LEFT SIDE IS THEN GIVEN AS THE DIRECT PRODUCT
C   OF IRREPP AND IRREPR
C
       IRREPL=DIRPRD(IRREPR,IRREPX)
C
       NUMSYD=IRPDPD(IRREPR,ISYTYP(2,13+ISPIN))
       DISSYD=IRPDPD(IRREPL,ISYTYP(1,13+ISPIN))
C
       ID=1
C
C DETERMINE FULL SIZE OF BOTH SIDES
C
       NVSQR=0
       NVSQL=0
       NOSQR=0
       NOSQL=0
       DO 1 IRREP=1,NIRREP
        NVSQL=NVSQL+VRT(IRREP,ISPIN)*VRT(DIRPRD(IRREPL,IRREP),ISPIN)
        NVSQR=NVSQR+VRT(IRREP,ISPIN)*VRT(DIRPRD(IRREPR,IRREP),ISPIN)
        NOSQR=NOSQR+POP(IRREP,ISPIN)*POP(DIRPRD(IRREPR,IRREP),ISPIN)
        NOSQL=NOSQL+POP(IRREP,ISPIN)*POP(DIRPRD(IRREPL,IRREP),ISPIN)
1      CONTINUE
C
C CONSIDER FIRST ALL TERMS WHICH INCLUDE U(AI)
C
C    <IJ//KB> U(KA) + <IJ//AK> U(KB)
C
C  THE IRREP ON THE RIGHT SIDE IS UNCHANGED, SO IRREPR DETERMINES
C  THE LISTS OF ORIGINAL ZEROTH ORDER INTEGRALS
C
       LISTW=6+ISPIN
       NUMSYW=IRPDPD(IRREPR,ISYTYP(2,LISTW))
       DISSYW=IRPDPD(IRREPR,ISYTYP(1,LISTW))
C
C  ALLOCATE CORE MEMORY
C
       IW=ID+IINTFP*NUMSYD*NVSQL
       ITMP=IW+IINTFP*NUMSYW*DISSYW
       IEND=ITMP+3*IINTFP*MAX(NUMSYW,DISSYW,NUMSYD,DISSYD)
C
       IF(IEND.GE.MXCOR) CALL INSMEM('D1IJAB1',IEND,MXCOR)
C
C  READ IN THE <IJ//MB> AS <IJ//MB>
C
        CALL GETLST(ICORE(IW),1,NUMSYW,1,IRREPR,LISTW) 
C
        CALL VMINUS(ICORE(IW),NUMSYW*DISSYW)
C 
C  TRANSPOSE THE LAST TWO INDICES :   IJ;MB ---> IJ;BM
C
        CALL SYMTR1(IRREPR,POP(1,ISPIN),VRT(1,ISPIN),
     &              DISSYW,ICORE(IW),ICORE(ITMP),
     &              ICORE(ITMP+IINTFP*DISSYW),
     &              ICORE(ITMP+2*IINTFP*DISSYW))
C
C  ZERO TARGET LIST
C
        CALL ZERO(ICORE(ID),NUMSYD*NVSQL)
C
C  (IJ;BA)(R,L) <---- (IJ;BM)(R,R) (A,M) (X)
C
        CALL DFINDT(ICORE(ID),ICORE(IW),UIA,NUMSYD,NVSQL,
     &              DISSYW,NUMSYW,VRT(1,ISPIN),POP(1,ISPIN),
     &              VRT(1,ISPIN),IRREPR,IRREPL,IRREPX,
     &              IOFFU(1,ISPIN),2)
C
        IF(STERM) THEN
C
C CONSIDER ALL TERMS WHICH INCLUDE S(AE)
C
C    <IJ//EB> (-1/2 S(AE))
C
C  THE IRREP ON THE RIGHT SIDE IS UNCHANGED, SO IRREPR DETERMINES
C  THE LISTS OF ORIGINAL ZEROTH ORDER INTEGRALS
C
         LISTW=13+ISPIN
         NUMSYW=IRPDPD(IRREPR,ISYTYP(2,LISTW))
         DISSYW=IRPDPD(IRREPR,ISYTYP(1,LISTW))
C
C  ALLOCATE CORE MEMORY
C
         IW=ID+IINTFP*NUMSYD*NVSQL
         IW2=IW+IINTFP*NUMSYW*DISSYW
         IEND=IW2+IINTFP*NUMSYW*DISSYW
C
         IF(MXCOR.LE.IEND) CALL INSMEM('D1IJAB2',IEND,MXCOR)
C
C  READ IN THE <Ij//Eb> AS <Ij//Eb>
C
         CALL GETLST(ICORE(IW2),1,NUMSYW,1,IRREPR,LISTW)
C
C  TRANSPOSE <Ij//Eb>    (Eb;Ij) --> (Ij;Eb)
C
         CALL TRANSP(ICORE(IW2),ICORE(IW),NUMSYW,DISSYW)
C
         NUMTMP=NUMSYW
         NUMSYW=DISSYW
         DISSYW=NUMTMP 
C
         CALL SYMEXP(IRREPR,VRT(1,ISPIN),DISSYW,ICORE(IW))
C
C  (IJ;BA) (R,L) <----- (IJ;BE) (R,R) (E,A) (X)
C
         CALL DFINDT(ICORE(ID),ICORE(IW),SAB,NUMSYD,NVSQL,
     &               DISSYW,NVSQR,VRT(1,ISPIN),VRT(1,ISPIN),
     &               VRT(1,ISPIN),IRREPR,IRREPL,IRREPX,
     &               IOFFS2(1,ISPIN),1)
C
        ENDIF
C
C  TRANSPOSE TARGET LIST
C
        ID2=ID+NUMSYD*NVSQL*IINTFP
        IEND=ID2+IINTFP*NUMSYD*DISSYD
        IF(IEND.GE.MXCOR) CALL INSMEM('D1IJAB3',IEND,MXCOR)
C
        CALL ASSYM(IRREPL,VRT(1,ISPIN),NUMSYD,NUMSYD,ICORE(ID2),
     &             ICORE(ID))
C
      call checksum('d1ijab',icore(id2),numsyd*dissyd)
        CALL TRANSP(ICORE(ID2),ICORE(ID),DISSYD,NUMSYD)
c        go to 1234
c        call zero(icore(id),numsyd*dissyd)
C
        IF(.NOT.ANTI) THEN
         CALL SSCAL(NUMSYD*DISSYD,HALF,ICORE(ID),1)
        ELSE
         CALL SSCAL(NUMSYD*DISSYD,HALFM,ICORE(ID),1)
        ENDIF
C
      call checksum('d1ijab',icore(id),numsyd*dissyd)
        CALL SYMEXP(IRREPR,POP(1,ISPIN),DISSYD,ICORE(ID))
C
C NEW ADDRESS FOR INTEGRALS
C
        IW=ID+IINTFP*DISSYD*NOSQR
C
C FOR GEOMETRICAL PERTURBATIONS, DEAL FIRST WITH THE S-TERMS
C
        IF(STERM) THEN
C
         NUMSYW=IRPDPD(IRREPL,ISYTYP(2,LISTW))
         DISSYW=IRPDPD(IRREPL,ISYTYP(1,LISTW))
C
         IEND=IW+IINTFP*DISSYW*NOSQL
C
         CALL GETLST(ICORE(IW),1,NUMSYW,1,IRREPL,LISTW)
         CALL SYMEXP(IRREPL,POP(1,ISPIN),DISSYW,ICORE(IW))
C
C   (Ab;Ij) (L,R) <----- (Ab;Im) (L,L) S(m,j) (X)
C
         CALL DFINDT(ICORE(ID),ICORE(IW),SIJ,DISSYD,NOSQR,DISSYW,
     &               NOSQL,POP(1,ISPIN),POP(1,ISPIN),POP(1,ISPIN),
     &               IRREPL,IRREPR,IRREPX,IOFFS1(1,ISPIN),1)
C
       ENDIF
C
C NOW DEAL WITH THE RIGHT HAND SIDE
C
C  TERM    <AB|EJ> U(E,I)
C
       LISTW=26+ISPIN
       DISSYW=IRPDPD(IRREPL,ISYTYP(1,LISTW))
       NUMSYW=IRPDPD(IRREPL,ISYTYP(2,LISTW))
C
C ALLOCATE MEMORY
C
       ITMP=IW+IINTFP*NUMSYW*DISSYW
       IEND=ITMP+3*IINTFP*MAX(NUMSYD,DISSYD,NUMSYW,DISSYW)
       IF(IEND.GT.MXCOR) CALL INSMEM('D1IJAB4',IEND,MXCOR)
C
C READ IN <AB|EJ> INTEGRALS
C
       CALL GETLST(ICORE(IW),1,NUMSYW,1,IRREPL,LISTW)
C 
       CALL VMINUS(ICORE(IW),NUMSYW*DISSYW)
C 
C TRANSPOSE LAST TWO INDICES
C
       CALL SYMTR1(IRREPL,VRT(1,ISPIN),POP(1,ISPIN),DISSYW,
     &             ICORE(IW),ICORE(ITMP),
     &             ICORE(ITMP+IINTFP*DISSYW),
     &             ICORE(ITMP+2*IINTFP*DISSYW))
C
C  (AB;JI) (L,R) <----- (AB,JE) (L,L) (E,I) (X)
C
       CALL DFINDT(ICORE(ID),ICORE(IW),UAI,DISSYD,NOSQR,
     &             DISSYW,NUMSYW,POP(1,ISPIN),VRT(1,ISPIN),
     &             POP(1,ISPIN),IRREPL,IRREPR,IRREPX,
     &             IOFFU(1,ISPIN),1)
C
       ID2=ID+IINTFP*DISSYD*NOSQR
       IEND=ID2+IINTFP*NUMSYD*DISSYD
       IF(IEND.GT.MXCOR) CALL INSMEM('D1IJAB5',IEND,MXCOR)
C
       CALL ASSYM(IRREPR,POP(1,ISPIN),DISSYD,DISSYD,ICORE(ID2),
     &            ICORE(ID))
C
c1234  continue
c      call icopy(numsyd*dissyd,icore(id),1,icore(id2),1)
      call checksum('d1ijab',icore(id2),numsyd*dissyd)
      IF(IRREPR.EQ.IRREPL) THEN
       IW=ID
       CALL GETLST(ICORE(IW),1,NUMSYD,1,IRREPR,43+ISPIN)
       GRAD1=GRAD1+SDOT(NUMSYD*DISSYD,ICORE(IW),1,ICORE(ID2),1)
       write(*,*) grad1, ' after irrerp', irrepr,' for ', ipert
      ENDIF
C
      LISTDT=313+ISPIN
      CALL PUTLST(ICORE(ID2),1,NUMSYD,1,
     &            IRREPR,LISTDT)
1000  CONTINUE
C
C ALL DONE SO FAR
C
      RETURN
      END
