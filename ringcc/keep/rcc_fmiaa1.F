      SUBROUTINE RCC_FMIAA1(T2,Z2,FMI,POP,VRT,NOCCSQ,DISSYT,DISSYZ,
     &                  NUMSYT,NUMSYZ,NFSIZ,LISTT,LISTZ,IRREP,TMP)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      INTEGER DISSYT,DISSYZ,DIRPRD,POP
      LOGICAL MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC,
     &            CC2,RCCD,DRCCD
      DIMENSION T2(DISSYT,NOCCSQ),Z2(DISSYZ,NOCCSQ),FMI(NFSIZ)
      DIMENSION TMP(1),POP(8),VRT(8)
C
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),
     &                DIRPRD(8,8)
      COMMON/METH/MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC,
     &            CC2,RCCD,DRCCD
C
      DATA AZERO,ONE,ONEM /0.0D0,1.0D0,-1.0D0/
C
C   GET T2  AMPLITUDES
C
      CALL GETLST(T2,1,NUMSYT,2,IRREP,LISTT)
      IF (.NOT. (DRCCD .OR. RCCD)) THEN
         CALL SYMEXP(IRREP,POP,DISSYT,T2)
      ENDIF 
      CALL ZERO(Z2,DISSYZ*NOCCSQ)
C
C   PERFORM MULTIPLICATION
C
      JOFF=1     
      IOFF=1
      DO 90 IRREPJ=1,NIRREP
C
       NOCCJ=POP(IRREPJ)
C
       IF(NOCCJ.EQ.0) GO TO 90
C
       IRREPI=DIRPRD(IRREPJ,IRREP)
C
       NOCCI=POP(IRREPI)
C
       IF(NOCCI.EQ.0) GO TO 80 
C
       CALL XGEMM('N','N',DISSYT*NOCCI,NOCCJ,NOCCJ,ONEM,T2(1,JOFF), 
     &            NOCCI*DISSYT,FMI(IOFF),NOCCJ,
     &            AZERO,Z2(1,JOFF),NOCCI*DISSYZ)
C
       JOFF=JOFF+NOCCJ*NOCCI
80     CONTINUE
       IOFF=IOFF+NOCCJ*NOCCJ
90    CONTINUE
C
      IF (.NOT. (DRCCD .OR. RCCD)) THEN
      CALL ASSYM(IRREP,POP,DISSYZ,DISSYZ,T2,Z2) 
      CALL GETLST(Z2,1,NUMSYZ,1,IRREP,LISTZ)
      CALL VADD(Z2,Z2,T2,NUMSYZ*DISSYZ,ONE)
      CALL PUTLST(Z2,1,NUMSYZ,1,IRREP,LISTZ)
      ELSE
      CALL DCOPY(NUMSYZ*DISSYZ,Z2,1,T2,1)
      CALL GETLST(Z2,1,NUMSYZ,1,IRREP,LISTZ)
#ifdef _DEBUG_LVL0
      write(6,*) "@-rcc_fmiaa"
      call checksum("z2old:",z2,NUMSYZ*DISSYZ)
      call checksum("z2add:",t2,NUMSYZ*DISSYZ)
#endif 
      CALL VADD(Z2,Z2,T2,NUMSYZ*DISSYZ,ONE)
      CALL SYMTR1(IRREP,POP,POP,DISSYZ,T2,TMP,TMP(1+DISSYZ),
     &            TMP(1+2*DISSYZ))
      CALL SYMTR3(IRREP,VRT,VRT,DISSYZ,NUMSYZ,T2,TMP,
     &            TMP(1+NUMSYZ),TMP(1+2*NUMSYZ))
     
      call checksum("z2add:",t2,NUMSYZ*DISSYZ)

      CALL VADD(Z2,Z2,T2,NUMSYZ*DISSYZ,ONE)
      CALL PUTLST(Z2,1,NUMSYZ,1,IRREP,LISTZ)
      ENDIF 

      RETURN
      END
