      SUBROUTINE RCC_FIJ_INT2(ICORE,MAXCOR,IUHF)
C
C     ARGUMENTS IN CALL ICORE,MAXCOR,IUHF
C
C THIS PROGRAM CALCULATES THE TERM
C
C  P(IJ) SUM M T(IM,EF) F(MJ)
C
C SYMMETRY ADAPTED 
C 
C
C IN RHF :
C
C - SUM m T(Im,Ab) F(mj) + SUM M T(Mj,Ab) F(MJ)
C
C IN UHF
C
C - SUM M T(IM,AB) F(MJ) + SUM M T(MJ,AB) F(MI)
C
C - SUM m T(Im,Ab) F(mj) + SUM M T(Mj,Ab) F(MI)
C
C - SUM m T(im,ab) F(mj) + SUM m T(mj,ab) F(mi)
C
CEND
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER DIRPRD,DISSYT,DISSYZ,POP,VRT
      DIMENSION ICORE(MAXCOR)
      LOGICAL MBBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC,
     &            CC2,RCCD,DRCCD
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWO  
      COMMON /SYM/ POP(8,2),VRT(8,2),NTAA,NTBB,
     &             NF1AA,NF1BB,NF2AA,NF2BB
      COMMON /INFO/ NOCCO(2),NVRTO(2)
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),
     &DIRPRD(8,8)
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),NTOT(18)
      COMMON /FLAGS/IFLAGS(100)
      COMMON /LINEAR/ LINCC,CICALC
      COMMON/METH/MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC,
     &            CC2,RCCD,DRCCD
  
C
      EQUIVALENCE(METHOD,IFLAGS(2))
C
      DATA ONE,ONEM,HALF/1.0D0,-1.0D0,0.5D0/
C
C   CALCULATE SIZE OF F(M,I) ARRAY
C
      NFAA=NF1AA
      NFBB=NF1BB
      I0AA=MAXCOR+1-NFAA*IINTFP 
      MXCOR=MAXCOR-NFAA*IINTFP
      IF(IUHF.EQ.0) THEN
       I0BB=I0AA
      ELSE
       I0BB=I0AA-NFBB*IINTFP
       MXCOR=MXCOR-NFBB*IINTFP
      ENDIF
      CALL GETLST(ICORE(I0AA),1,1,1,1,91)
      IF(IUHF.EQ.1) THEN
       CALL GETLST(ICORE(I0BB),1,1,1,2,91)
      ENDIF
     
C     AA AND BB SPIN CASES
C
      IF(IUHF.EQ.1) THEN
C
C
       DO 100 ISPIN=1,2
C
        IF(ISPIN.EQ.1) THEN
         I000=I0AA
        ELSE
         I000=I0BB
        ENDIF
        LISTT=ISPIN+43
        LISTZ=ISPIN+60
C
        DO 50 IRREP=1,NIRREP 
C
        NOCCSQ=0
        DO 45 IRREPJ=1,NIRREP
         IRREPI=DIRPRD(IRREP,IRREPJ)
         NOCCSQ=NOCCSQ+POP(IRREPJ,ISPIN)*POP(IRREPI,ISPIN)
45      CONTINUE

C
C       RETRIEVE T2 AMPLITUDES AND CALCLUATE NEW ONES
C
         DISSYT=IRPDPD(IRREP,18+ISPIN) 
         DISSYZ=IRPDPD(IRREP,18+ISPIN)
         NUMSYT=IRPDPD(IRREP,20+ISPIN)
         NUMSYZ=IRPDPD(IRREP,20+ISPIN)
         I001=1
         I002=I001+IINTFP*MAX(NOCCSQ,NUMSYT)*DISSYT
         I003=I002+IINTFP*MAX(NOCCSQ,NUMSYZ)*DISSYZ
         IF(MIN(NUMSYT,NUMSYZ,DISSYT,DISSYZ).NE.0) THEN
          I004=I003+IINTFP*MAX(NUMSYZ,DISSYZ,NOCCSQ)*3
          if (I004.LT.0) call trap_intovf('FMICONT',1)
          IF(I004.LT.MXCOR) THEN
C
C    IN CORE VERSION
C
          CALL RCC_FMIAA1(ICORE(I001),ICORE(I002),ICORE(I000),
     &                POP(1,ISPIN),VRT(1,ISPIN),NOCCSQ,DISSYT,
     &                DISSYZ,NUMSYT,NUMSYZ,NFAA,LISTT,LISTZ,
     &                IRREP,ICORE(I003))
          ELSE
           STOP 'FMIAA1'
          ENDIF
         ENDIF
50      CONTINUE
100    CONTINUE
      ENDIF
  
      NMULT = 1
      IF (RCCD .AND. IUHF .EQ. 0) NMULT = 2
C
C      AB SPIN CASE
C
      DO IMULT = 1, NMULT
         IF (IMULT .EQ. 1) THEN
             LISTT=46
             LISTZ=63
         ELSE
             CALL GETLST(ICORE(I0AA),1,1,1,10,91)
             I0BB = I0AA
             LISTT=44
             LISTZ=61
         ENDIF
C
      DO 200 IRREP=1,NIRREP
C
C   RETRIEVE T2 AMPLITUDES AND CALCULATE Z-AMPLITUDES
C
       DISSYT=IRPDPD(IRREP,13)
       DISSYZ=IRPDPD(IRREP,13)
       NUMSYT=IRPDPD(IRREP,14)
       NUMSYZ=IRPDPD(IRREP,14)
       I001=1
       I002=I001+IINTFP*NUMSYT*DISSYT
       I003=I002+IINTFP*NUMSYZ*DISSYZ
       IF(MIN(NUMSYT,NUMSYZ,DISSYT,DISSYZ).NE.0) THEN
        I004=I003+IINTFP*MAX(DISSYT,DISSYZ,NUMSYT,NUMSYZ)*3
        if (I004.LT.0) call trap_intovf('FMICONT',2)
        IF(I004.LT.MXCOR) THEN
C
C       IN CORE ALGORITHM
C
         CALL RCC_FMIAB1(ICORE(I001),ICORE(I002),ICORE(I0AA),
     &               ICORE(I0BB),
     &               POP(1,1),POP(1,2),VRT(1,1),VRT(1,2),DISSYT,
     &               DISSYZ,NUMSYT,NUMSYZ,NFAA,NFBB,LISTT,LISTZ,
     &               IRREP,IUHF,ICORE(I003))
        ELSE
C
C       OUT CORE ALGORITHM
C
         STOP 'FMIAB1'
        ENDIF
       ENDIF
200   CONTINUE
      ENDDO
      RETURN
      END
