      SUBROUTINE RCC_FEAAA1(T2,Z2,T,Z,FEA,VRT,POP,NVRTSQ,
     &                  DISSYT,DISSYZ,NUMSYT,NUMSYZ,
     &                  NFSIZ,LISTT,LISTZ,IRREP,TMP)
       IMPLICIT DOUBLE PRECISION(A-H,O-Z)
       INTEGER DISSYT,DISSYZ,DIRPRD,VRT
       LOGICAL MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC,
     &            CC2,RCCD,DRCCD
       DIMENSION T2(DISSYT,NUMSYT),Z2(DISSYZ,NUMSYZ),FEA(NFSIZ),
     &           T(NUMSYT,NVRTSQ),Z(NUMSYZ,NVRTSQ)
       DIMENSION TMP(1),VRT(8),POP(8)
C
       COMMON/SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),
     &                DIRPRD(8,8)
      COMMON/METH/MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC,
     &            CC2,RCCD,DRCCD
       DATA AZERO,ONE,ONEM /0.0D0,1.0D0,-1.0D0/
C
C   GET T2 AND Z2 AMPLITUDES
C
       CALL GETLST(T2,1,NUMSYT,2,IRREP,LISTT)
       CALL TRANSP(T2,T,NUMSYT,DISSYT)
       IF (.NOT. (DRCCD .OR. RCCD)) THEN
          CALL SYMEXP(IRREP,VRT,NUMSYT,T)
       ENDIF 
       CALL ZERO(Z,NUMSYZ*NVRTSQ)
C
C      PERFORM MULTIPLICATION
C
       JOFF=1
       IOFF=1
       DO 90 IRREPJ=1,NIRREP
C
        NVRTJ=VRT(IRREPJ)
C
        IF(NVRTJ.EQ.0) GO TO 90
C
        IRREPI=DIRPRD(IRREPJ,IRREP)
C
        NVRTI=VRT(IRREPI)
C
        IF(NVRTI.EQ.0) GO TO 80
C 
        CALL XGEMM('N','N',NUMSYT*NVRTI,NVRTJ,NVRTJ,ONE,T(1,JOFF),
     &             NVRTI*NUMSYT,FEA(IOFF),NVRTJ,
     &             AZERO,Z(1,JOFF),NVRTI*NUMSYZ)
C
        JOFF=JOFF+NVRTJ*NVRTI
C
80      CONTINUE
        IOFF=IOFF+NVRTJ*NVRTJ
90      CONTINUE
C
        IF (.NOT. (DRCCD .OR. RCCD)) THEN
        CALL ASSYM(IRREP,VRT,NUMSYZ,NUMSYZ,T,Z)
        CALL TRANSP(T,T2,DISSYZ,NUMSYZ)
C
        CALL GETLST(Z2,1,NUMSYZ,1,IRREP,LISTZ)
        CALL VADD(Z2,Z2,T2,NUMSYZ*DISSYZ,ONE)
        CALL PUTLST(Z2,1,NUMSYZ,1,IRREP,LISTZ)
        ELSE
        CALL DCOPY(DISSYZ*NUMSYZ,Z,1,T,1)
        CALL TRANSP(T,T2,DISSYZ,NUMSYZ)
        CALL GETLST(Z2,1,NUMSYZ,1,IRREP,LISTZ)

#ifdef _DEBUG_LVL0
        write(6,*) "@-rcc_feaaa"
        call checksum("z2old:",z2,NUMSYZ*DISSYZ)
        call checksum("z2add:",t2,NUMSYZ*DISSYZ)
#endif 
        CALL VADD(Z2,Z2,T2,NUMSYZ*DISSYZ,ONE)

        CALL SYMTR1(IRREP,POP,POP,DISSYZ,T2,TMP,TMP(1+DISSYZ),
     &             TMP(1+2*DISSYZ))
        CALL SYMTR3(IRREP,VRT,VRT,DISSYZ,NUMSYZ,T2,TMP,
     &             TMP(1+NUMSYZ),TMP(1+2*NUMSYZ))

        CALL VADD(Z2,Z2,T2,NUMSYZ*DISSYZ,ONE)
        CALL PUTLST(Z2,1,NUMSYZ,1,IRREP,LISTZ)
        ENDIF 

        RETURN
        END
