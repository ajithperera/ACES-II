      SUBROUTINE TDSOLV(UP,UM,ABP,ABM,APVEC,AMVEC,APVEC1,AMVEC1
     X ,ABPM,SCR,UVAL,UVEC,WVAL,WVEC,PORT,SVEC,TVEC,ZVEC,YVEC,
     X REDVEC,IVRT,IOCC,IVRTS,IOCCS,DENP,DENM,FP,FM,F,E,IA,HMO,EVAL
     X ,EVEC,ENRG,UPDATE,ASMALL,ASQUARE,ASCALE,ICONV,OMEGA,MCOMP
     X ,NFIRST,XX,IX,NIREP,NSIZ1,NSIZ3,NSIZO,NSIZVO,NINTMX)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z) 
      CHARACTER*1 AXYZ 
      DIMENSION IVRT(NSIZVO),IOCC(NSIZVO),IVRTS(NSIZVO,NIREP)
     X ,IOCCS(NSIZVO,NIREP)
      DIMENSION APVEC(NSIZVO,MCOMP),AMVEC(NSIZVO,MCOMP)
     X ,APVEC1(NSIZVO,MCOMP),AMVEC1(NSIZVO,MCOMP)
      DIMENSION SVEC(1),TVEC(1),ZVEC(1),YVEC(1),REDVEC(1)
      DIMENSION UP(NSIZ1,NSIZO,3),ABP(1),ABM(1)
     X ,ABPM(1),UM(NSIZ1,NSIZO,3),SCR(1),EVAL(NSIZ1),EVEC(NSIZ1,NSIZ1) 
     X ,UVAL(1),UVEC(1),PORT(1),ENRG(3,6)
      DIMENSION DENP(1),DENM(1),F(NSIZ1,NSIZ1,3),E(NSIZO,NSIZO,3)
     X ,WVAL(1),WVEC(1),HMO(NSIZ3,3),IA(1),FP(1),FM(1)
      DIMENSION XX(NINTMX),IX(NINTMX)
      DIMENSION UPDATE(1),ASMALL(1),ASQUARE(1),ASCALE(1),ICONV(1)
      DIMENSION AXYZ(3)
      COMMON/INFOA/NBASIS,NUMSCF,NX,NMO2,NOC,NVT,NVO     
      COMMON/INFSYM/NSYMHF,NSO(8),NOCS(8),NVTS(8),IDPR(8,8),NVOS(8)
     X ,NIJS(8),NIJS2(8),NRDS(8),NIJSR(8)
      COMMON/INFPRS/IPRSYM(12),NPRSYM(8),JPRSYM(8,12)
      COMMON/IPRNT/ IOPEV,IOPDA,IOPU,IOPFE,IOPPR,IWRPA
      COMMON/ILINEA/ISALPH,IDALPH
      COMMON/THRES/ TOLPER,DEGEN,EPSI
      COMMON/THRE1/ NITER,MAXIT
      COMMON /LRDUCE/ CONVI
      COMMON /LRDUC1/ KMAX
      COMMON/SWPPP/INP,IAMO,IFAMO,IINDO,IORTH               
      COMMON /TIMEINFO/ TIMEIN, TIMENOW, TIMETOT, TIMENEW     
      DATA ZERO,ONE,TWO,THREE,FOUR/0.D0,1.D0,2.D0,3.D0,4.D0/ 
      DATA AXYZ/'x','y','z'/
C ... one root required 
C ..... scratch should have length of 2*NVO at least

      WRITE(6,*) ' now in TDSOLV '
      SQRT2= SQRT(TWO)
      DO 30 MCOM=1,MCOMP
      MCOMS=IPRSYM(MCOM)
      NVOSYM=NVOS(MCOMS)
CSSS      WRITE(6,*) ' A+B matrix MCOM,MCOMS ',MCOM,MCOMS
CSSS      CALL OUTMXD(ABP(NIJS2(MCOMS)+1),NVOSYM,NVOSYM,NVOSYM)    
CSSS      WRITE(6,*) ' A-B matrix MCOM MCOMS ',MCOM,MCOMS
CSSS      CALL OUTMXD(ABM(NIJS2(MCOMS)+1),NVOSYM,NVOSYM,NVOSYM)    
      DO 21 I=1,NUMSCF              
      DO 21 J=1,NOC
      IJ=(I-1)*I/2+J
      IF(I.GT.NOC) THEN 
      UP(I,J,MCOM)=HMO(IJ,MCOM)
      UM(I,J,MCOM)=HMO(IJ,MCOM)
      ELSE                     
      UP(I,J,MCOM)=ZERO
      UM(I,J,MCOM)=ZERO
      END IF     
   21 CONTINUE        
   30 CONTINUE
      IF(NITER.NE.0) THEN       
      DO 45 MCOM=1,MCOMP
      MCOMS=IPRSYM(MCOM)
      NVOSYM=NVOS(MCOMS)
C     write(6,*) ' MCOMS,NVOSYM ',MCOMS,NVOSYM
      DO 11 I=1,NVOSYM
      APVEC1(I,MCOM)= UP(IVRTS(I,MCOMS),IOCCS(I,MCOMS),MCOM)
     X +UM(IVRTS(I,MCOMS),IOCCS(I,MCOMS),MCOM) 
      AMVEC1(I,MCOM)= UP(IVRTS(I,MCOMS),IOCCS(I,MCOMS),MCOM)
     X -UM(IVRTS(I,MCOMS),IOCCS(I,MCOMS),MCOM) 
   11 CONTINUE
   45 CONTINUE
      IF(NITER.GE.2) THEN
C ...... reduced linear equation solver
      CONV=1.D-5
      IF(CONVI.NE.0.) CONV=CONVI
C ... KMAX=NITER .....
      DO 91 MCOM=1,MCOMP
      MCOMS=IPRSYM(MCOM)
      NVOSYM=NVOS(MCOMS)
C     write(6,*) ' MCOMS,NVOSYM ',MCOMS,NVOSYM
      DO 91 I=1,NVOSYM 
      APVEC(I,MCOM)=APVEC1(I,MCOM)/(EVAL(IOCCS(I,MCOMS))
     X  -EVAL(IVRTS(I,MCOMS)))
      AMVEC(I,MCOM) = AMVEC1(I,MCOM)/(EVAL(IOCCS(I,MCOMS))
     X  -EVAL(IVRTS(I,MCOMS)))
   91 CONTINUE
      CALL TIMER(0)
      CALL LINEQ0(IVRT,IOCC,IVRTS,IOCCS,OMEGA,MCOMP,0,ABP,ABM
     X ,APVEC,AMVEC,APVEC1,AMVEC1,UPDATE,ASMALL,ASQUARE,ASCALE
C    X ,ICONV,EVAL,EVEC,NUMSCF,NIREP,FP,FM,DENP,DENM,CONV,NVO,KMAX)
     X ,ICONV,EVAL,EVEC,NUMSCF,NIREP,FP,FM,DENP,DENM,CONV,NVO,KMAX
     X ,XX,IX,IA,NINTMX)
      CALL TIMER(1)
C     write(6,*) ' Timing for LINEQ0 for MCOMP = ',MCOMP,TIMENEW
      DO 92 MCOM=1,MCOMP
      MCOMS=IPRSYM(MCOM)
      NVOSYM=NVOS(MCOMS)
      DO 92 I=1,NVOSYM
      APVEC(I,MCOM) = APVEC(I,MCOM)/SQRT2
      AMVEC(I,MCOM) = AMVEC(I,MCOM)/SQRT2
   92 CONTINUE
      ELSE
C .........  inversed solution .....................
      IF(NFIRST.EQ.0) THEN
      DO 93 MCOMS=1,NSYMHF
      NVOSYM=NVOS(MCOMS)
      NREDUC=NRDS(MCOMS)
      DO 10 I=1,NVOSYM
      II2=NIJS2(MCOMS)+(I-1)*NVOSYM+I
      ABP(II2) = ABP(II2)+EVAL(IVRTS(I,MCOMS))-EVAL(IOCCS(I,MCOMS))
   10 ABM(II2) = ABM(II2)+EVAL(IVRTS(I,MCOMS))-EVAL(IOCCS(I,MCOMS))
C .......  kokodewa perturbation no keisanwa shinai inverse nomi ....
C     CALL FINVMX(ABP(NIJS2(MCOMS)+1),ABM(NIJS2(MCOMS)+1),ABPM(NIJS2
C    X(MCOMS)+1),UVAL(NIJS(MCOMS)+1),UVEC(NIJS2(MCOMS)+1),WVAL(NIJS
C    X(MCOMS)+1),WVEC(NIJS2(MCOMS)+1),PORT(NIJS2(MCOMS)+1),SCR,
C    X APVEC,AMVEC,APVEC1,AMVEC1,OMEGA,0,NVOSYM,NREDUC)
      CALL ZYRPA(ABP(NIJS2(MCOMS)+1),ABM(NIJS2(MCOMS)+1),UVAL(NIJS
     X (MCOMS)+1),UVEC(NIJS2(MCOMS)+1),WVAL(NIJS(MCOMS)+1),
     X WVEC(NIJS2(MCOMS)+1),PORT(NIJS2(MCOMS)+1),SCR,SVEC
     X (NIJSR(MCOMS)+1),TVEC(NIJSR(MCOMS)+1),ZVEC(NIJSR(MCOMS)+1),
     X YVEC(NIJSR(MCOMS)+1),NVOSYM,NREDUC)
C     write(6,*) ' UVEC for MCOMS = ',MCOMS
C     write(6,*) ' UVEC for MCOMS = ',MCOMS
C     CALL OUTMXD(UVEC(NIJS2(MCOMS)+1),NVOSYM,NVOSYM,NVOSYM)
   93 CONTINUE
      END IF 
      write(6,*) (nrds(i),i=1,8)
      write(6,*) (iprsym(i),i=1,8)

      DO 12 MCOM=1,MCOMP
      MCOMS=IPRSYM(MCOM)
      Write(6,*) MCOMS
      NVOSYM=NVOS(MCOMS)
      NREDUC=NRDS(MCOMS)
      DO 22 I=1,NVOSYM
      APVEC1(I,MCOM)= UP(IVRTS(I,MCOMS),IOCCS(I,MCOMS),MCOM)
      AMVEC1(I,MCOM)= UM(IVRTS(I,MCOMS),IOCCS(I,MCOMS),MCOM)
   22 CONTINUE
C     CALL FINVMX(ABP(NIJS2(MCOMS)+1),ABM(NIJS2(MCOMS)+1),ABPM(NIJS2
C    X(MCOMS)+1),UVAL(NIJS(MCOMS)+1),UVEC(NIJS2(MCOMS)+1),WVAL(NIJS
C    X(MCOMS)+1),WVEC(NIJS2(MCOMS)+1),PORT(NIJS2(MCOMS)+1),SCR,
C    X APVEC(1,MCOM),AMVEC(1,MCOM),APVEC1(1,MCOM),AMVEC1(1,MCOM),OMEGA
C    X ,1,NVOSYM,NREDUC)
      CALL PRPA(SVEC(NIJSR(MCOMS)+1),TVEC(NIJSR(MCOMS)+1),ZVEC(NIJSR
     X (MCOMS)+1),YVEC(NIJSR(MCOMS)+1),REDVEC,WVAL(NIJS(MCOMS)+1),
     X APVEC(1,MCOM),AMVEC(1,MCOM),APVEC1(1,MCOM),AMVEC1(1,MCOM),
     X OMEGA,NVOSYM,NREDUC)
   12 CONTINUE
C ........... inversed solution owari .....
      END IF
      ELSE
      DO 42 MCOM=1,MCOMP
      DO 43 I=1,NVO
      APVEC(I,MCOM)= ZERO
      AMVEC(I,MCOM)= ZERO
   43 CONTINUE
   42 CONTINUE
      ITER =0
   40 IF(ITER.GE.MAXIT) GO TO 41
      ITER=ITER+1
      IDIF=0
C     CALL MXM(ABP,NSIZVO,ABP(1,NI1),NSIZVO,ABP(1,NI2),3) 
C     CALL MXM(ABM,NSIZVO,ABM(1,NI1),NSIZVO,ABM(1,NI2),3) 
      DO 35 MCOM=1,MCOMP
      MCOMS=IPRSYM(MCOM)
      NVOSYM=NVOS(MCOMS)
      CALL MXM(ABP(NIJS2(MCOMS)+1),NVOS(MCOMS),APVEC(1,MCOM)
     X ,NVOS(MCOMS),APVEC1(1,MCOM),1)
      CALL MXM(ABM(NIJS2(MCOMS)+1),NVOS(MCOMS),AMVEC(1,MCOM)
     X ,NVOS(MCOMS),AMVEC1(1,MCOM),1)
C     ENRGP=ZERO
C     ENRGM=ZERO
      DO 36 I=1,NVOSYM
      IVT= IVRTS(I,MCOMS)
      IOC= IOCCS(I,MCOMS)
      VOLDP= APVEC(I,MCOM)
      VOLDM= AMVEC(I,MCOM)
      FTP = (APVEC1(I,MCOM)+AMVEC1(I,MCOM))/SQRT2
      FTM = (APVEC1(I,MCOM)-AMVEC1(I,MCOM))/SQRT2
      VNEWP =(FTP+UP(IVT,IOC,MCOM))/(EVAL(IOC)-EVAL(IVT)-OMEGA)
      VNEWM =(FTM+UM(IVT,IOC,MCOM))/(EVAL(IOC)-EVAL(IVT)+OMEGA)
C     IF(MCOM.EQ.3.AND.(ITER.EQ.1.OR.ITER.EQ.2)) THEN
C     write(6,*) IVT,IOC,FTP,FTM,VNEWP,VNEWM,ABP(I,JM2),ABM(I,JM2),
C    X EVAL(IOC),EVAL(IVT),UP(IVT,IOC,MCOM),OMEGA
C     END IF
C ....  VNEWP=X=U(+)(a,i)    VNEWM=Y=-U(+)(i,a)=U(-)(a,i)  :::: tabun!
      APVEC(I,MCOM)= (VNEWP+VNEWM)/SQRT2
      AMVEC(I,MCOM)=(VNEWP-VNEWM)/SQRT2
      APVEC1(I,MCOM)= VOLDP
      AMVEC1(I,MCOM)= VOLDM
      IJ = (IVT-1)*IVT/2 + IOC
C     ENRGP= ENRGP+VNEWP*HMO(IJ,MCOM)
C     ENRGM= ENRGM+VNEWM*HMO(IJ,MCOM)
      DIFP = ABS(APVEC(I,MCOM)-APVEC1(I,MCOM))
      DIFM = ABS(AMVEC(I,MCOM)-AMVEC1(I,MCOM))
      IF(DIFP.GT.TOLPER.OR.DIFM.GT.TOLPER) IDIF=1
   36 CONTINUE
C     ENERG2= (ENRGP+ENRGM)*TWO
C     IF(MCOM.EQ.3)WRITE(6,*) ' energy = ',ENERG2,MCOM,ITER
   35 CONTINUE
      IF(IDIF.EQ.0) GO TO 41
      GO TO 40
   41 CONTINUE
      WRITE(6,*) ' ITERATION = ',ITER
      END IF
      DO 31 MCOM=1,MCOMP     
      MCOMS=IPRSYM(MCOM)
      NVOSYM=NVOS(MCOMS)
      DO 15 I=1,NX
      DENP(I)=ZERO
   15 DENM(I)=ZERO
      DO 16 I=1,NVO
      IVT=IVRT(I)
      IOC=IOCC(I)
      UP(IVT,IOC,MCOM)=ZERO
   16 UM(IVT,IOC,MCOM)=ZERO
C     WRITE(6,*) ' Solution for the linear equation '
      DO 20 I=1,NVOSYM
      IVT=IVRTS(I,MCOMS)
      IOC=IOCCS(I,MCOMS)
      UP(IVT,IOC,MCOM)=(APVEC(I,MCOM)+AMVEC(I,MCOM))/SQRT2
      UM(IVT,IOC,MCOM)=(APVEC(I,MCOM)-AMVEC(I,MCOM))/SQRT2
      IJD=(IVT-1)*IVT/2+IOC
      DENP(IJD)= APVEC(I,MCOM)*TWO 
      DENM(IJD)= AMVEC(I,MCOM)*TWO
   20 CONTINUE
      DO 18 M=1,3
      ENRG(M,MCOM)= ZERO
      DO 19 I=1,NVO
      IJD=(IVRT(I)-1)*IVRT(I)/2+IOCC(I)
      ENRG(M,MCOM) = ENRG(M,MCOM) +
     X (UP(IVRT(I),IOCC(I),MCOM)+UM(IVRT(I),IOCC(I),MCOM))*HMO(IJD,M)
   19 CONTINUE
      ENRG(M,MCOM) = -ENRG(M,MCOM)*TWO
   18 CONTINUE
      WRITE(6,*) ' Alpha(dynamic) '
C     WRITE(6,*) ' component for U = ',MCOM
C     WRITE(6,*) ' Alpha = ',(ENRG(M,MCOM),M=1,3)
      WRITE(6,200) AXYZ(MCOM),AXYZ(1),ENRG(1,MCOM),AXYZ(MCOM)
     X ,AXYZ(2),ENRG(2,MCOM),AXYZ(MCOM),AXYZ(3),ENRG(3,MCOM)
  200 FORMAT(1H ,2A1,' = ',F20.10,'  ',2A1,' = ',F20.10,'  ',
     X 2A1,' = ',F20.10)
      IF(IOPU.NE.0) THEN
      WRITE(6,*) ' UP1 '
      CALL OUTMXD(UP(1,1,MCOM),NSIZ1,NUMSCF,NOC)
      WRITE(6,*) ' UM1 '
      CALL OUTMXD(UM(1,1,MCOM),NSIZ1,NUMSCF,NOC)
      END IF
      IF(IDALPH.EQ.0) THEN
      IF(IFAMO.EQ.0) THEN
      DO 25 IJ=1,NX
      FP(IJ)=ZERO
      FM(IJ)=ZERO
   25 CONTINUE
      CALL TIMER(1)
      CALL FMOK(DENP,FP,XX,IX,NINTMX,IA)
C     CALL RTPUT(F(1,1,MCOM),FP,NUMSCF)
C     write(6,*) ' f-matrix by FMOK , component = ',MCOM
C     CALL OUTMXD(F(1,1,MCOM),NSIZ1,NUMSCF,NUMSCF)
      CALL FMOL(DENM,FM,XX,IX,NINTMX,IA)
C     CALL RTPUT(F(1,1,MCOM),FM,NUMSCF)
C     write(6,*) ' f-matrix by FMOL , component = ',MCOM
C     CALL OUTMXD(F(1,1,MCOM),NSIZ1,NUMSCF,NUMSCF)
      ELSE
      CALL DENSP(NBASIS,NVO,IVRT,IOCC,EVEC,APVEC(1,MCOM),DENP)
      CALL DENSM(NBASIS,NVO,IVRT,IOCC,EVEC,AMVEC(1,MCOM),DENM)
      IF(IINDO.EQ.0) THEN
      CALL FNOK(DENP,EVEC,FP,NBASIS,NSIZ1,XX,IX,NINTMX,IA)
      CALL FNOL(DENM,EVEC,FM,NBASIS,NSIZ1,XX,IX,NINTMX,IA)
      ELSE
      CALL FINDO(NBASIS,NVO,IVRT,IOCC,EVEC,DENP,FP)
C     write(6,*) ' f-matrix by FINDO, component = ',MCOM
C     CALL OUTMXD(FP,NSIZ1,NUMSCF,NUMSCF)
      CALL FIMDO(NBASIS,NVO,IVRT,IOCC,EVEC,DENM,FM)
C     write(6,*) ' f-matrix by FIMDO, component = ',MCOM
C     CALL OUTMXD(FM,NSIZ1,NUMSCF,NUMSCF)
      END IF
      END IF
      CALL TIMER(1)
C     write(6,*) ' Timing for fs-matrix formatio ',MCOM,TIMENEW
      IJ=0
      DO 27 I=1,NUMSCF
      DO 27 J=1,I
      F(I,J,MCOM)=ZERO
      IJ=IJ+1
      IJL=(J-1)*NUMSCF+I
      IF(IFAMO.EQ.0) IJL=IJ
      IF(I.EQ.J) THEN
      F(I,J,MCOM)=FP(IJL)/SQRT2+HMO(IJ,MCOM)
      ELSE
      F(I,J,MCOM)=(FP(IJL)+FM(IJL))/SQRT2+HMO(IJ,MCOM)
      F(J,I,MCOM)=(FP(IJL)-FM(IJL))/SQRT2+HMO(IJ,MCOM)
      END IF
   27 CONTINUE
      IF(IOPFE.NE.0) THEN
      write(6,*) ' F matrix component =  ',MCOM
      CALL OUTMXD(F(1,1,MCOM),NSIZ1,NUMSCF,NUMSCF)
      END IF
      DO 26 I=1,NOC
      DO 26 J=1,NOC
      E(I,J,MCOM)=F(I,J,MCOM)
   26 CONTINUE
      END IF
   31 CONTINUE
      ABAR=(ENRG(1,1)+ENRG(2,2)+ENRG(3,3))/THREE
      DELA= SQRT((ENRG(1,1)-ENRG(2,2))**2
     X          +(ENRG(2,2)-ENRG(3,3))**2
     X          +(ENRG(3,3)-ENRG(1,1))**2)/SQRT2
      WRITE(6,*) '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
      WRITE(6,*) ' Average Alpha = ',ABAR
      WRITE(6,*) ' Delta Alpha = ',DELA
      WRITE(6,*) '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'
      IF(IDALPH.NE.0) STOP 
      RETURN
      END
