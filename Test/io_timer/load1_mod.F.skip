
c THIS ROUTINE LOADS AO INTEGRALS FROM THE INTEGRAL FILE IIII AND
c TRANSFORMS THE FIRST INDEX.

      SUBROUTINE LOAD1(CMO,W,W2,dTmp_Buf,iTmp_Buf,iSymAO,
     &                 dBuf, Ibuf, nBas, nFirst,nStart,nEnd,
     &                 iSize,iOffAO,iOffI, nSize,iLnBuf,iSpin,
     &                 iUnit,nPass1,bLast,
     &                 NBASIS, NSIZE_AO,Nread_Bufs)
      IMPLICIT DOUBLE PRECISION(A-H,O-Z)
      LOGICAL bLasT, Time_it, Start2Time
c
      DIMENSION iTmp_Buf(iLnBuf),dTmp_Buf(iLnBuf),
     &          W(1), W2(1),CMO(1),dBuf(iLnBuf*Nread_Bufs),
     &          IBuf(iLnBuf*Nread_Bufs)
      DIMENSION nBas(8),nFirst(8),iSize(8),iOffAO(8),iOffI(8)
      DIMENSION nStart(8),nEnd(8)
      DIMENSION iSymAO(100)
c
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,iAlone,iBitWd
      COMMON /FLAGS/  iFlags(100)
      COMMON /FLAGS2/ iFlags2(500)
      COMMON /AOOFST/ INDOCC(8,2)
c ----------------------------------------------------------------------

c   o initialize W array (nsize: nao*(nao+1)/2*nao*nmo)
      call zero(W,nSize)

C
c   o increment Load1 counter; nread is the counter for # of disk
c     reads (for a given pass). 
c
      nRead  = 0
      nPass1 = nPass1 + 1
      nAOInt = 0
      NUT    = iLnBuf
c
CSSS      call output(CMO, 1, nbasis, 1, nbasis, nbasis, nbasis, 1)
      do while (NUT.eq.iLnBuf)
C
c   o read in integrals and time it for every n*600 (n>20) reads
c
#ifdef _NO_NOSKIP
      Nread = NRead + iLnBuf
      Start2Time = (Nread .EQ. 600)
      If (Start2Time) Call Start_time 
#endif
#ifdef _DEBUG_LVL0
      If (nPass1 .EQ. 1) Then
         Print*, "Before read,number of bufs to read", Nread_Bufs
         Write(6,*)
      Endif
#endif
c
          Ioff_600 = 1
          Ioff_Buf = 1
          Do Iread_bufs = 1, Nread_Bufs
C
             read(iUnit) Dtmp_Buf, iTmp_buf, NUT
             Call Dcopy(NUT, DTmP_Buf, 1, dBuf(Ioff_600), 1)
             Call Icopy(NUT, ITmP_Buf, 1, IBuf(Ioff_600), 1)

CSS             Print*, Iread_bufs, NUT
C
             If (Iread_bufs .eq. 1 .and. Nut .LT. ILnBuf) Then
                 Loop_Length = NUT
                 Go To 10
             Else if (Nut .LT. ILnBuf .and. Iread_bufs .NE. 
     &                Nread_bufs) Then
                 Loop_Length = 600*Iread_bufs + NUT
                 Go To 10
             Else
                 Loop_Length = 600*Nread_bufs
             Endif
             ioff_600 = ioff_600  + 600 
          Enddo 
c
#ifdef _NO_NOSKIP
      Time_it = (MOD(NREAD, 600*600) .Eq. 0)
      If (Time_it) THen 
         Call End_time
         Nread = 0
      Endif
#endif
c   
  10  CONTINUE

#ifdef _DEBUG_LVLM1
      Print*, "The number of Buffers Proccessed",  Iread_bufs-1
      Print*, "The loop_length and offset for int", Loop_Length, 
     &         Ioff_buf
      Write(6,*)
#endif
      do int = 1, Loop_Length

       
c      o extract X value and IX, JX, KX, LX indices
         X    = dBuf(Ioff_Buf)
         iTmp = iBuf(Ioff_Buf)
         IX   = iand(      iTmp,           iAlone)
         JX   = iand(ishft(iTmp,-  iBitWd),iAlone)
         KX   = iand(ishft(iTmp,-2*iBitWd),iAlone)
         LX   = iand(ishft(iTmp,-3*iBitWd),iAlone)

c      o get irrep of integral
         IrrepX = iSymAO(IX)

c      o process the occupied orbitals within IrrepX (if any)
         nStartX = nStart(IrrepX)
         nEndX   = nEnd(IrrepX)
         if (nStartX.le.nEndX) then

c         o get offsets within basis functions
            iTmp   = iOffAO(IrrepX)
            IX     = IX - iTmp
            JX     = JX - iTmp
            KX     = KX - iTmp
            LX     = LX - iTmp

c         o condition the packed indices
            I = max(IX,JX)
            J = min(IX,JX)
            K = max(KX,LX)
            L = min(KX,LX)

c         o scale the integral
            if (I.eq.K.and.J.eq.L) X = X * 0.5d0
            if (K.eq.L) then
               X1 = X * 0.5d0
            else
               X1 = X
            end if
            if (I.eq.J) then
               X2 = X * 0.5d0
            else
               X2 = X
            end if

c         o determine number of basis functions and offsets within IrrepX
            iSizeX = iSize(IrrepX)
            nBasX  = nBas(IrrepX)
            iOffW  = iOffI(IrrepX)
            iAdr   = iOffW + KX + IND
C
C
c DETERMINE REDUNDANCY FACTOR FOR PLUGGING IN INTEGRALS
c THERE ARE A TOTAL OF EIGHT CONTRIBUTIONSa
c
c   (IJ|KL) (JI|KL) (IJ|LK) (JI|LK)
c   (KL|IJ) (KL|JI) (LK|IJ) (LK|JI)
c
c HOWEVER, WE NEED ONLY FOUR SINCE WE STORE THE AS
c   NU, SIGMA >= RHO,  I

            IND = nBasX * ( I*(I-1)/2 + (J-1) )

c         o TRANSFORM INDEX L TO MO BASIS AND INCREMENT L(KX,IX,JX;I)
            iOffCL = iOffC + LX
            iAdr   = iOffW + KX + IND
            do iCount = nStartX, nEndX
CSSS               Print*, "The L block"
CSSS               Print*, "The values being mult", X1, CMO(iOffCL)
               W(iAdr) = W(iAdr) + X1*CMO(iOffCL)
               iOffCL = iOffCL + 1
CSSS               Print*, "The transformed Ints", Iadr, W(Iadr)
               iAdr   = iAdr   + iSizeX
            end do

c         o TRANSFORM INDEX K TO MO BASIS AND INCREMENT L(LX,JX,IX;I)
            iOffCK = iOffC + KX
            iAdr   = iOffW + LX + IND
            do iCount = nStartX, nEndX
CSSS               Print*, "The K block"
CSSS               Print*, "The values being mult", X1, CMO(iOffCK)
               W(iAdr) = W(iAdr) + X1*CMO(iOffCK)
CSSS               Print*, "The transformed Ints", Iadr, W(Iadr)
               iOffCK = iOffCK + 1
               iAdr   = iAdr   + iSizeX
            end do

            IND = nBasX * ( K*(K-1)/2 + (L-1) )

c         o TRANSFORM INDEX J TO MO BASIS AND INCREMENT L(IX,KX,LX;I)
            iOffCJ = iOffC + JX
            iAdr   = iOffW + IX + IND
            do iCount = nStartX, nEndX
CSSS               Print*, "The J block"
CSSS               Print*, "The values being mult", X1, CMO(iOffCJ)
               W(iAdr) = W(iAdr) + X2*CMO(iOffCJ)
CSSS               Print*, "The transformed Ints", Iadr, W(Iadr)
               iOffCJ = iOffCJ + 1
               iAdr   = iAdr   + iSizeX
            end do

c         o TRANSFORM INDEX I TO MO BASIS AND INCREMENT L(JX,LX,KX;I)
            iOffCI = iOffC + IX
            iAdr   = iOffW + JX + IND
            do iCount = nStartX, nEndX
CSSS               Print*, "The I block"
CSSS               Print*, "The values being mult", X1, CMO(iOffCI)
               W(iAdr) = W(iAdr) + X2*CMO(iOffCI)
CSSS               Print*, "The transformed Ints", Iadr, W(Iadr)
               iOffCI = iOffCI + 1
               iAdr   = iAdr   + iSizeX
            end do

c        end if (nStartX.le.nEndX)
         end if
         Ioff_Buf = Ioff_Buf + 1

c     end do int = 1, NUT
      end do

      nAOInt = nAOInt + Loop_Length

c     end do while (NUT.eq.iLnBuf)
      end do

      if (NUT.eq.-1) then
         nAOInt = nAOInt + 1
         NUT = 0
      end if
      nLoad1 = nAOInt
#ifdef _DEBUG_LVLM1
      Print*, "Transformed Ints"
      Write(*,'(t3, 1x, F12.7)'), (W(I), I=1, Naoint)
#endif


      if (bLast) then
         if (iFlags(18).ge.3.or.
     &       iFlags(26).eq.1.or.
     &       iFlags(93).eq.2.or.
     &       (iSpin.eq.1.and.iFlags(11).gt.0).or.
     &       iFlags2(103).eq.1
     &      ) then
            close(unit=iUnit,status='KEEP')
         else
            close(unit=iUnit,status='KEEP')
         end if
      else
         rewind(iUnit)
         call locate(iUnit,'TWOELSUP')
      end if
      
      if (bLast) then
      write(*,'(t3,a,i15,a)')
     &                   '@LOAD1: ',nAOInt,' integrals read 
     &                    in from file IIII'
      write(*,'(t3,a,i8,a)'), '@LOAD1: ',npass1, " passes"
      endif

      return
c     end subroutine load1
      end

