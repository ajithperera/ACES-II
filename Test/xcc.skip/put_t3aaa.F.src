c __FILE__ : begin

c This file is for adding in T3(*,PQR) contributions.

c NOTE: ndx must point to the first T3(*,PQR) contribution in dscr().

c Anti-symmetry works like this:
c    p<q<r (+)
c    p<r<q (-)
c    r<p<q (+)

#define C_MOD c
#define C_ONE c
c#define C_MOD
c#define C_ONE

c   o loop over irreps of Q in T3(*,PQR)
      do irp_q = 1, nirrep
         irp_p = dirprd(irp_q,irp_pq)
         if (irp_p.lt.irp_q) then
            max_p = vrt(irp_p,ispin)
            max_q = vrt(irp_q,ispin)
            do_irp_q = ((max_p.ne.0).and.(max_q.ne.0))
         else
            if (irp_p.gt.irp_q) then
               do_irp_q = .false.
            else
               max_p = vrt(irp_p,ispin)
               max_q = max_p
               do_irp_q = (max_q.gt.1)
            end if
         end if
      if (do_irp_q) then

c      o skip irp_q if there are not enough virtual orbitals for T3
c        (itmp is the number of P<Q pairs to skip if we fail do_t3)
         if (irp_p.lt.irp_q) then
            if (irp_r.ne.irp_p) then
               itmp  = max_p
               do_t3 = ((irp_r.ne.irp_q).or.(max_q.ne.1))
            else
               itmp  = max_q
               do_t3 = (max_p.ne.1)
            end if
         else
            itmp  = 1
            do_t3 = ((irp_r.ne.irp_p).or.(max_q.ne.2))
         end if
         if (do_t3) then

c         o point to the irreps whose T3 amplitudes are in the buffer
            q    = max(irp_q,irp_r)
            p    = min(irp_p,irp_r)
            pq   = rshift(q*(q-1),1) + ( irp_p + irp_q + irp_r - p - q )
            iadd = ndx_t3vrt(pq)

c ----------------------------------------------------------------------

c   o irp_r < irp_p ? irp_q
      if (irp_r.lt.irp_p) then
         if (irp_p.eq.irp_q) then
            itmp = rshift(max_q*(max_q-1),1)
         else
            itmp = ( max_p * max_q )
         end if
         iadd = iadd + r
         do pq = 0, itmp-1
C_MOD      print *, 'modifying dcore(',iadd,') at line ',__LINE__
            dcore(iadd) = dcore(iadd) + dscr(ndx+pq)
C_ONE      if (dcore(iadd).gt.1.0d0) print *, dcore(iadd)
            iadd = iadd + max_r
         end do
         ndx = ndx + itmp
      else

c   o irp_p ? irp_q < irp_r
      if (irp_q.lt.irp_r) then
         if (irp_p.eq.irp_q) then
            itmp = rshift(max_q*(max_q-1),1)
         else
            itmp = ( max_p * max_q )
         end if
         iadd = iadd + ( itmp * r )
         do pq = 0, itmp-1
C_MOD      print *, 'modifying dcore(',iadd+pq,') at line ',__LINE__
            dcore(iadd+pq) = dcore(iadd+pq) + dscr(ndx+pq)
C_ONE      if (dcore(iadd+pq).gt.1.0d0) print *, dcore(iadd+pq)
         end do
         ndx = ndx + itmp
      else

c   o irp_p = irp_r = irp_q
      if (irp_p.eq.irp_q) then
         to_q = max_q-1
         if (r.ne.0) then
            ioff = rshift(r*(r-1),1)
            if (r.gt.1) then
               iadd = iadd + ( r * (r-1) * (r-2) ) / 6
               do pq = 0, ioff-1
C_MOD      print *, 'modifying dcore(',iadd+pq,') at line ',__LINE__
                  dcore(iadd+pq) = dcore(iadd+pq) + dscr(ndx+pq)
C_ONE      if (dcore(iadd+pq).gt.1.0d0) print *, dcore(iadd+pq)
               end do
               iadd = iadd + ioff
               ndx  = ndx  + ioff + r
            else
               ndx  = ndx  + 1
c           end if (r.gt.1)
            end if
            if (r.ne.to_q) then
               iadd = iadd + ioff
               do p = 0, r-1
C_MOD      print *, 'modifying dcore(',iadd+p,') at line ',__LINE__
                  dcore(iadd+p) = dcore(iadd+p) - dscr(ndx+p)
C_ONE      if (dcore(iadd+p).gt.1.0d0) print *, dcore(iadd+p)
               end do
               iadd = iadd + r
               ndx  = ndx  + r + 1
               if (r.ne.(to_q-1)) then
                  do q = r+2, to_q
                     iadd = iadd + ioff
                     do p = 0, r-1
C_MOD      print *, 'modifying dcore(',iadd+p,') at line ',__LINE__
                        dcore(iadd+p) = dcore(iadd+p) - dscr(ndx+p)
C_ONE      if (dcore(iadd+p).gt.1.0d0) print *, dcore(iadd+p)
                     end do
                     ndx  = ndx  + r + 1
                     iadd = iadd + r
                     do p = 1, q-(r+1)
                        iadd = iadd + r
C_MOD      print *, 'modifying dcore(',iadd,') at line ',__LINE__
                        dcore(iadd) = dcore(iadd) + dscr(ndx)
C_ONE      if (dcore(iadd).gt.1.0d0) print *, dcore(iadd)
                        ndx  = ndx  + 1
                        iadd = iadd + p
                     end do
                  end do
c              end if (r.ne.(to_q-1))
               end if
c           end if (r.ne.to_q)
            end if
c        else if (r.eq.0) then
         else
            ndx = ndx + 1
            do q = 2, to_q
               ndx = ndx + 1
               do p = 1, q-1
C_MOD      print *, 'modifying dcore(',iadd,') at line ',__LINE__
                  dcore(iadd) = dcore(iadd) + dscr(ndx)
C_ONE      if (dcore(iadd).gt.1.0d0) print *, dcore(iadd)
                  iadd = iadd + p
                  ndx  = ndx  + 1
               end do
            end do
c        end if (r.ne.0)
         end if
      else

c   o irp_p = irp_r < irp_q
      if (irp_p.eq.irp_r) then
         to_p = max_p-1
         ioff = rshift(r*(r-1),1)
         do q = 0, max_q-1
            if (r.ne.0) then
               iadd = iadd + ioff
               do p = 0, r-1
C_MOD      print *, 'modifying dcore(',iadd+p,') at line ',__LINE__
                  dcore(iadd+p) = dcore(iadd+p) - dscr(ndx+p)
C_ONE      if (dcore(iadd+p).gt.1.0d0) print *, dcore(iadd+p)
               end do
               iadd = iadd + r
               ndx  = ndx  + r + 1
            else
               ndx  = ndx  + 1
            end if
            if (r.ne.to_p) then
               do p = 1, to_p-r
                  iadd = iadd + r
C_MOD      print *, 'modifying dcore(',iadd,') at line ',__LINE__
                  dcore(iadd) = dcore(iadd) + dscr(ndx)
C_ONE      if (dcore(iadd).gt.1.0d0) print *, dcore(iadd)
                  ndx  = ndx  + 1
                  iadd = iadd + p
               end do
            end if
         end do
      else

c   o irp_p < irp_r = irp_q
      if (irp_r.eq.irp_q) then
         if (r.ne.0) then
            iadd = iadd + ( max_p * rshift(r*(r-1),1) )
            itmp = max_p * r
            do pq = 0, itmp-1
C_MOD      print *, 'modifying dcore(',iadd+pq,') at line ',__LINE__
               dcore(iadd+pq) = dcore(iadd+pq) + dscr(ndx+pq)
C_ONE      if (dcore(iadd+pq).gt.1.0d0) print *, dcore(iadd+pq)
            end do
            ndx  = ndx  + itmp + max_p
            iadd = iadd + lshift(itmp,1)
         else
            ndx  = ndx  + max_p
         end if
         to_q = max_q-1
         if (r.ne.to_q) then
            to_p = max_p-1
            do q = 1, to_q-r
               do p = 0, to_p
C_MOD      print *, 'modifying dcore(',iadd+p,') at line ',__LINE__
                  dcore(iadd+p) = dcore(iadd+p) - dscr(ndx+p)
C_ONE      if (dcore(iadd+p).gt.1.0d0) print *, dcore(iadd+p)
               end do
               iadd = iadd + ( max_p * r ) + ( max_p * q )
               ndx  = ndx  + max_p
            end do
         end if
      else

c   o irp_p < irp_r < irp_q
      ioff = max_p * max_r
      iadd = iadd + ( max_p * r )
      to_p = max_p-1
      do q = 1, max_q
         do p = 0, to_p
C_MOD      print *, 'modifying dcore(',iadd+p,') at line ',__LINE__
            dcore(iadd+p) = dcore(iadd+p) - dscr(ndx+p)
C_ONE      if (dcore(iadd+p).gt.1.0d0) print *, dcore(iadd+p)
         end do
         ndx  = ndx  + max_p
         iadd = iadd + ioff
      end do

c     end if (irp_r.eq.irp_q)
      end if
c     end if (irp_p.eq.irp_r)
      end if
c     end if (irp_p.eq.irp_q)
      end if
c     end if (irp_q.lt.irp_r)
      end if
c     end if (irp_r.lt.irp_p)
      end if

c ----------------------------------------------------------------------

c      o close the T3 conditional
         else
c         o itmp is the number of P<Q pairs to skip
            ndx = ndx + itmp
c        end if (do_t3)
         end if

c   o close the loop over irreps of Q in T3(*,PQR)
c     end if (do_irp_q)
      end if
c     end do irp_q = 1, nirrep
      end do

#undef C_MOD
#undef C_ONE

c __FILE__ : end
