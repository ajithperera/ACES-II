c __FILE__ : begin

c     dscr(ndx): the first T3(IJK,PQR) element

c   o loop over virtual irreps of T3(IJK,PQR)
      do irp_q = 1, nirrep
         irp_p = dirprd(irp_q,irp_pq)
         if (irp_p.eq.irp_q) then
            max_p = vrt(irp_p,ispin)
            max_q = max_p
            do_irp_q = (max_q.gt.1)
         else
            if (irp_p.lt.irp_q) then
               max_p = vrt(irp_p,ispin)
               max_q = vrt(irp_q,ispin)
               do_irp_q = ((max_p.ne.0).and.(max_q.ne.0))
            else
               do_irp_q = .false.
            end if
         end if
      if (do_irp_q) then

c      o skip irp_q if there are not enough virtual orbitals for T3
c        (itmp is the number of p<q pairs to skip if we fail do_t3)
         if (irp_p.eq.irp_q) then
            if (irp_r.eq.irp_p) then
               itmp  = 1
               do_t3 = (max_q.ne.2)
            else
               do_t3 = .true.
            end if
         else
            if (irp_r.eq.irp_p) then
                  itmp  = max_q
                  do_t3 = (max_p.ne.1)
            else
               if (irp_r.eq.irp_q) then
                  itmp  = max_p
                  do_t3 = (max_q.ne.1)
               else
                  do_t3 = .true.
               end if
            end if
         end if
         if (do_t3) then

c         o point to the irreps whose T3 amplitudes are in the buffer
            irp_z = max(irp_p,irp_q,irp_r)
            irp_x = min(irp_p,irp_q,irp_r)
            irp_y = irp_p + irp_q + irp_r - irp_x - irp_z
            itmp  = rshift(-irp_z+irp_z*irp_z,1) + irp_y
            iadd  = ndx_t3vrt(itmp)

c         o Now, we need to consider how p and q run across r.

            if (irp_r.lt.irp_p) then
               if (irp_p.eq.irp_q) then
                  itmp = rshift(-max_q+max_q*max_q,1)
               else
                  itmp = ( max_p * max_q )
               end if
               iadd = iadd + r
               do pq = 0, itmp-1
c      write(*,*) 'modifying dcore(',iadd,') at line ',__LINE__
                  dcore(iadd) = dcore(iadd) + dscr(ndx+pq)
c      if (dcore(iadd).gt.1.0d0) write(*,*) dcore(iadd)
                  iadd = iadd + max_r
               end do
               ndx = ndx + itmp
            else

               if (irp_q.lt.irp_r) then
                  if (irp_p.eq.irp_q) then
                     itmp = rshift(-max_q+max_q*max_q,1)
                  else
                     itmp = ( max_q * max_p )
                  end if
                  iadd = iadd + ( r * itmp )
                  do pq = 0, itmp-1
c      write(*,*) 'modifying dcore(',iadd+pq,') at line ',__LINE__
                     dcore(iadd+pq) = dcore(iadd+pq) + dscr(ndx+pq)
c      if (dcore(iadd+pq).gt.1.0d0) write(*,*) dcore(iadd+pq)
                  end do
                  ndx = ndx + itmp
               else

                  if (irp_p.eq.irp_q) then
                     to_q = max_q-1
                     if (r.eq.0) then
                        ndx = ndx + 1
                        do q = 2, to_q
                           ndx = ndx + 1
                           do p = 1, q-1
c      write(*,*) 'modifying dcore(',iadd,') at line ',__LINE__
                              dcore(iadd) = dcore(iadd) + dscr(ndx)
c      if (dcore(iadd).gt.1.0d0) write(*,*) dcore(iadd)
                              iadd = iadd + p
                              ndx  = ndx  + 1
                           end do
                        end do
                     else
                        ioff = rshift(-r+r*r,1)
                        if (r.gt.1) then
c                           iadd = iadd + ( r * (r-1) * (r-2) ) / 6
                           iadd = iadd + ( (r*r) + (-3*r) + 2 ) * r / 6
                           do pq = 0, ioff-1
c      write(*,*) 'modifying dcore(',iadd+pq,') at line ',__LINE__
                              dcore(iadd+pq) =   dcore(iadd+pq)
     &                                         + dscr(ndx+pq)
c      if (dcore(iadd+pq).gt.1.0d0) write(*,*) dcore(iadd+pq)
                           end do
                           iadd = iadd + ioff
                           ndx  = ndx  + ioff + r
                        else
                           ndx  = ndx  + 1
                        end if
                        if (r.ne.to_q) then
                           iadd = iadd + ioff
                           do p = 0, r-1
c      write(*,*) 'modifying dcore(',iadd+p,') at line ',__LINE__
                              dcore(iadd+p) =   dcore(iadd+p)
     &                                        - dscr(ndx+p)
c      if (dcore(iadd+p).gt.1.0d0) write(*,*) dcore(iadd+p)
                           end do
                           iadd = iadd + r
                           ndx  = ndx  + r + 1
                           if (r.ne.(to_q-1)) then
                              do q = r+2, to_q
                                 iadd = iadd + ioff
                                 do p = 0, r-1
c      write(*,*) 'modifying dcore(',iadd+p,') at line ',__LINE__
                                    dcore(iadd+p) =   dcore(iadd+p)
     &                                              - dscr(ndx+p)
c      if (dcore(iadd+p).gt.1.0d0) write(*,*) dcore(iadd+p)
                                 end do
                                 ndx  = ndx  + r + 1
                                 iadd = iadd + r
                                 do p = 1, q-(r+1)
                                    iadd = iadd + r
c      write(*,*) 'modifying dcore(',iadd,') at line ',__LINE__
                                    dcore(iadd) =   dcore(iadd)
     &                                            + dscr(ndx)
c      if (dcore(iadd).gt.1.0d0) write(*,*) dcore(iadd)
                                    ndx  = ndx  + 1
                                    iadd = iadd + p
                                 end do
                              end do
c                          end if (r.ne.(to_q-1))
                           end if
c                       end if (r.ne.to_q)
                        end if
c                    end if (r.eq.0)
                     end if
                  else

c                 else if (irp_p.ne.irp_q) then
                     if (irp_p.eq.irp_r) then
                        to_p = max_p-1
                        ioff = rshift(-r+r*r,1)
                        do q = 0, max_q-1
                           if (r.ne.0) then
                              iadd = iadd + ioff
                              do p = 0, r-1
c      write(*,*) 'modifying dcore(',iadd+p,') at line ',__LINE__
                                 dcore(iadd+p) =   dcore(iadd+p)
     &                                           - dscr(ndx+p)
c      if (dcore(iadd+p).gt.1.0d0) write(*,*) dcore(iadd+p)
                              end do
                              ndx  = ndx  + r + 1
                              iadd = iadd + r
                           else
                              ndx  = ndx  + 1
                           end if
                           if (r.ne.to_p) then
                              do p = 1, to_p-r
                                 iadd = iadd + r
c      write(*,*) 'modifying dcore(',iadd,') at line ',__LINE__
                                 dcore(iadd) = dcore(iadd) + dscr(ndx)
c      if (dcore(iadd).gt.1.0d0) write(*,*) dcore(iadd)
                                 ndx  = ndx  + 1
                                 iadd = iadd + p
                              end do
                           end if
                        end do
                     else

                        if (irp_r.eq.irp_q) then
                           if (r.ne.0) then
                              iadd =   iadd
     &                               + ( max_p * rshift(-r+r*r,1) )
                              itmp = max_p * r
                              do pq = 0, itmp-1
c      write(*,*) 'modifying dcore(',iadd+pq,') at line ',__LINE__
                                 dcore(iadd+pq) =   dcore(iadd+pq)
     &                                            + dscr(ndx+pq)
c      if (dcore(iadd+pq).gt.1.0d0) write(*,*) dcore(iadd+pq)
                              end do
                              ndx  = ndx  + itmp + max_p
                              iadd = iadd + lshift(itmp,1)
                           else
                              ndx  = ndx  + max_p
                           end if
                           to_q = max_q-1
                           if (r.ne.to_q) then
                              to_p = max_p-1
                              do q = 1, to_q-r
                                 do p = 0, to_p
c      write(*,*) 'modifying dcore(',iadd+p,') at line ',__LINE__
                                    dcore(iadd+p) =   dcore(iadd+p)
     &                                              - dscr(ndx+p)
c      if (dcore(iadd+p).gt.1.0d0) write(*,*) dcore(iadd+p)
                                 end do
                                 iadd = iadd + ( (q+r) * max_p )
                                 ndx  = ndx  + max_p
                              end do
                           end if
                        else

c                       else if ((irp_p.lt.irp_r).and.(irp_r.lt.irp_q)) then
                           ioff = max_p * max_r
                           iadd = iadd + ( r * max_p )
                           to_p = max_p-1
                           do q = 1, max_q
                              do p = 0, to_p
c      write(*,*) 'modifying dcore(',iadd+p,') at line ',__LINE__
                                 dcore(iadd+p) =   dcore(iadd+p)
     &                                           - dscr(ndx+p)
c      if (dcore(iadd+p).gt.1.0d0) write(*,*) dcore(iadd+p)
                              end do
                              ndx  = ndx  + max_p
                              iadd = iadd + ioff
                           end do
c                       end if (irp_r.eq.irp_q)
                        end if

c                    end if (irp_p.eq.irp_r)
                     end if
c                 end if (irp_p.eq.irp_q)
                  end if
c              end if (irp_q.lt.irp_r)
               end if
c           end if (irp_r.lt.irp_p)
            end if

c      o close the T3 conditional
         else
c         o itmp is the number of p<q pairs to skip
            ndx = ndx + itmp
c        end if (do_t3)
         end if

c   o close the loop over virtual irreps
c     end if (do_irp_q)
      end if
c     end do irp_q = 1, nirrep
      end do

c __FILE__ : end
