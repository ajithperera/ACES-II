      SUBROUTINE T3FT314O(T3,CORE,MAXCOR,ISPIN,LEN,IRPI,IRPJ,IRPK,
     1                    IRPIJK,I,J,K)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER VRT,POP,DIRPRD
      LOGICAL NONEQL,IJMEQL,IJEQL,JMEQL,MJKEQL,MJEQL,JKEQL,IMKEQL,
     1                      IMEQL,MKEQL
      DIMENSION T3(LEN),CORE(1)
C
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /SYMINF/ NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON /SYM/    POP(8,2),VRT(8,2),NT1(2),NFMI(2),NFEA(2)
      COMMON /FLAGS/  IFLAGS(100)
      EQUIVALENCE(ICLLVL,IFLAGS( 2))
      EQUIVALENCE(IDRLVL,IFLAGS( 3))
      COMMON /FILES/  LUOUT,MOINTS
C
      COMMON /T3OFF/  IOFFVV(8,8,10),IOFFOO(8,8,10),IOFFVO(8,8,4)
      COMMON /T3IOOF/ IJKPOS(8,8,8,2),IJKLEN(36,8,4),IJKOFF(36,8,4),
     1                NCOMB(4)
C
      INDEX(I) = I*(I-1)/2
C
      I000  = 1
      I010  = I000 + NFMI(ISPIN)
      I020  = I010 + LEN
      NEED  = I020 * IINTFP
      IF(NEED.GT.MAXCOR)THEN
      WRITE(LUOUT,1010) NEED,MAXCOR
 1010 FORMAT(' @T3FT314O-F, Insufficient memory. Need ',I10,' Got ',I10)
      CALL INSMEM('T3FT314O',NEED,MAXCOR)
      ENDIF
C
C     If this is a CCSDT calculation, we read the FMI intermediate.
C     Otherwise, we read the OCC-OCC block of the Fock matrix.
C
      IF(ICLLVL.EQ.18)THEN
      LISTF = 91
      LPART = ISPIN
      ELSE
      LISTF = 91
      LPART = ISPIN + 2
      ENDIF

      CALL GETLST(CORE(I000),1,1,2,LPART,LISTF)
C     CALL SUMBLK(CORE(I000),NFMI(ISPIN))
C
      DO   50 IRPM=1,NIRREP
C
      IF(IRPM.NE.IRPI.AND.IRPM.NE.IRPJ.AND.IRPM.NE.IRPK) GOTO 50
      IF(POP(IRPM,ISPIN).LE.0)                           GOTO 50
C
      IF(IRPM.EQ.IRPK)THEN
C
C     T(ABC,IJM) * F(M,K)
C
      IJM  = IJKPOS(IRPI,IRPJ,IRPM,1)
      IOFF = IJKOFF(IJM,IRPIJK,1 + 3*(ISPIN-1))
C
      IJMEQL = .FALSE.
      IJEQL  = .FALSE.
      JMEQL  = .FALSE.
      NONEQL = .FALSE.
      IF(IRPM.EQ.IRPI.AND.IRPM.EQ.IRPJ) IJMEQL = .TRUE.
      IF(IRPI.EQ.IRPJ.AND.IRPM.NE.IRPI) IJEQL  = .TRUE.
      IF(IRPI.NE.IRPJ.AND.IRPM.EQ.IRPJ) JMEQL  = .TRUE.
      IF(IRPM.NE.IRPI.AND.IRPM.NE.IRPJ.AND.IRPI.NE.IRPJ) NONEQL = .TRUE.
C
      IF(IJEQL)THEN
      NIJ = (POP(IRPJ,ISPIN) * (POP(IRPJ,ISPIN) - 1))/2
      IJ  = INDEX(J-1) + I
      ENDIF
      IF(NONEQL)THEN
      NIJ = POP(IRPI,ISPIN) * POP(IRPJ,ISPIN)
      IJ  = (J-1) * POP(IRPI,ISPIN) + I
      ENDIF
C
      DO   20 M=1,POP(IRPM,ISPIN)
      SIGN = 1.0D+00
C
      IF((IRPI.EQ.IRPM.AND.I.EQ.M).OR.(IRPJ.EQ.IRPM.AND.J.EQ.M)) GOTO 20
C
      IF(NONEQL.OR.IJEQL) IJMVAL = IOFF + (M-1)*NIJ + IJ
C
      IF(JMEQL)THEN
      JM = INDEX(MAX(J,M)-1) + MIN(J,M)
      IJMVAL = IOFF + (JM-1) * POP(IRPI,ISPIN) + I
      IF(J.GT.M) SIGN = -1.0D+00
      ENDIF
C
      IF(IJMEQL)THEN
      MAXVAL = MAX(I,J,M)
      MINVAL = MIN(I,J,M)
      IF(M.LT.I) MIDVAL = I
      IF(M.GT.J) MIDVAL = J
      IF(M.LT.J.AND.M.GT.I)THEN
      MIDVAL = M
      SIGN = -1.0D+00
      ENDIF
      IJMVAL = IOFF + ((MAXVAL-1)*(MAXVAL-2)*(MAXVAL-3))/6 + 
     1         INDEX(MIDVAL-1) + MINVAL
      ENDIF
C
      FMK = CORE(I000 - 1 + IOFFOO(IRPM,1,2+ISPIN) + 
     1                      (K-1)*POP(IRPM,ISPIN) + M) * SIGN
C
      CALL GETLIST(CORE(I010),IJMVAL,1,1,IRPIJK,1 + 3*(ISPIN-1) + 4)
C
      CALL VADD(T3,T3,CORE(I010),LEN,-FMK)
   20 CONTINUE
C
      ENDIF
C
      IF(IRPM.EQ.IRPI)THEN
C
C     T(ABC,MJK) * F(M,I)
C
      MJK  = IJKPOS(IRPM,IRPJ,IRPK,1)
      IOFF = IJKOFF(MJK,IRPIJK,1 + 3*(ISPIN-1))
C
      MJKEQL = .FALSE.
      MJEQL  = .FALSE.
      JKEQL  = .FALSE.
      NONEQL = .FALSE.
      IF(IRPM.EQ.IRPJ.AND.IRPM.EQ.IRPK) MJKEQL = .TRUE.
      IF(IRPM.EQ.IRPJ.AND.IRPM.NE.IRPK) MJEQL  = .TRUE.
      IF(IRPM.NE.IRPJ.AND.IRPJ.EQ.IRPK) JKEQL  = .TRUE.
      IF(IRPM.NE.IRPJ.AND.IRPM.NE.IRPK.AND.IRPJ.NE.IRPK) NONEQL = .TRUE.
C
      IF(MJEQL)THEN
      NMJ = (POP(IRPJ,ISPIN) * (POP(IRPJ,ISPIN) - 1))/2
      ENDIF
      IF(NONEQL)THEN
      NMJ = POP(IRPM,ISPIN) * POP(IRPJ,ISPIN)
      ENDIF
C
      IF(JKEQL)THEN
      NJK = (POP(IRPK,ISPIN) * (POP(IRPK,ISPIN) - 1))/2
      JK  = INDEX(K-1) + J
      ENDIF
C
      DO   30 M=1,POP(IRPM,ISPIN)
      SIGN = 1.0D+00
C
      IF((IRPJ.EQ.IRPM.AND.J.EQ.M).OR.(IRPK.EQ.IRPM.AND.K.EQ.M)) GOTO 30
C
      IF(NONEQL) MJKVAL = IOFF + (K-1)*NMJ + (J-1)*POP(IRPM,ISPIN) + M
C
      IF(MJEQL)THEN
      MJ = INDEX(MAX(J,M)-1) + MIN(J,M)
      MJKVAL = IOFF + (K-1) * NMJ + MJ
      IF(J.LT.M) SIGN = -1.0D+00
      ENDIF
C
      IF(JKEQL) MJKVAL = IOFF + (JK-1)*POP(IRPM,ISPIN) + M
C
      IF(MJKEQL)THEN
      MAXVAL = MAX(M,J,K)
      MINVAL = MIN(M,J,K)
      IF(M.LT.J) MIDVAL = J
      IF(M.GT.K) MIDVAL = K
      IF(M.LT.K.AND.M.GT.J)THEN
      MIDVAL = M
      SIGN = -1.0D+00
      ENDIF
      MJKVAL = IOFF + ((MAXVAL-1)*(MAXVAL-2)*(MAXVAL-3))/6 + 
     1         INDEX(MIDVAL-1) + MINVAL
      ENDIF
C
      FMI = CORE(I000 - 1 + IOFFOO(IRPM,1,2+ISPIN) + 
     1                      (I-1)*POP(IRPM,ISPIN) + M) * SIGN
C
      CALL GETLIST(CORE(I010),MJKVAL,1,1,IRPIJK,1 + 3*(ISPIN-1) + 4)
C
      CALL VADD(T3,T3,CORE(I010),LEN,-FMI)
   30 CONTINUE
C
      ENDIF
C
      IF(IRPM.EQ.IRPJ)THEN
C
C     T(ABC,IMK) * F(M,J)
C
      IMK  = IJKPOS(IRPI,IRPM,IRPK,1)
      IOFF = IJKOFF(IMK,IRPIJK,1 + 3*(ISPIN-1))
C
      IMKEQL = .FALSE.
      IMEQL  = .FALSE.
      MKEQL  = .FALSE.
      NONEQL = .FALSE.
      IF(IRPM.EQ.IRPI.AND.IRPM.EQ.IRPK) IMKEQL = .TRUE.
      IF(IRPM.EQ.IRPI.AND.IRPM.NE.IRPK) IMEQL  = .TRUE.
      IF(IRPM.NE.IRPI.AND.IRPM.EQ.IRPK) MKEQL  = .TRUE.
      IF(IRPM.NE.IRPI.AND.IRPM.NE.IRPK.AND.IRPI.NE.IRPK) NONEQL = .TRUE.
C
      IF(IMEQL)THEN
      NIM = (POP(IRPM,ISPIN) * (POP(IRPM,ISPIN) - 1))/2
      ENDIF
      IF(NONEQL)THEN
      NIM = POP(IRPI,ISPIN) * POP(IRPM,ISPIN)
      ENDIF
C
      IF(MKEQL)THEN
      NMK = (POP(IRPK,ISPIN) * (POP(IRPK,ISPIN) - 1))/2
      ELSE
      NMK = POP(IRPM,ISPIN) * POP(IRPK,ISPIN)
      ENDIF
C
      DO   40 M=1,POP(IRPM,ISPIN)
      SIGN = 1.0D+00
C
      IF((IRPI.EQ.IRPM.AND.I.EQ.M).OR.(IRPK.EQ.IRPM.AND.K.EQ.M)) GOTO 40
C
      IF(NONEQL) IMKVAL = IOFF + (K-1)*NIM + (M-1)*POP(IRPI,ISPIN) + I
C
      IF(IMEQL)THEN
      IM = INDEX(MAX(I,M)-1) + MIN(I,M)
      IMKVAL = IOFF + (K-1) * NIM + IM
      IF(I.GT.M) SIGN = -1.0D+00
      ENDIF
C
      IF(MKEQL)THEN
      MK     = INDEX(MAX(M,K)-1) + MIN(M,K)
      IMKVAL = IOFF + (MK-1)*POP(IRPI,ISPIN) + I
      IF(M.GT.K) SIGN = -1.0D+00
      ENDIF
C
      IF(IMKEQL)THEN
      MAXVAL = MAX(I,M,K)
      MINVAL = MIN(I,M,K)
      IF(M.LT.I)THEN
      MIDVAL = I
      SIGN = -1.0D+00
      ENDIF
      IF(M.GT.K)THEN
      MIDVAL = K
      SIGN = -1.0D+00
      ENDIF
      IF(M.LT.K.AND.M.GT.I)THEN
      MIDVAL = M
      ENDIF
      IMKVAL = IOFF + ((MAXVAL-1)*(MAXVAL-2)*(MAXVAL-3))/6 + 
     1         INDEX(MIDVAL-1) + MINVAL
      ENDIF
C
      FMJ = CORE(I000 - 1 + IOFFOO(IRPM,1,2+ISPIN) + 
     1                      (J-1)*POP(IRPM,ISPIN) + M) * SIGN
C
      CALL GETLIST(CORE(I010),IMKVAL,1,1,IRPIJK,1 + 3*(ISPIN-1) + 4)
C
      CALL VADD(T3,T3,CORE(I010),LEN,-FMJ)
   40 CONTINUE
C
      ENDIF
C
   50 CONTINUE
#ifdef _DEBUG_LVLM
      Write(*,*) "The T3*FOO contribution"
      call checksum("T3FOO", T3, Len)
#endif
      RETURN
      END
