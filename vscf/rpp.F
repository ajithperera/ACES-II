#include "flags.h"
      SUBROUTINE RPP(ICORE,F,B,COEFF,NBFIRR,NIRREP,ITNUMB,
     &               IERRLN,IUHF)
C
C THIS ROUTINE SETS UP THE LINEAR SYSTEM OF EQUATIONS NEEDED
C  FOR THE RPP METHOD FOR THE ACCELERATION OF SCF CONVERGENCE
C  AND PERFORMS EXTRAPOLATION OF THE FOCK MATRIX IF CERTAIN CRITERIA
C  ARE MET.
C
C  THIS IS A STRAIGHTFORWARD IMPLEMENTATION OF THE EQUATIONS GIVEN
C  BY PULAY (J. COMP. CHEM. 3, 556 [1982]).
C
CEND
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL DOEXTRAP
      DIMENSION B(IORDER+1,IORDER+2),ICORE(1),F(1),COEFF(2*(IORDER+1))
      DIMENSION B_BARE(IORDER,IORDER),B_VEC(IORDER,IORDER)
      DIMENSION B_KEEP(IORDER,IORDER),ERROR(Iorder)
      DIMENSION NBFIRR(8)
C
C ISTART GIVES THE RELATIVE POSITION OF THE OLDEST QUANTITIES WITHIN
C  THE CYCLIC BUFFER USED TO HOLD THE FOCK AND ERROR MATRICES
C
      COMMON /FLAGS/  IFLAGS(100)
      COMMON /FLAGS2/ IFLAGS2(500)
      COMMON /RPPINF/ ISTART,IORDER,IADERR(200),IADFCK(200,2)
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /DMPCOM/ ITDLST
      SAVE DOEXTRAP
      DATA ONEM /-1.0D0/
      DATA ZILCH /0.0D0/
C
C PICK UP B MATRIX FROM JOBARC
C
      NSIZEB=IORDER+1
      LENGTH=IINTFP*(NSIZEB*NSIZEB+NSIZEB)
      CALL GETREC(-1,'JOBARC','RPPBMAT ',LENGTH,B)
C
C NSIZEB IS THE SIZE OF THE (UNAUGMENTED) B MATRIX.  NOTE THAT THE
C  MATRIX DEFINED BY THE DIMENSION STATEMENT CORRESPONDS TO THE
C  AUGMENTED MATRIX USED IN SOLVING FOR THE EXTRAPOLATION COEFFICIENTS
C
      ERRTOL=0.1
      ITMAX=IFLAGS(40)
C
C IF THE LAST ROW AND COLUMN OF THE UNAUGMENTED B MATRIX EXIST, THEN
C  SLIDE EVERYTHING UP ONE POSITION.
C
      IF(ITNUMB.GT.IORDER)THEN
       DO 5 IROW=2,IORDER
        IROWP=IROW+1
        DO 6 ICOL=2,IORDER
         ICOLP=ICOL+1
         B(IROW,ICOL)=B(IROWP,ICOLP)
6       CONTINUE
5      CONTINUE
      ENDIF
C
C IF THIS IS THE FIRST TIME THROUGH, THEN WE NEED TO INITIALIZE THE
C  B MATRIX AND THE AUGMENTED COLUMN.
C
      IF(ITNUMB.EQ.1)THEN
       CALL ZERO(B,NSIZEB*NSIZEB+NSIZEB)
       B(1,IORDER+2)=ONEM
       DO 10 I=2,NSIZEB
        B(I,1)=ONEM
10     CONTINUE
       IOFF=IADERR(1)
       X=0.0
       DO 15 IRREP=1,NIRREP
        NSIZE=NBFIRR(IRREP)
        X=X+TRCPRD(ICORE(IOFF),ICORE(IOFF),NSIZE,NSIZE)
        IOFF=IOFF+NSIZE*NSIZE*IINTFP
15     CONTINUE
       B(2,2)=X
       CALL SYMETB(B,NSIZEB)
       DOEXTRAP=.FALSE.
      ELSE
C
C CONSTRUCT THE LAST ROW OF THE B MATRIX.  THIS WILL ALWAYS BE
C  EQUAL TO THE MAXIMUM OF THE ITERATION NUMBER PLUS ONE OR 
C  THE MAXIMUM RPP ORDER PLUS ONE.
C
       IROW=MIN(NSIZEB,ITNUMB+1)
       IPOS=ICRCLC(IROW-1,ISTART,IORDER)
       IPOSROW=IADERR(IPOS)
       DO 20 ICOL=2,IROW
        IPOS=ICRCLC(ICOL-1,ISTART,IORDER)
        IPOSCOL=IADERR(IPOS)
C
C LOOP OVER SYMMETRY BLOCKS AND FORM THE B MATRIX ELEMENT
C
        X=0.0
        IOFFROW=IPOSROW
        IOFFCOL=IPOSCOL
        DO 30 IRREP=1,NIRREP
         NSIZE=NBFIRR(IRREP)
         X=X+TRCPRD(ICORE(IOFFROW),ICORE(IOFFCOL),NSIZE,NSIZE)
         IOFFROW=IOFFROW+NSIZE*NSIZE*IINTFP
         IOFFCOL=IOFFCOL+NSIZE*NSIZE*IINTFP
30      CONTINUE
        B(IROW,ICOL)=X         
20     CONTINUE
       CALL SYMETB(B,NSIZEB)
      ENDIF
C
C NOW PUT THE B MATRIX ON JOBARC SO THAT IT CAN BE READ ON THE
C  NEXT ITERATION
C
      CALL PUTREC(20,'JOBARC','RPPBMAT ',LENGTH,B)
C
C CHECK LARGEST ELEMENT OF CURRENT ERROR MATRIX.  IF IT IS BELOW A FIXED
C  THRESHOLD, THEN INITIATE THE RPP PROCEDURE.  OTHERWISE, SIMPLY
C  RETURN WITHOUT EXTRAPOLATING THE FOCK MATRIX.
C
      LENGTH=NSIZEB*NSIZEB
      IPOS1=ICRCLC(MIN(ITNUMB,IORDER),ISTART,IORDER)
      X=ERRMAX(ICORE(IADERR(IPOS1)),IERRLN)
      IF(ABS(X).GT.ERRTOL.AND..NOT.DOEXTRAP.AND.
     &   ITNUMB.LT.ITMAX.OR.ITNUMB.EQ.1)RETURN
      IF(IFLAGS2(109).GT.0.AND.ITNUMB.LT.ITDLST) RETURN
C
C THE EXTRAPOLATION PROCEDURE WILL BE PERFORMED.
C
      DOEXTRAP=.TRUE.
       
      IF (IFLAGS(h_IFLAGS_scf_extrap) .EQ. 3) THEN

C Do the C2DIIS as given in. The eigenvectors of the B C = C
C where B= <ei|ej> obtained. One of them (choosen from a
C estbalished criterion) is used as the expansion coefficients. 
C Ajith Perera, 01/2015. 

          CALL C2_DIIS(B, B_BARE, B_VEC, B_KEEP, ERROR, IORDER,
     &                 IKEEP)
       NORDER=MIN(ITNUMB+1,IORDER+1)
       COEFF(1) = 0.0D0
       DO I = 1, Iorder
          COEFF(I+1)  = B_vec(I, IKEEP)
       ENDDO

      ELSE

C     IFLAGS(41)=1
C
C SOLVE FOR THE COEFFICIENT VECTOR.
C
C NORDER IS THE DIMENSION OF THE UNAUGMENTED B MATRIX USED TO
C  FORM THE EXPANSION COEFFICIENTS.  IORDER+1 CORRESPONDS TO THE
C  PHYSICAL SIZE OF THE B MATRIX, WHICH IS INFORMATION USED BY MINV.
C  THE TOLERANCE PARAMETER HAS BEEN SET TO ZERO SINCE THIS SEEMS TO
C  BE THE BEST WAY TO USE MINV.  
C
      NORDER=MIN(ITNUMB+1,IORDER+1)
      ISOLPS=IORDER+2
      IF(NORDER.LT.IORDER+1)THEN
       CALL SCOPY(IORDER+1,B(1,IORDER+2),1,B(1,NORDER+1),1)
       ISOLPS=NORDER+1
      ENDIF
      CALL MINV(B,NORDER,IORDER+1,COEFF,DET,ZILCH,1,0)
      CALL SCOPY(NORDER,B(1,ISOLPS),1,COEFF,1)
      ENDIF 

#ifdef _DEBUG_LVLM
      Write(*,*)
      Write(*,*) "C-1/2 DIIS expansion coeffiecients"
      Write(*,"(6(1x,F12.8))") (COEFF(J), j= 1, 2*(Iorder+1))
      Write(*,*)
#endif 
c To check for singularities in the RPP B matrix
C we diagonalize and regularize any zero eigenvalues
c     CALL RPPSING(B,COEFF,IORDER+1,NORDER)
C
C THE COEFFICIENT ARRAY RETURNED BY THE LAST CALL IS A VECTOR 
C  OF LENGTH IORDER+1.  THE FIRST ELEMENT IS A LAGRANGE MULTIPLIER
C  AND IS NOT USED.  THE SECOND THROUGH LAST ELEMENTS ARE THE 
C  EXPANSION COEFFICIENTS FOR THE OLDEST->NEWEST ITERATES.
C
C EXTRAPOLATE THE FOCK MATRIX NOW
C
C      F' = SUM COEFF(I)*F(I)
C            I
C
C START WITH MOST RECENT ITERATE AND WORK BACKWARDS.  IN THE LOOP
C  BELOW, N REFERS TO THE RELATIVE INDEX OF THE ITERATE BEING
C  CONSIDERED, AND ITS APPROPRIATE EXPANSION VECTOR LIVES IN
C  COEFF(N+1).
C
C
      CALL ZERO(F,IERRLN*(1+IUHF))
      DO 100 N=NORDER-1,1,-1
       IOFF=1
       DO 101 ISPIN=1,1+IUHF
        ILCFCK=IADFCK(ICRCLC(N,ISTART,IORDER),ISPIN)
        CALL SAXPY(IERRLN,COEFF(N+1),ICORE(ILCFCK),1,F(IOFF),1)
 
        IOFF=IOFF+IERRLN
101    CONTINUE
100   CONTINUE
      END
