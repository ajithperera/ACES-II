      SUBROUTINE LINEQY2(SCR,MAXCOR,IUHF,ASMALL,ASQUARE,KMAX,IRREPX,
     &                   IOFFSET,IPERT,FREQ,ISIDE,REALFREQ)
C
C RECURSIVELY EVALUATE MOMENTS OF THE DIPOLE OSCILLATOR STRENGTH
C DISTRIBUTION -- FANCY STUFF.
C
C                        
C   <Q|exp(-T) H exp(T)|Q><Q|Y|0> = <Q|M|0>
C
C FOR THE OPERATOR Y, USING A STANDARD REDUCED SUBSPACE
C ALGORITHM.
C
C LIST 1,470 - OLD EXPANSION (E) VECTORS, ONE VECTOR PER LOGICAL RECORD
C LIST 2,470 - OLD H*E VECTORS, ONE VECTOR PER LOGICAL RECORD
C LIST 1,471 - M VECTOR
C LIST 1,472 - DIAGONAL PART OF Hd, STORED ON ONE LOGICAL RECORD
C
C HERE H IS PARTITIONED INTO [Hd + D] WHERE Hd IS A DIAGONAL
C PART OF H AND D IS THE REMAINDER OF THE MATRIX
C
C EQUATION TO BE SOLVED FOR Y IS:
C
C         H * Y = M 
C
C      [Hd + D]Y = M
C
C    [1 + Hd(-1)*D] Y - Hd(-1) * M = 0
C
C THE LAST EQUATION IS THE FORM USED IN THIS ROUTINE.
C
C SUBSPACE BUILT UP BY SUCCESSIVE MULTIPLICATION OF TRIAL VECTORS BY
C Hd(-1)*D FOLLOWED BY ORTHOGONALIZATION
C 
CEND
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL CONVRG,DOUBLE,ESPROP,IOPTROOT,IOPTSYM,REALFREQ
      LOGICAL PRINT,PRINT2
C
      PARAMETER (MAXORD=100)
      PARAMETER (MAXROOT=100)
C
      DIMENSION SCR(MAXCOR),ASMALL(KMAX,KMAX),ASQUARE(KMAX)
C
      COMMON/EXTINF/NDIMR,IOLDEST
      COMMON/EXTRAP/MAXEXP,NREDUCE,NTOL,NSIZEC
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/FLAGS/IFLAGS(100)
C
      DATA ONE,ONEM,ZILCH,TWO /1.0D0,-1.0D0,0.0D0,2.0D0/
      DATA FACT /27.2116/
C
      INDXF(I,J,N)=I+(J-1)*N
      IGET(I)=1+MOD(IOLDEST+MAXORD-I,MAXORD+1)
C
      PRINT2=IFLAGS(1).GE.100
      PRINT=IFLAGS(1).GE.1
C
      CUTOFF=1.D-14
C
      icount=0
      I000=1
      I010=I000+NSIZEC
      I020=I010+NSIZEC
      I030=I020+NSIZEC
C
C PUT Hd ELEMENTS ON LIST 472
C
      CALL HBARDIAG(IRREPX,SCR,MAXCOR,IUHF,FREQ)
C
C PUT EVENTUAL SOLUTION VECTOR (M(R)) ON LIST 471
C
      CALL GETLST(SCR(I000),IOFFSET,1,1,IRREPX,372+ISIDE)
      CALL PUTLST(SCR(I000),1,1,1,1,471)
cdebug
c calculate s(1) = h**2 
      call getlst(scr(i010),ioffset,1,1,irrepx,374)
      IF(IUHF.EQ.0)THEN
       CALL SPNTSING(IRREPX,SCR(I010),SCR(I020),MAXCOR-I010+1)
      ENDIF
      write(6,*)' s(-1) = ',2.0d0*sdot(nsizec,scr(i000),1,scr(i010),1)
      CALL UPDATES(IRREPX,SCR(I000),444,0,IUHF)
      call hbarxc(scr(i000),maxcor,iuhf,iside,irrepx)
      CALL FETCHVEC(IRREPX,SCR(I000),IUHF,2,490,460)
      call getlst(scr(i010),ioffset,1,1,irrepx,374)
      IF(IUHF.EQ.0)THEN
       CALL SPNTSING(IRREPX,SCR(I010),SCR(I020),MAXCOR-I010+1)
      ENDIF
      write(6,*)' s(0) = ',2.0d0*sdot(nsizec,scr(i000),1,scr(i010),1)
      CALL UPDATES(IRREPX,SCR(I000),444,0,IUHF)
      call hbarxc(scr(i000),maxcor,iuhf,iside,irrepx)
      CALL FETCHVEC(IRREPX,SCR(I000),IUHF,2,490,460)
      call getlst(scr(i010),ioffset,1,1,irrepx,374)
      IF(IUHF.EQ.0)THEN
       CALL SPNTSING(IRREPX,SCR(I010),SCR(I020),MAXCOR-I010+1)
      ENDIF
      write(6,*)' s(1) = ',2.0d0*sdot(nsizec,scr(i000),1,scr(i010),1)
      call getlst(scr(i000),1,1,1,1,471)
cdebug-end
33    icount=icount+1
      I000=1
      I010=I000+NSIZEC
      I020=I010+NSIZEC
      I030=I020+NSIZEC
C
C INITIATE CONSTRUCTION OF SOLUTION SPACE
C
      CALL ZERO(ASMALL,KMAX*KMAX)
C
C SCALE INPUT VECTOR WITH DIAGONAL ELEMENTS OF HBAR - Hd-1 * M
C
      CALL GETLST(SCR(I010),1,1,1,1,472)
      DO 901 I=1,NSIZEC
       SCR(I000-1+I)=SCR(I000-1+I)/(SCR(I010-1+I))
901   CONTINUE 
C
C NORMALIZE VECTOR - THIS IS FIRST ELEMENT OF EXPANSION SPACE
C
      CALL SCOPY(NSIZEC,SCR(I000),1,SCR(I010),1)
      IF(IUHF.EQ.0)THEN
       CALL SPNTSING(IRREPX,SCR(I010),SCR(I020),MAXCOR-I010+1)
      ENDIF
      ZNORM=SQRT(SDOT(NSIZEC,SCR(I000),1,SCR(I010),1))
      X0=ONE/ZNORM
      CALL SSCAL(NSIZEC,X0,SCR(I000),1)
      CALL UPDATES(IRREPX,SCR(I000),444,0,IUHF)
      CALL PUTLST(SCR(I000),1,1,1,1,470)
C
      ASQUARE(1)=ONE
C
C BUILD REMAINING EXPANSION SPACE
C
      DO 1000 K=1,KMAX
C
C CALCULATE [Hd(-1) * D]*C(k) = Hd(-1) * [H*C(k) - Hd*C(k)]
C
       CALL HBARXC(SCR(I000),MAXCOR,IUHF,ISIDE,IRREPX)
       CALL FETCHVEC(IRREPX,SCR(I000),IUHF,2,490,460)
C
       CALL GETLST(SCR(I010),1,1,1,1,472)
       CALL GETLST(SCR(I020),K,1,1,1,470)
C
C ADD FREQUENCY DEPENDENCE
C
       DO 902 I=1,NSIZEC
        SCR(I000-1+I)=(SCR(I000-1+I)-SCR(I010-1+I)*SCR(I020-1+I))/
     &                 SCR(I010-1+I)
902    CONTINUE 
C     
       CALL PUTLST(SCR(I000),K,1,1,2,470)
C
       DO 100 I=1,K
        CALL GETLST(SCR(I000),I,1,1,1,470)
        DO 101 J=1,K
         CALL GETLST(SCR(I010),J,1,1,2,470)
         IF(IUHF.EQ.0)THEN
          CALL SPNTSING(IRREPX,SCR(I010),SCR(I020),MAXCOR-I010+1)
         ENDIF
         ASMALL(I,J)=SDOT(NSIZEC,SCR(I000),1,SCR(I010),1)
101     CONTINUE
100    CONTINUE
C
C ORTHOGONALIZE H'*C(k) TO EXISTING SUBSPACE
C
       CALL GETLST(SCR(I010),K,1,1,2,470)
       DO 102 I=1,K
        CALL GETLST(SCR(I000),I,1,1,1,470)
        X=-ASMALL(I,K)/ASQUARE(I)
        CALL SAXPY(NSIZEC,X,SCR(I000),1,SCR(I010),1)
102    CONTINUE
C
       CALL SCOPY(NSIZEC,SCR(I010),1,SCR(I020),1) 
       IF(IUHF.EQ.0)THEN
        CALL SPNTSING(IRREPX,SCR(I020),SCR(I030),MAXCOR-I020+1)
       ENDIF
       ASQUARE(K+1)=SDOT(NSIZEC,SCR(I010),1,SCR(I020),1)
       RESID=ASQUARE(K+1)
C
       IF(PRINT)THEN
        WRITE(6,5002)K,RESID
5002    FORMAT(T3,'@LINEQY-I, Residual after ',I5,' iterations is ',
     &         D15.10,'.')
       ENDIF
       CALL PUTLST(SCR(I010),K+1,1,1,1,470)
       CALL UPDATES(IRREPX,SCR(I010),444,0,IUHF)
       IF(RESID.LT.CUTOFF)THEN
        ASQUARE(K+1)=ONE
        WRITE(6,5003)K
5003    FORMAT(T3,'@LINEQY-I, Derivative amplitudes converged',
     &            ' after ',I5,
     &            ' iterations.')
        GOTO 300
       ENDIF 
C
1000  CONTINUE
C
      GOTO 999
C
300   WRITE(6,5000)
5000  FORMAT(T3,'@LINEQY-I, Solving linear equation in reduced ',
     &          'subspace.')
C
C FIRST WE MUST MODIFY SUBSPACE MATRIX, WHICH IS CURRENTLY A REPRESENTATION
C OF THE OPERATOR [Hd(-1) * D] TO [1 + Hd(-1) * D].  THIS IS SIMPLY 
C ACCOMPLISHED BY ADDING THE NORM OF THE APPROPRIATE EXPANSION VECTORS
C TO THE DIAGONAL ELEMENTS.
C
      CALL SAXPY(K,ONE,ASQUARE,1,ASMALL,KMAX+1)
C
C INVERT SUBSPACE REPRESENTATION OF [1 + Hd(-1) * D]
C
      CALL MINV(ASMALL,K,KMAX,SCR(I000),DET,TOL,0,1)
C
C GENERATE SOLUTION VECTOR AS LINEAR COMBINATION OF BASIS VECTORS
C
       CALL ZERO(SCR(I000),NSIZEC)
      DO 340 I=1,K
       CALL GETLST(SCR(I010),I,1,1,1,470)
       CALL SAXPY (NSIZEC,ASMALL(I,1)/X0,SCR(I010),1,SCR(I000),1)
340   CONTINUE
C
C WRITE SOLUTION VECTOR TO DISK - THIS IS H-1*M(R)
C
      CALL PUTLST(SCR(I000),IOFFSET,1,1,IRREPX,372+ISIDE)
      call getlst(scr(i010),ioffset,1,1,irrepx,374)
      IF(IUHF.EQ.0)THEN
       CALL SPNTSING(IRREPX,SCR(I010),SCR(I020),MAXCOR-I010+1)
      ENDIF
      write(6,*)' S(-',icount+1,')',2.0d0*sdot(nsizec,scr(i000),1,
     &                                                scr(i010),1)
      if(icount.lt.6)goto 33
C
      IF(PRINT2)THEN
       WRITE(6,1001)
1001   FORMAT(T3,'@LINEQY-I, Derivative T amplitudes : ')
       CALL PRVECR(SCR(I000),NSIZEC)
      ENDIF
C
      RETURN
999   WRITE(6,5001)KMAX
      CALL ERREX
5001  FORMAT(T3,'@LINEQY-F, Convergence failed after ',I5,
     &          ' iterations.')
      RETURN
      END
