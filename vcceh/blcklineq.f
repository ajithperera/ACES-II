      SUBROUTINE BLCKLINEQ(IUHF, IRREPX, ISIDE, NPERT, KMAX,
     &   N1AA, NDIM, ZOUT, Y1, Z, HZ, H0, ICONV,
     &   SCR, MAXCOR, FREQ, REALFREQ,SAVE_VECS)
C
C THIS ROUTINE SOLVES NPERT SETS OF LINEAR EQUATIONS THAT INVOLVE A
C PARTIONED EOM MATRIX.
C THE SYSTEM TO BE SOLVED IS
C
C      A X1 + B X2 = Y1
C      C X1 + D X2 = Y2
C
C  WHERE D IS A DIAGONAL MATRIX
C
C  WE FIND X2 = D^-1 ( Y2 - C X1)
C          ( A - B D^-1 C ) X1 = Y1 - B D^-1 Y2
C
C  THE LATTER IS A STANDARD LINEAR EQUATION FOR X1, THAT IS SOLVED IN
C  A SIMILAR FASHION AS IN LINEQY
C  WE SUPPOSEDLY CAN HOLD THE INFORMATION ON THE X1 VECTORS IN CORE
C  AND THIS REDUCES THE I/O REQUIREMENTS SIGNIFICANTLY.
C
C  THE ROUTINE PHBARXC PERFORMS THE MULTIPLICATION (A - B D^-1 C) X1
C  THE ROUTINE HBARXC2 IS A VERY SLIGHT MODIFICATION OF HBARXC
C
C  THE TOTAL MEMORY REQUIREMENT IS 
C     KMAX**2 + KMAX + 2 * KMAX * NDIM + 3 * NDIM + 2 * NSIZEC
C
C   KMAX IS MAXIMUM ITERATIVE SUBSPACE
C   NDIM IS THE DIMENSION OF THE SINGLES
C   NSIZEC IS TOTAL LENGTH OF EOM VECTORS.
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      LOGICAL PRINT, PRINT2, PRINT3, REALFREQ
      LOGICAL SS, SD, DS, DD
      LOGICAL SAVE_VECS
C
      DIMENSION SCR(MAXCOR), Z(NDIM, KMAX), 
     &   HZ(NDIM, KMAX), ZOUT(NDIM, NPERT), Y1(NDIM,NPERT),
     &   H0(NDIM), ICONV(NPERT)
C
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /FLAGS/ IFLAGS(100)
      COMMON/EXTRAP/MAXEXP,NREDUCE,NTOL,NSIZEC
      COMMON/DRVHBAR/SS, SD, DS, DD
      COMMON/TIMSUB/TDAVID, TMULT, TQUAD
      COMMON /TIMEINFO/ TIMEIN, TIMENOW, TIMETOT, TIMENEW
C
      DATA ONE,ONEM,ZILCH,TWO /1.0D0,-1.0D0,0.0D0,2.0D0/
C
      TOL = 5.0D-5
      PRINT  = IFLAGS(1) .GE. 1
      PRINT2 = .FALSE.
      PRINT3 = .FALSE.

      PRINT  = .TRUE.
      PRINT2 = .FALSE.
      PRINT3 = .TRUE.
C
C  DETERMINE H0 IN SPACE OF SINGLE EXCITATIONS
C
      IF(FREQ.NE.ZILCH)THEN
       IF(REALFREQ)THEN
        WRITE(6,5004)FREQ
      ELSE
        WRITE(6,*) ' IMAGINARY FREQUENCY NOT IMPLEMENTED YET'
        CALL ERREX
        WRITE(6,5005)SQRT(FREQ)
       ENDIF 
5004   FORMAT(T3,'@BLCKLINEQ-I, Frequency is ',F15.10,' a.u.')
5005   FORMAT(T3,'@PLINEQY-I, Imaginary frequency is ',F15.10,' a.u.')
      ENDIF
C
      I000=1
      I010=I000+NSIZEC
      I020=I010+NSIZEC
      IF (I020 .GT. MAXCOR) THEN
        WRITE(6,*) ' INSUFFICIENT MEMORY BLCKLINEQ', I020, MAXCOR
        CALL ERREX
      ENDIF      
C
C PUT Hd ELEMENTS ON LIST 472
C
      CALL HBARDIAG(IRREPX,SCR,MAXCOR,IUHF,FREQ)
C
      CALL GETLST(SCR(I000),1,1,1,1,472)
      DO I = 1, NDIM
        H0(I) = SCR(I000+I-1)
      ENDDO
C
C  INITIALIZE CONVERGENCE PER LINEAR SYSTEM
C
      DO I = 1, NPERT
        ICONV(I) = 1
      ENDDO
C
C  PROCESS Y:  Y = Y1 - B D^-1 Y2
C
      DO IPERT = 1, NPERT
        IOFFSET = IPERT
C
        CALL GETLST(SCR(I010),IOFFSET,1,1,IRREPX,372+ISIDE)
        CALL GETLST(SCR(I000),1,1,1,1,472)
        Call checksum("List-372  :",SCR(I010),Nsizec)
        Call checksum("List-472  :",SCR(I000),Nsizec)
        DO I = 1, NDIM
          Y1(I,IPERT) = SCR(I010 + I -1)
        ENDDO
        DO I = NDIM, NSIZEC - 1
          SCR(I010 + I) = - SCR(I010+I) / SCR(I000+I)
        ENDDO
        CALL ZERO(SCR(I010), NDIM)
        CALL UPDATES(IRREPX,SCR(I010),444,0,IUHF)
        CALL HBARXC2(SCR, MAXCOR*IINTFP, IUHF, ISIDE, IRREPX,
     &     .TRUE., .TRUE., .TRUE., .FALSE.)
        CALL GETLST(SCR, 1,1,1,3, 490)
        Call checksum("List-490  :",SCR,Nsizec)
        IF (IUHF .NE. 0) CALL GETLST(SCR(N1AA+1),1,1,1,4,490)
        DO I = 1, NDIM
          Y1(I,IPERT) = Y1(I,IPERT) + SCR(I)
        ENDDO
      ENDDO
C
C   Y1 CONTAINS THE PROPER INHOMOGENEOUS VECTORS
C
      CALL TIMER(1)
      TIN = TIMENOW
C
C   CALCULATE STARTING GUESS FOR Z
C
      DO I = 1, NPERT
        DO J= 1, NDIM
          Z(J,I) = Y1(J,I) / H0(J)
        ENDDO
      ENDDO
C
C  ORTHOGONALIZE CURRENT EXPANSION SPACE AND ELIMINATE LINEAR DEPENDENCIES
C
      NVEC = NPERT
      I=0
   50 I = I + 1
      CALL GSCHMIDT(Z(1,I), Z, NDIM, I-1, SCR, RESID)
      IF (RESID .LT. 1.0D-8) THEN
        WRITE(6,*) '  Linear dependence detected '
C
C LINEAR DEPENDENCY DETECTED: ELIMINATE THIS VECTOR
C
        DO J = I, NVEC -1
          CALL SCOPY(NDIM,Z(1,J+1),1,Z(1,J),1)
        ENDDO
        NVEC = NVEC - 1
        I = I - 1
      ENDIF
      IF (I .LT. NVEC) GO TO 50
C        
      NSPACE = NVEC
      NSTART = 1
C
      ITER = 0
      MAXITER = 200
C
      IF (PRINT) WRITE(6,1010)
C
  100 CONTINUE
C
C  CALCULATE HZ, FOR I = NSTART, NSPACE
C
      DO 10 I = NSTART, NSPACE
C
        ITER = ITER + 1
C
C PUT VECTOR ON LIST
C
      CALL PUTLST(Z(1,I), 1, 1, 1, 1, 490)
      IF (IUHF .NE. 0) CALL PUTLST(Z(N1AA+1,I),1,1,1,2,490)
C
C CALCULATE H * Z 
C
      CALL TIMER(1)      
      TDAVID = TDAVID + TIMENOW - TIN
      CALL PHBARXC(SCR, MAXCOR*IINTFP,IUHF, ISIDE, IRREPX,
     &   SS, SD, DS, DD)
      CALL TIMER(1)
      TIN = TIMENOW
      CALL GETLST(SCR, 1, 1, 1, 3, 490)
      IF (IUHF .NE. 0) CALL GETLST(SCR(N1AA+1),1,1,1,4,490)
C
C ADD FREQUENCY DEPENDENCE
C 
       CALL SAXPY(NDIM,FREQ,Z(1,I),1,SCR,1)
       CALL SCOPY(NDIM, SCR, 1, HZ(1,I), 1)
C
   10  CONTINUE
C
C  FIND NEW APPROXIMATE SOLUTIONS FROM  ASMALL
C
       IASMALL = 1
       IYSMALL = IASMALL + NSPACE * NSPACE
       IZSMALL =  IYSMALL + NSPACE*NPERT
       ISCR =  IZSMALL + NSPACE*NPERT
C
C   SOLVE LINEAR SYSTEM OF EQUATIONS
C
       CALL SOLVESMALL(NSPACE, SCR(IASMALL), SCR(IYSMALL),
     &    SCR(IZSMALL),
     &     ZOUT, Y1, Z, HZ, NPERT, NDIM, SCR(ISCR), MAXCOR-ISCR+1)
C
C  CHECK IF WE CAN DO MORE ITERATIONS WITH CURRENT SUBSPACE
C
C
C  DETERMINE OVERALL CONVERGENCE
C
        JCONV = 0
        DO IPERT = 1, NPERT
          JCONV = JCONV + ICONV(IPERT)
        ENDDO
C
        IF ((NSPACE + JCONV) .GT. KMAX) THEN
C
C  TRUNCATE SPACE
C
          ITMP = 1
          ISCR = ITMP + NDIM * NPERT
          CALL TRUNCATE(NPERT,NSPACE, KMAX,
     &       NDIM, ZOUT, Z, HZ, Y1, SCR(ITMP),
     &       SCR(ISCR), MAXCOR-ISCR+1)
C
          ENDIF
C
       NSTART = NSPACE + 1
C
C CONSTRUCT NEW EXPANSION VECTORS
C
C  Z(I) = 1/(E-A0(I)) * [A(E) * Z - E*Z) ]
C
       DO 20 IPERT = 1, NPERT
         IF (ICONV(IPERT) .NE. 0) THEN
C
C  CALCULATE RESIDUAL (Y1 - A * ZOUT(IPERT))
C
           CALL SCOPY(NDIM,Y1(1,IPERT),1,SCR,1)
           DO I = 1, NSPACE
             FACTI = - SDOT(NDIM,Z(1,I),1,ZOUT(1,IPERT),1)
             CALL SAXPY(NDIM,FACTI,HZ(1,I),1,SCR,1)
           ENDDO
C
C DETERMINE MAXIMUM ERROR
C
         CALL FNDMAXD(NDIM, SCR, DIFF, ILOC)
         IF (DIFF .LT. TOL) ICONV(IPERT) = 0
C
       IF(PRINT)WRITE(6,1002)IPERT, NSTART-1,DIFF
C
       IF (ICONV(IPERT) .NE. 0 .AND. NSPACE .LT. KMAX) THEN
C
C CONSTRUCT NEW VECTOR
C
        DO I=1,NDIM
         SCR(I) = SCR(I) / H0(I)
       ENDDO
C
C ORTHOGONALIZE RESIDUAL TO EXISTING SPACE
C
       CALL GSCHMIDT(SCR,Z,NDIM, NSPACE,
     &    SCR(NDIM+1),RESID)
       IF (RESID .GT. 1.0D-8) THEN
C
C INCREASE NSPACE
C
         NSPACE = NSPACE + 1
         CALL SCOPY(NDIM, SCR, 1, Z(1,NSPACE),1)
       ENDIF
      ENDIF
C       
C PROCESS NEXT ROOT
C
      ENDIF
   20 CONTINUE
C
C DETERMINE THE NUMBER OF UNSOLVED EQUATIONS AND SEE IF WE
C CAN MAKE ANOTHER PASS
C
      IPERT = NSPACE - NSTART + 1
      IF (IPERT .GT. 0 .AND. (ITER .LT. MAXITER)) GO TO 100
C
        CALL TIMER(1)      
        TDAVID = TDAVID + TIMENOW - TIN
C
C  CHECK OVERALL CONVERGENCE
C
        JCONV = 0
        DO IPERT = 1, NPERT
          JCONV = JCONV + ICONV(IPERT)
        ENDDO
C
        IF (JCONV .EQ. 0) THEN
          WRITE(6,5003) ITER
 5003     FORMAT(T3,'@BLCKLINEQ, Derivative amplitudes converged',
     &       ' after ',I5,
     &       ' iterations.')
        ELSE
          WRITE(6,5001) ITER
 5001     FORMAT(T3,'@BLCKLINEQ, Convergence failed after ',I5,
     &       ' iterations.')
          CALL ERREX
        ENDIF
C
      DO 30 IPERT = 1, NPERT
        IOFFSET = IPERT
C
C  DETERMINE FULL SOLUTION VECTOR X2 = HD^-1 * ( Y2 - HC X1)
C
      CALL GETLST(SCR(I000),IOFFSET,1,1,IRREPX,372+ISIDE)
      CALL GETLST(SCR(I010),1,1,1,1,472)
      DO I = 1, NSIZEC
        SCR(I000+I-1) = SCR(I000+I-1) / SCR(I010+I-1)
      ENDDO
      CALL ZERO(SCR(I010), NSIZEC)
      CALL SCOPY(NDIM, ZOUT(1,IPERT),1, SCR(I010),1)
      CALL UPDATES2(IRREPX, SCR(I010), 444, 0, 490, IUHF)
      CALL PHBARXC(SCR(I010),(MAXCOR-I010+1)*IINTFP,IUHF,ISIDE,IRREPX,
     &   .TRUE., .TRUE., .FALSE., .FALSE.)      
      CALL LOADVEC2(IRREPX, SCR(I010),MAXCOR, IUHF, 490,0,
     &   443, NSIZEC, .FALSE.)
      DO I = 1, NSIZEC
        SCR(I000+I-1) = SCR(I000+I-1) + SCR(I010+I-1)
      ENDDO
      DO I = 1, NDIM
        SCR(I) =  ZOUT(I, IPERT)
      ENDDO
C
      IF (PRINT3 ) THEN
        WRITE(6,*) ' CHECK COMPLETE SOLUTION  '
        CALL UPDATES2(IRREPX, SCR, 444, 0, 490, IUHF)
        CALL HBARXC(SCR,MAXCOR*IINTFP,IUHF,ISIDE,IRREPX)
        CALL LOADVEC2(IRREPX, SCR(I000),MAXCOR, IUHF, 490,2,
     &     460, NSIZEC, .FALSE.)
        DO I = 1, NDIM
          SCR(I) = SCR(I) + FREQ * ZOUT(I,IPERT)
        ENDDO
        CALL GETLST(SCR(I010),IOFFSET,1,1,IRREPX,372+ISIDE)
        DIFF = ZILCH
        DO I=1, NSIZEC
          DIFF = DMAX1(DIFF, ABS(SCR(I000+I-1) - SCR(I010+I-1)))
        ENDDO
        WRITE(6,*) ' DIFFERENCE BETWEEN A*X AND Y ', DIFF
        CALL LOADVEC2(IRREPX, SCR(I000),MAXCOR, IUHF, 490,0,
     &     443, NSIZEC, .FALSE.)
      ENDIF
C
C WRITE SOLUTION VECTOR TO DISK
C
      IF (SAVE_VECS) CALL PUTLST(SCR(I000),IOFFSET,1,1,IRREPX,
     &                           372+ISIDE)
C
      IF(PRINT2)THEN
       WRITE(6,1005)
 1005  FORMAT(T3,'@LINEQY-I, Derivative T amplitudes : ')
       CALL PRVECR(SCR(I000),NSIZEC)
      ENDIF
C
   30  CONTINUE
C
      RETURN
 1010 FORMAT(T3,' Equation #',T20, 'Dimension subspace',T40,'Residual')
1002  FORMAT(T7,I4,T22,I4,T40,E8.3)
      END
