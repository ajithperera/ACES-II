      SUBROUTINE W5AB2RHF_R(ICORE,MAXCOR,IUHF,TERM1,TERM2,TERM3,TAU,
     &                    IOFFLIST,LISTT,LISTTOFF)
C
C THIS ROUTINE CALCULATES THREE OF THE FIVE CONTRACTIONS WHICH
C  CONTRIBUTE TO THE W(AmEf) INTERMEDIATE WHICH IS USED IN CCSD
C  GRADIENTS AND CCSDT MODELS FOR AAAA AND BBBB SPIN CASES.
C
C  FIRST CONTRACTION:
C           Z(AmEf) = SUM T1(m,g) * W (EfAg)
C  SECOND CONTRACTION:
C           Z(AmEf) =- T2(Ef,Nm) * F(AN)
C  THIRD CONTRACTION
C           Z(AmEf) = TAU(Ef,No) <Am|No>
C
C  THE REMAINING CONTRACTIONS ARE DONE BEFORE THIS ROUTINE IS
C   CALLED AND THE TARGET LIST CONTAINS THEM ON ENTRY.
C
CEND
      IMPLICIT INTEGER (A-Z)
      DOUBLE PRECISION ONE,ONEM,ZILCH,ALPHA,BETA
      LOGICAL RHF,CCGRAD,TERM1,TERM2,TERM3,TAU
      DIMENSION ICORE(MAXCOR),IOFFT1(8,2)
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /SYMINF/ NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON /SYM/ POP(8,2),VRT(8,2),NT(2),NFMI(2),NFEA(2)
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON /FLAGS/ IFLAGS(100)
C
      DATA ONE   /1.0/
      DATA ONEM  /-1.0/
      DATA ZILCH /0.0/
C
C  If this is an ROHF-MBPT energy calculation, then CCGRAD is false.
C  Otherwise true.
C
      CCGRAD=.TRUE.
      IF(IFLAGS(2).LE.4.AND.IFLAGS(11).EQ.2) CCGRAD=.FALSE.
C
      RHF=.TRUE.
      IF(IUHF.NE.0)RHF=.FALSE.
      CALL GETR1(ICORE,MAXCOR,MXCOR,IUHF,IOFFT1,LISTT,LISTTOFF)
      IBOT=1
      BETA=ONE
      LSTTAR=30+IOFFLIST
      DO 20 IRREPDO=1,NIRREP
       TARDSZ=IRPDPD(IRREPDO,ISYTYP(1,30))
       TARDIS=IRPDPD(IRREPDO,ISYTYP(2,30))
       TARSIZ=TARDSZ*TARDIS
       LISTW =233
       WDSZ=IRPDPD(IRREPDO,ISYTYP(1,LISTW))
       WDIS=IRPDPD(IRREPDO,ISYTYP(2,LISTW))
       CALL IZERO(ICORE,IINTFP*TARSIZ)
       I000=1
       I010=I000+IINTFP*TARSIZ
       ALPHA=ONEM
       IF(TERM1)THEN
C
C FIRST CONTRACTION:
C
C           Z(AmEf) =- T2(Ef,Nm) * F(AN)
C
       LISTT2=46
       NT2DSZ=IRPDPD(IRREPDO,ISYTYP(1,LISTT2))
       NT2DIS=IRPDPD(IRREPDO,ISYTYP(2,LISTT2))
       I020=I010+IINTFP*NT2DSZ*NT2DIS
       CALL GETLST(ICORE(I010),1,NT2DIS,1,IRREPDO,LISTT2)
C
C WE NOW HAVE T(Ef,Nm) IN CORE.
C NOW TRANSPOSE KET INDICES TO FORM T(Ef,mN)
C
       I030=I020+IINTFP*NT2DSZ
       I040=I030+IINTFP*NT2DSZ
       I050=I040+IINTFP*NT2DSZ
       CALL SYMTR1(IRREPDO,POP(1,1),POP(1,2),NT2DSZ,ICORE(I010),
     &             ICORE(I020),ICORE(I030),ICORE(I040))
C
C
C
C EVALUATE V CONTRIBUTION WITH THE MATRIX MULTIPLICATION
C
C           Z(EfmA) =- T2(Ef,mN) * F(AN)
C
       CALL GETLST(ICORE(I020),1,1,1,1,93)
       IOFFF =I020
       IOFFT2=I010
       IOFFZ =I000
       DO 430 IRREPN=1,NIRREP
        IRREPM=DIRPRD(IRREPN,IRREPDO)
        IRREPA=IRREPN
        NROWT2=NT2DSZ*POP(IRREPM,2)
        NCOLT2=POP(IRREPN,1)
        NROWZ =NROWT2
        NCOLZ =VRT(IRREPA,1)
        NROWF =NCOLZ
        NCOLF =NCOLT2
        IF(MIN(NROWZ,NCOLZ,NCOLT2).GT.0)THEN
c         CALL XGEMM('N','T',NROWZ,NCOLZ,NCOLT2,ALPHA,ICORE(IOFFT2),
c     &               NROWT2,ICORE(IOFFF),NROWF,BETA,ICORE(IOFFZ),
c     &               NROWZ)
        ENDIF
        IOFFF =IOFFF+IINTFP*NROWF*NCOLF
        IOFFT2=IOFFT2+IINTFP*NROWT2*NCOLT2
        IOFFZ =IOFFZ+IINTFP*NROWZ*NCOLZ
430    CONTINUE
C
C NOW REARRANGE THIS SO THAT IT IS ORDERED IN THE SAME WAY AS THE NEXT
C  TWO TERMS  (THIS ORDERING [Ef,Am] IS THE SAME AS THE TARGET LIST, SO
C  NO ADDITIONAL MANIPULATIONS WILL BE NEEDED)
C
C                  Z(Ef,mA) -> Z(Ef,Am)
C
       I020=I010+IINTFP*TARDSZ
       I030=I020+IINTFP*TARDSZ
       I040=I030+IINTFP*TARDSZ
       CALL SYMTR1(IRREPDO,POP(1,2),VRT(1,1),TARDSZ,ICORE(I000),
     &             ICORE(I010),ICORE(I020),ICORE(I030))
       ENDIF
       IF(TERM2)THEN
C
C SECOND CONTRACTION:
C
C           Z(AmEf) = SUM T1(m,g) * W (EfAg)
C
C THIS TERM IS SKIPPED IN TWO CASES : THE AO BASIS PPL ALGORITHM
C AND THE RHF ALGORITHM WHICH USES A<=B,CD STORAGE FOR THE ABCD
C INTEGRALS.
C
       IF(IFLAGS(93).EQ.2.OR.ISYTYP(1,233).EQ.5)GOTO 999
       CORLFT=MXCOR-I010
       CALL W5OAB2(ICORE(I010),CORLFT,IUHF,ICORE(IOFFT1(1,2)),
     &             ICORE(I000),IRREPDO,LISTW,2,WDSZ)
C
999    CONTINUE
       ENDIF
C
C
C THIRD AND FINAL TERM (N**6 DEPENDENCE)
C
C           Z(AmEf) = TAU(Ef,No) <Am|No>
C
       IF(TERM3)THEN
       ALPHA=ONE
       LSTINT=10-IUHF
       LISTT2=46
       INTDSZ=IRPDPD(IRREPDO,ISYTYP(1,LSTINT))
       INTDIS=IRPDPD(IRREPDO,ISYTYP(2,LSTINT))
       TAUDSZ=IRPDPD(IRREPDO,ISYTYP(1,LISTT2))
       TAUDIS=IRPDPD(IRREPDO,ISYTYP(2,LISTT2))
       I020=I010+IINTFP*TAUDSZ*TAUDIS
       CALL GETLST(ICORE(I010),1,TAUDIS,1,IRREPDO,LISTT2)
       IF(TAU)THEN
       CALL FTAU(ICORE(I010),ICORE(IOFFT1(1,1)),ICORE(IOFFT1(1,2)),
     &           TAUDSZ,TAUDIS,POP(1,1),POP(1,2),VRT(1,1),
     &           VRT(1,2),IRREPDO,3,ONE)
       ENDIF
C
C CHECK TO SEE IF THERE IS SUFFICIENT CORE FOR IN-CORE ALGORITHM
C
       I030=I020+IINTFP*INTDSZ*INTDIS
C
C PICK UP THE INTEGRALS AS AN I(No,Am) [OR I(No,Am) = I(nO,aM) FOR RHF] MATRIX
C
        CALL GETLST(ICORE(I020),1,INTDIS,2,IRREPDO,LSTINT)
C
C IF RHF, HAVE TO TRANSPOSE BRA AND KET INDICES
C
        IF(RHF)THEN
         I040=I030+IINTFP*MAX(INTDSZ,INTDIS)
         I050=I040+IINTFP*MAX(INTDSZ,INTDIS)
         I060=I050+IINTFP*MAX(INTDSZ,INTDIS)
         CALL SYMTR1(IRREPDO,POP(1,1),VRT(1,2),INTDSZ,ICORE(I020),
     &               ICORE(I030),ICORE(I040),ICORE(I050))
         CALL SYMTR3(IRREPDO,POP(1,2),POP(1,1),INTDSZ,INTDIS,
     &               ICORE(I020),ICORE(I030),ICORE(I040),ICORE(I050))
        ENDIF
C
C DO MATRIX MULTIPLICATION - EASY STUFF!
C
C           Z(AmEf) = TAU(Ef,No) <Am|No>
C
        NROWT=TAUDSZ
        NCOLT=TAUDIS
        NROWZ=TAUDSZ
        NCOLZ=INTDIS
        NROWW=INTDSZ
        NCOLW=INTDIS
c        CALL XGEMM('N','N',NROWZ,NCOLZ,NCOLT,ALPHA,ICORE(I010),
c     &             NROWT,ICORE(I020),NROWW,BETA,ICORE(I000),NROWZ)
C
C FINALLY, INCREMENT THE TARGET LIST WITH Z(Ef,Am) AND LEAVE.
C
       ENDIF
       I020=I010+IINTFP*TARDSZ*TARDIS
       IF(I020.LE.MAXCOR)THEN
        CALL GETLST(ICORE(I010),1,TARDIS,2,IRREPDO,LSTTAR)
        CALL SAXPY(TARSIZ,ONE,ICORE(I010),1,ICORE(I000),1)
       ELSE
        IOFF=I000
        I020=I010+IINTFP*TARDSZ
        DO 300 IDIS=1,TARDIS
         CALL GETLST(ICORE(I010),IDIS,1,1,IRREPDO,LSTTAR)
         CALL SAXPY (TARDSZ,ONE,ICORE(I010),1,ICORE(IOFF),1)
         IOFF=IOFF+TARDSZ*IINTFP
300     CONTINUE
       ENDIF
C
       CALL PUTLST(ICORE(I000),1,TARDIS,2,IRREPDO,LSTTAR)

20    CONTINUE
      RETURN
      END
