      SUBROUTINE TRPS2(
     1                 EVAL,SCR1,SCR2,SCR3,
     1                 T2ABA,T2ABBI,T2ABBJ,T2AAAI,T2AAAJ,  
     1                 IADT3,LENT3,IADT2,LENT2,
     1                 IADV,LENV,
     1                 ICORE,
     1                 NOCA,NOCB,NVRTA,NVRTB,MAXCOR,
     1                 IUHF,S1A,S1B)
      IMPLICIT INTEGER (A-Z)
      INTEGER ABSOCC,ABSVRT
      LOGICAL IJEQL,NONEQL
      LOGICAL IJKEQL2,JKEQL2,IJEQL2,NONEQL2
      LOGICAL CCSDT4,CCSDT
      LOGICAL TRIPNI,TRIPNI1,TRIPIT,T3STOR
      DOUBLE PRECISION SCR1(1),SCR2(1),SCR3(1),EVAL(NOCA+NVRTA,2)
      DOUBLE PRECISION T2ABA(1),T2ABBJ(1),T2ABBI(1)
      DOUBLE PRECISION T2AAAI(1),T2AAAJ(1)
      DOUBLE PRECISION ICORE(1)
C
      DOUBLE PRECISION E4TAAA,E4TBBB,E4TAAB,E4TBBA,E5STA,E5STB,
     1                 E5ST2A,E5ST2B,E4STA,E4STB,E4ST2A,E4ST2B,
     1                 E5TD1,E5TD4,E5TD2,E5TD3,
     1                 E5TT1,E5TT4,E5TT2,E5TT3
      DOUBLE PRECISION E5QT1,E5QT4,E5QT2,E5QT3
      DOUBLE PRECISION E6TT1,E6TT2,E6TT3,E6TT4
C
      DOUBLE PRECISION SDOT
      DOUBLE PRECISION DIJK
      DOUBLE PRECISION S1A(1),S1B(1)
C
#include "maxbasfn.par"
C
      DIMENSION IADT3(8),LENT3(8)
      DIMENSION                        IADT2(8) ,LENT2(8),
     1                                 IADV(8)  ,LENV(8)
      DIMENSION IADW(8),LENW(8)
C
      COMMON /FILES/  LUOUT,MOINTS
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),DIRPRD(8,8)
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON /SYM/    POP(8,2),VRT(8,2),NTAA,NTBB,NF1AA,NF2AA,
     1                NF1BB,NF2BB
      COMMON /FLAGS/  IFLAGS(100)
      EQUIVALENCE(IPRINT,IFLAGS( 1))
      EQUIVALENCE(ICLLVL,IFLAGS( 2))
      EQUIVALENCE(IDRLVL,IFLAGS( 3))
      EQUIVALENCE(INONHF,IFLAGS(38))
      EQUIVALENCE(IORBTP,IFLAGS(39))
C
C     T3 ARRAYS
C
      COMMON /TRIPLES/ TRIPNI,TRIPNI1,TRIPIT,T3STOR
      COMMON /ACTORB/ ABSVRT(MAXBASFN,8,2),ABSOCC(MAXBASFN,8,2)
      COMMON /T3OFF/  IOFFVV(8,8,10),IOFFOO(8,8,10),IOFFVO(8,8,4)
      COMMON /T3ENRG/ E4TAAA,E4TBBB,E4TAAB,E4TBBA,
     1                E5STA, E5STB,
     1                E4STA ,E4STB,
     1                E5TD1 ,E5TD4 ,E5TD2 ,E5TD3,
     1                E5TT1 ,E5TT4 ,E5TT2 ,E5TT3,
     1                E5QT1 ,E5QT4 ,E5QT2 ,E5QT3,
     1                E6TT1 ,E6TT4 ,E6TT2 ,E6TT3
      COMMON /LISWI/  LWIC11,LWIC12,LWIC13,LWIC14,
     1                LWIC15,LWIC16,LWIC17,LWIC18,
     1                LWIC21,LWIC22,LWIC23,LWIC24,
     1                LWIC25,LWIC26,LWIC27,LWIC28,
     1                LWIC31,LWIC32,LWIC33,
     1                LWIC34,LWIC35,LWIC36,
     1                LWIC37,LWIC38,LWIC39,LWIC40,LWIC41,LWIC42
      COMMON /AUXIO / DISTSZ(8,100),NDISTS(8,100),INIWRD(8,100),LNPHYR,
     1                NRECS,LUAUX
      COMMON /T3IOOF/ IJKPOS(8,8,8,2),IJKLEN(36,8,4),IJKOFF(36,8,4),
     1                NCOMB(4)
      COMMON /T3METH/ CCSDT4,CCSDT
C
C     Main core vector addressing (C1 lengths) :
C
C           I000   T3(A<B,c)  Na * (Na-1)/2 * Nb
C           I010    W(Bc,A)   Na * Na * Nb
C           I020   T2(A<B,IJ) Na * (Na-1)/2 * na * (na-1)/2
C           I030   T2(A,B,IJ) Na * Na       * na * (na-1)/2
C           I040   T2(B,c,Jk) Na * Nb       * na * nb
C           I050   T2(B,c,Ik) Na * Nb       * na * nb
C           I060   D3(A<B,c)  Na * (Na-1)/2 * Nb
C           I070   T3(A<B,c)  Na * (Na-1)/2 * Nb (Previous T3, i.e. T3[2])
C           I080   T3(A<B<C)  Na * (Na-1) * (Na-2)/6 (AAA case; RHF only)
C           I090   T3(A<B<C)  Na * (Na-1) * (Na-2)/6 (AAA case; RHF only)
C           I100   ISTART (Rest of core)
C
C     Na = Number of alpha virtuals; na = Number of alpha occupied.
C     Nb = Number of beta  virtuals; nb = Number of beta  occupied.
C
C     Regions of ICORE may be used to hold different quantities at
C     different stages, so they are better regarded as scratch areas of
C     the specified lengths.
C
      INDEX(I) = I*(I-1)/2
C
      WRITE(LUOUT,1010)
C
C     Get diagonal Fock matrix elements
C
      CALL GETREC(20,'JOBARC','SCFEVALA',(NOCA+NVRTA)*IINTFP,EVAL(1,1))
      CALL GETREC(20,'JOBARC','SCFEVALB',(NOCB+NVRTB)*IINTFP,EVAL(1,2))
C
C     COMPUTE NUMBER OF FREE DOUBLE WORDS
      MCORE = MAXCOR / IINTFP
      WRITE(LUOUT,1020) MAXCOR,MCORE,IINTFP
C
      ISPIN1 = 1
      ISPIN2 = 2
C
      DO 1000 IRPIJK=1,NIRREP
C
      IJKVAL = 0
C
      DO  990 IRPK  =1,NIRREP
      IF(POP(IRPK,ISPIN2).EQ.0) GOTO 990
C
      KLOW  = 1
      KHIGH = POP(IRPK,ISPIN2)
C
      DO  980 IRPJ=1,NIRREP
      IF(POP(IRPJ,ISPIN1).EQ.0) GOTO 980
      IRPJK = DIRPRD(IRPJ,IRPK)
      IRPI  = DIRPRD(IRPJK,IRPIJK)
      IF(IRPI.GT.IRPJ) GOTO 980
C
      IF(POP(IRPI,ISPIN1).EQ.0) GOTO 980
C
      IJEQL  = .FALSE.
      NONEQL = .FALSE.
      IF(IRPI.EQ.IRPJ)THEN
      IJEQL  = .TRUE.
      JLOW  = 2
      JHIGH = POP(IRPJ,ISPIN1)
      ILOW  = 1
      NIJ = (POP(IRPJ,ISPIN1) * (POP(IRPJ,ISPIN1)-1))/2
      ELSE
      NONEQL = .TRUE.
      JLOW  = 1
      JHIGH = POP(IRPJ,ISPIN1)
      ILOW  = 1
      IHIGH = POP(IRPI,ISPIN1)
      NIJ =  POP(IRPI,ISPIN1) * POP(IRPJ,ISPIN1)
      ENDIF
C
      NIK = POP(IRPI,ISPIN1) * POP(IRPK,ISPIN2)
      NJK = POP(IRPJ,ISPIN1) * POP(IRPK,ISPIN2)
C
      IF(IJEQL.AND.POP(IRPJ,ISPIN1).LT.2) GOTO 980
C
      IRPIJ =  DIRPRD(IRPI,IRPJ)
      IRPIK =  DIRPRD(IRPI,IRPK)
C
      DO  10 IRREP=1,NIRREP
      IRPAB = DIRPRD(IRREP,IRPIJK)
      LENT3(IRREP) = IRPDPD(IRPAB,ISPIN1) * VRT(IRREP,ISPIN2)
      IF(IRREP.EQ.1)THEN
      IADT3(IRREP) = 1
      ELSE
      IADT3(IRREP) = IADT3(IRREP-1) + LENT3(IRREP-1)
      ENDIF
   10 CONTINUE
C
      DO  20 IRREP=1,NIRREP
      IRPA = DIRPRD(IRPIJK,IRREP)
      LENW(IRREP) = VRT(IRPA,ISPIN1) * IRPDPD(IRREP,13)
      IF(IRREP.EQ.1)THEN
      IADW(IRREP) = 1
      ELSE
      IADW(IRREP) = IADW(IRREP-1) + LENW(IRREP-1)
      ENDIF
   20 CONTINUE
C
      NABC=0
      NALBC=0
      DO  30 IRREP=1,NIRREP
      NALBC = NALBC + LENT3(IRREP)
      NABC   = NABC + LENW(IRREP)
   30 CONTINUE
C
      I000 = 1
      I010 = I000 + NALBC
      I020 = I010 + NABC
      DSZ   = IRPDPD(IRPIJ,   ISPIN1)
      DSZEXP= IRPDPD(IRPIJ,18+ISPIN1)
      I030 = I020 + DSZ    * NIJ
      I040 = I030 + DSZEXP * NIJ
      I050 = I040 + IRPDPD(IRPJK,13) * NJK
      I060 = I050 + IRPDPD(IRPIK,13) * NIK
      I070 = I060 + NALBC
      I080 = I070 + NALBC
      I090 = I080 + DISTSZ(IRPIJK,1)
      I100 = I090 + DISTSZ(IRPIJK,1)
      ISTART = I100
      NLEFT = MCORE - ISTART
      IF(ISTART.GE.MCORE)THEN
      WRITE(LUOUT,1030)
      CALL INSMEM('TRPS2',ISTART,MCORE)
      ENDIF
C
      CALL GETLST(ICORE(I020),IOFFOO(IRPJ,IRPIJ,1)+1,NIJ,1,IRPIJ,44)
      CALL SYMEXP2(IRPIJ,VRT(1,1),DSZEXP,DSZ,NIJ,ICORE(I030),
     1             ICORE(I020))
C
      CALL GETLST(ICORE(I040),IOFFOO(IRPK,IRPJK,5)+1,NJK,1,IRPJK,46)
      CALL GETLST(ICORE(I050),IOFFOO(IRPK,IRPIK,5)+1,NIK,1,IRPIK,46)
C
      CALL MKD32(ICORE(I060),EVAL,IADT3,IRPIJK,NOCA,NOCB,NVRTA,NVRTB)
C
      DO  900    K=KLOW,KHIGH
C
      CALL GETABA(T2ABA,IRPK,K)
C
      DO  800    J=JLOW,JHIGH
C
      CALL GETABB(T2ABBJ,IRPJ,J)
      CALL GETAAA(T2AAAJ,IRPJ,J,1)
C
      IF(IJEQL) IHIGH = J-1
C
      DO  700    I=ILOW,IHIGH
C
      CALL GETABB(T2ABBI,IRPI,I)
      CALL GETAAA(T2AAAI,IRPI,I,1)
C
      CALL ZERO(ICORE(I000),NALBC)
      CALL ZERO(ICORE(I010),NABC)
C
      CALL D1T2NEW( ICORE(I000),ICORE(I010),
     1           ICORE(I030),ICORE(I040),ICORE(I050),
     1 ICORE(ISTART),IUHF,
     1 IADT3,LENT3,IADW,LENW,IADT2,LENT2,IADV,LENV,
     1 I,J,K,IRPI,IRPJ,IRPK,IRPIJ,IRPJK,IRPIK,IRPIJK,
     1 DSZEXP,IRPDPD(IRPJK,13),IRPDPD(IRPIK,13),
     1 SCR1,SCR2,SCR3,NLEFT,T2ABA,T2ABBJ,T2ABBI,
     1 T2AAAJ,T2AAAI)

C
c      IJK = IJKPOS(IRPI,IRPJ,IRPK,2)
c      IOFF = IJKOFF(IJK,IRPIJK,ISPIN1+1)
c      IF(IJEQL ) IJKVAL = IOFF + (K-1)*NIJ + INDEX(J-1) + I
c      IF(NONEQL) IJKVAL = IOFF + (K-1)*NIJ + (J-1)*POP(IRPI,ISPIN1) + I
      IJKVAL = IJKVAL + 1
C
      IF(TRIPNI)THEN
      CALL EXPSC2(ICORE(I000),ICORE(I010),IADT3,IADW,IRPIJK)
      CALL GETLIST(ICORE(I070),IJKVAL,1,1,IRPIJK,ISPIN1 + 1 + 4)
      E5TD2 = E5TD2 + SDOT(NALBC,ICORE(I070),1,ICORE(I000),1) 
C
C     Deal with AAA amplitudes in RHF case.
C
      IF(IUHF.EQ.0)THEN
      IF(IRPK.GT.IRPJ.OR.(IRPK.EQ.IRPJ.AND.K.GT.J))THEN
C
      CALL     ZERO(ICORE(I080),DISTSZ(IRPIJK,1))
      CALL SYMCONTW(ICORE(I080),ICORE(I070),EVAL,IADT3,1,NOCA,NVRTA,
     1              IRPIJK)
      CALL     ZERO(ICORE(I090),DISTSZ(IRPIJK,1))
      CALL SYMCONTW(ICORE(I090),ICORE(I000),EVAL,IADT3,1,NOCA,NVRTA,
     1              IRPIJK)
      E5TD1 = E5TD1 + SDOT(DISTSZ(IRPIJK,1),ICORE(I080),1,ICORE(I090),1)
      ENDIF
      ENDIF
C
C     Disconnected QT terms.
C
      CALL ZERO(ICORE(I000),NALBC)
      CALL ZERO(ICORE(I010),NABC)
      CALL S1S223N(S1A,S1B,ICORE(ISTART),ICORE(I000),ICORE(I010),
     1             IADT3,IADW,ISPIN1,ISPIN2,I,J,K,
     1             IRPI,IRPJ,IRPK,IRPIJ,IRPIK,IRPJK,IRPIJK,IUHF,3)
      E5QT2 = E5QT2 + SDOT(NALBC,ICORE(I070),1,ICORE(I000),1)
C
C     AAA contribution.
C
      IF(IUHF.EQ.0)THEN
      IF(IRPK.GT.IRPJ.OR.(IRPK.EQ.IRPJ.AND.K.GT.J))THEN
C
      CALL     ZERO(ICORE(I090),DISTSZ(IRPIJK,1))
      CALL SYMCONTW(ICORE(I090),ICORE(I000),EVAL,IADT3,1,NOCA,NVRTA,
     1              IRPIJK)
      E5QT1 = E5QT1 + SDOT(DISTSZ(IRPIJK,1),ICORE(I080),1,ICORE(I090),1)
      ENDIF
      ENDIF
C
      ENDIF
C
C     TT terms.
C
      CALL ZERO(ICORE(I000),NALBC)
      CALL ZERO(ICORE(I010),NABC)
C
C     CCSDT or non-HF if semicanonical orbitals are not used.
C     (i) Virtual orbital sum.
C
      IF(ICLLVL.EQ.18.OR.(INONHF.EQ.1.AND.IORBTP.EQ.0))THEN
      CALL T3FT323V(ICORE(I000),ICORE(I010),ICORE(ISTART),MAXCOR,IUHF,
     1              1,2,NALBC,NABC,IRPIJK,IJKVAL,IADT3,IADW)
      ENDIF
      IF(CCSDT4.OR.CCSDT)THEN
C     CCSDT abef intermediate contribution.
      CALL T3WT323P(ICORE(I000),ICORE(I010),ICORE(ISTART),MAXCOR,IUHF,
     1              1,2,NALBC,NABC,IRPIJK,IJKVAL,IADT3,IADW)
C     CCSDT maei intermediate contribution.
      
      CALL T3WT323R(ICORE(I000),ICORE(I010),ICORE(ISTART),MAXCOR,1,2,
     1              IADT3,IADW,IRPI,IRPJ,IRPK,I,J,K,IRPIJK,IUHF)
      ENDIF
C
C     CCSDT or non-HF if semicanonical orbitals are not used.
C     (ii) Occupied orbital sum.
C
      IF(ICLLVL.EQ.18.OR.(INONHF.EQ.1.AND.IORBTP.EQ.0))THEN
      CALL T3FT323O(ICORE(I000),ICORE(ISTART),MAXCOR,IUHF,1,2,NALBC,
     1              IRPI,IRPJ,IRPK,IRPIJK,I,J,K)
      ENDIF
      IF(CCSDT4.OR.CCSDT)THEN
      CALL T3WT323HH(ICORE(I000),ICORE(ISTART),MAXCOR,IUHF,1,2,NALBC,
     1              IRPI,IRPJ,IRPK,IRPIJK,I,J,K)
      ENDIF
C
      CALL EXPSC2(ICORE(I000),ICORE(I010),IADT3,IADW,IRPIJK)
C
      IF(TRIPNI)THEN
      E5TT2 = E5TT2 + SDOT(NALBC,ICORE(I070),1,ICORE(I000),1) 
C
C     Deal with AAA amplitudes in RHF case.
C
      IF(IUHF.EQ.0)THEN
      IF(IRPK.GT.IRPJ.OR.(IRPK.EQ.IRPJ.AND.K.GT.J))THEN
C
      CALL     ZERO(ICORE(I080),DISTSZ(IRPIJK,1))
      CALL SYMCONTW(ICORE(I080),ICORE(I070),EVAL,IADT3,1,NOCA,NVRTA,
     1              IRPIJK)
      CALL     ZERO(ICORE(I090),DISTSZ(IRPIJK,1))
      CALL SYMCONTW(ICORE(I090),ICORE(I000),EVAL,IADT3,1,NOCA,NVRTA,
     1              IRPIJK)
      E5TT1 = E5TT1 + SDOT(DISTSZ(IRPIJK,1),ICORE(I080),1,ICORE(I090),1)
      ENDIF
      ENDIF
      ENDIF
C
C     Try to handle sixth-order TT terms.
      CALL ZERO(ICORE(I070),NALBC)
      CALL ZERO(ICORE(I010),NABC)
      CALL S1S223N(S1A,S1B,ICORE(ISTART),ICORE(I070),ICORE(I010),
     1             IADT3,IADW,ISPIN1,ISPIN2,I,J,K,
     1             IRPI,IRPJ,IRPK,IRPIJ,IRPIK,IRPJK,IRPIJK,IUHF,1)
      DIJK = EVAL(ABSOCC(I,IRPI,1),1) + EVAL(ABSOCC(J,IRPJ,1),1)
     1     + EVAL(ABSOCC(K,IRPK,2),2)
      CALL RMD314(ICORE(I070),ICORE(I060),NALBC,DIJK)
      E6TT2 = E6TT2 + SDOT(NALBC,ICORE(I000),1,ICORE(I070),1)
      IF(IUHF.EQ.0)THEN
      IF(IRPK.GT.IRPJ.OR.(IRPK.EQ.IRPJ.AND.K.GT.J))THEN
C
      CALL     ZERO(ICORE(I080),DISTSZ(IRPIJK,1))
      CALL SYMCONTW(ICORE(I080),ICORE(I070),EVAL,IADT3,1,NOCA,NVRTA,
     1              IRPIJK)
      CALL     ZERO(ICORE(I090),DISTSZ(IRPIJK,1))
      CALL SYMCONTW(ICORE(I090),ICORE(I000),EVAL,IADT3,1,NOCA,NVRTA,
     1              IRPIJK)
      E6TT1 = E6TT1 + SDOT(DISTSZ(IRPIJK,1),ICORE(I080),1,ICORE(I090),1)
      ENDIF
      ENDIF
C
  700 CONTINUE
  800 CONTINUE
  900 CONTINUE
C
  980 CONTINUE
  990 CONTINUE
C
 1000 CONTINUE
      RETURN
 1010 FORMAT(' @TRPS2-I, Spin case AAB ')
 1020 FORMAT(' @TRPS2-I, Number of free integer words ',I10,/,
     1       '           Number of free double  words ',I10,/,
     1       '           Ratio                        ',I10)
 1030 FORMAT(' @TRPS2-I, Insufficient memory to continue. ')
      END
