      SUBROUTINE TRPS14(OOOV,EVAL,
     1                  IADBLK,LENBLK,IADT2,LENT2,IADV,LENV,
     1                  OOOVAD,LENINT,LNOOOV,
     1                  CORE,MAXCOR,ISPIN,NO,NV,S1A,S1B)
      IMPLICIT INTEGER (A-Z)
#include "maxbasfn.par"
      INTEGER ABSVRT,ABSOCC,DISTSZ,POP,VRT
      LOGICAL IJKEQL,IJEQL,JKEQL,NONEQL
      LOGICAL CCSDT4,CCSDT
      LOGICAL TRIPNI,TRIPNI1,TRIPIT,T3STOR
      DOUBLE PRECISION DIJK
      DOUBLE PRECISION EVAL(NO+NV)
      DOUBLE PRECISION E4TAAA,E4TBBB,E4TAAB,E4TBBA,E5STA,E5STB,
     1                 E4STA ,E4STB ,E4T14,E5ST14,E4ST14,
     1                 E5TD1,E5TD4,E5TD2,E5TD3,
     1                 E5TT1,E5TT4,E5TT2,E5TT3
      DOUBLE PRECISION E5QT1,E5QT4,E5QT2,E5QT3
      DOUBLE PRECISION E6TT1,E6TT4,E6TT2,E6TT3
      DOUBLE PRECISION SDOT
      DOUBLE PRECISION S1A(1),S1B(1)
C     ijka integrals/intermediates used in D3T3 = WT2
      DOUBLE PRECISION OOOV(LNOOOV)
      DIMENSION OOOVAD(8),LENINT(8)
C
      DOUBLE PRECISION CORE(1)
C
      DIMENSION LEN(8,8),IADBLK(8),LENBLK(8)
      DIMENSION                        IADT2(8) ,LENT2(8),
     1                                 IADV(8)  ,LENV(8)
C
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /SYMINF/ NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON /SYM/    POP(8,2),VRT(8,2),NTAA,NTBB,NF1AA,NF2AA,
     1                NF1BB,NF2BB
      COMMON /FLAGS/  IFLAGS(100)
      EQUIVALENCE(ICLLVL,IFLAGS( 2))
      EQUIVALENCE(INONHF,IFLAGS(38))
      EQUIVALENCE(IORBTP,IFLAGS(39))
C
C     TRIPLES COMMON BLOCKS
C
      COMMON /TRIPLES/ TRIPNI,TRIPNI1,TRIPIT,T3STOR
      COMMON /ACTORB/ ABSVRT(MAXBASFN,8,2),ABSOCC(MAXBASFN,8,2)
      COMMON /T3OFF/  IOFFVV(8,8,10),IOFFOO(8,8,10),IOFFVO(8,8,4)
      COMMON /T3ENRG/ E4TAAA,E4TBBB,E4TAAB,E4TBBA,
     1                E5STA ,E5STB ,
     1                E4STA ,E4STB ,
     1                E5TD1 ,E5TD4 ,E5TD2 ,E5TD3,
     1                E5TT1 ,E5TT4 ,E5TT2 ,E5TT3,
     1                E5QT1 ,E5QT4 ,E5QT2 ,E5QT3,
     1                E6TT1 ,E6TT4 ,E6TT2 ,E6TT3
      COMMON /LISWI/  LWIC11,LWIC12,LWIC13,LWIC14,
     1                LWIC15,LWIC16,LWIC17,LWIC18,
     1                LWIC21,LWIC22,LWIC23,LWIC24,
     1                LWIC25,LWIC26,LWIC27,LWIC28,
     1                LWIC31,LWIC32,LWIC33,
     1                LWIC34,LWIC35,LWIC36,
     1                LWIC37,LWIC38,LWIC39,LWIC40,LWIC41,LWIC42
      COMMON /AUXIO/  DISTSZ(8,100),NDISTS(8,100),INIWRD(8,100),LNPHYR,
     1                NRECS,LUAUX
      COMMON /T3IOOF/ IJKPOS(8,8,8,2),IJKLEN(36,8,4),IJKOFF(36,8,4),
     1                NCOMB(4)
      COMMON /T3METH/ CCSDT4,CCSDT
C
      INDEX(I) = I*(I-1)/2
C
      IF(ISPIN.EQ.1)THEN
      WRITE(6,1015)
 1015 FORMAT(' @TRPS14-I, Spin case AAA ')
      ELSE
      WRITE(6,1020)
 1020 FORMAT(' @TRPS14-I, Spin case BBB ')
      ENDIF
C
C     GET EIGENVALUES
C
      IF(ISPIN.EQ.1)THEN
      CALL GETREC(20,'JOBARC','SCFEVALA',(NO+NV)*IINTFP,EVAL)
      ELSE
      CALL GETREC(20,'JOBARC','SCFEVALB',(NO+NV)*IINTFP,EVAL)
      ENDIF
C
C     Compute (B<C,A) lengths for given IRPIJK (=IRPABC)
C
      DO   90 IRPIJK=1,NIRREP
      DO   80 IRPA  =1,NIRREP
      IRPBC = DIRPRD(IRPIJK,IRPA)
      LEN(IRPA,IRPIJK) = IRPDPD(IRPBC,ISPIN) * VRT(IRPA,ISPIN)
   80 CONTINUE
   90 CONTINUE
C
C     COMPUTE ADDRESSES FOR BLOCKS OF OOOV INTEGRALS. PRESENTLY
C     THESE ARE HELD IN CORE.
C
      DO  250 IRREP=1,NIRREP
      LENINT(IRREP) = IRPDPD(IRREP,2+ISPIN) * IRPDPD(IRREP,15+ISPIN)
  250 CONTINUE
C
      OOOVAD(1) = 1
      IF(NIRREP.GT.1)THEN
      DO  260 IRREP = 2,NIRREP
      OOOVAD(IRREP) = OOOVAD(IRREP-1) + LENINT(IRREP-1)
  260 CONTINUE
      ENDIF
C      WRITE(6,1210)
 1210 FORMAT(' @TRPS14-I, OOOV ARRAY LENGTHS AND ADDRESSES ')
      DO  270 IRREP=1,NIRREP
C      WRITE(6,1220) IRREP,LENINT(IRREP),OOOVAD(IRREP)
 1220 FORMAT(' IRREP, LENGTH, ADDRESS ',I4,I6,I6)
  270 CONTINUE
C
      IF(ISPIN.EQ.1)THEN
      LISTWO = LWIC11
      ELSE
      LISTWO = LWIC12
      ENDIF
C
      DO  280 IRREP=1,NIRREP
      CALL GETTRN(OOOV(OOOVAD(IRREP)),CORE,IRPDPD(IRREP,2+ISPIN),
     1            IRPDPD(IRREP,15+ISPIN),2,IRREP,LISTWO)
  280 CONTINUE
C
C     COMPUTE THE NUMBER OF FREE DOUBLE WORDS.
C
      MCORE = MAXCOR / IINTFP
      WRITE(6,1230) MAXCOR,MCORE,IINTFP
 1230 FORMAT(' @TRPS14-I, Number of free integer words ',I10,/,
     1       '            Number of free double words  ',I10,/,
     1       '            Ratio                        ',I10)
C
      E4T14  = 0.0D+00
      E5ST14 = 0.0D+00
C
      DO  1000 IRPIJK=1,NIRREP
C
      IJKVAL = 0
C
      DO   990   IRPK=1,NIRREP
      IF(POP(IRPK,ISPIN).EQ.0) GOTO 990
      DO   980   IRPJ=1,IRPK
      IRPJK = DIRPRD(IRPJ,IRPK)
      IRPI  = DIRPRD(IRPJK,IRPIJK)
      IRPIJ =  DIRPRD(IRPI,IRPJ)
      IRPIK =  DIRPRD(IRPI,IRPK)
C
      IF(IRPI.GT.IRPJ.OR.POP(IRPI,ISPIN).EQ.0.OR.
     1                   POP(IRPJ,ISPIN).EQ.0) GOTO 980
C
      IF(IRPI.EQ.IRPJ.AND.
     1   IRPI.EQ.IRPK.AND.POP(IRPK,ISPIN).LT.3) GOTO 980
      IF(IRPJ.EQ.IRPK.AND.POP(IRPK,ISPIN).LT.2) GOTO 980
      IF(IRPI.EQ.IRPJ.AND.POP(IRPJ,ISPIN).LT.2) GOTO 980
C
      IJKEQL = .FALSE.
      IJEQL  = .FALSE.
      JKEQL  = .FALSE.
      NONEQL = .FALSE.
      IF(IRPI.EQ.IRPJ.AND.IRPI.EQ.IRPK) IJKEQL = .TRUE.
      IF(IRPJ.EQ.IRPK.AND.IRPI.NE.IRPK)  JKEQL = .TRUE.
      IF(IRPI.EQ.IRPJ.AND.IRPI.NE.IRPK)  IJEQL = .TRUE.
      IF(IRPI.NE.IRPJ.AND.IRPI.NE.IRPK.AND.IRPJ.NE.IRPK) NONEQL = .TRUE.
C
      IF(IJKEQL)THEN
      NIJ = (POP(IRPK,ISPIN) * (POP(IRPK,ISPIN)-1))/2
      NIK = (POP(IRPK,ISPIN) * (POP(IRPK,ISPIN)-1))/2
      NJK = (POP(IRPK,ISPIN) * (POP(IRPK,ISPIN)-1))/2
      ENDIF
C
      IF(JKEQL)THEN
      NIJ = POP(IRPI,ISPIN) * POP(IRPJ,ISPIN)
      NIK = POP(IRPI,ISPIN) * POP(IRPK,ISPIN)
      NJK = (POP(IRPK,ISPIN) * (POP(IRPK,ISPIN)-1))/2
      ENDIF
C
      IF(IJEQL)THEN
      NIJ = (POP(IRPJ,ISPIN) * (POP(IRPJ,ISPIN)-1))/2
      NIK = POP(IRPI,ISPIN) * POP(IRPK,ISPIN)
      NJK = POP(IRPJ,ISPIN) * POP(IRPK,ISPIN)
      ENDIF
C
      IF(NONEQL)THEN
      NIJ = POP(IRPI,ISPIN) * POP(IRPJ,ISPIN)
      NIK = POP(IRPI,ISPIN) * POP(IRPK,ISPIN)
      NJK = POP(IRPJ,ISPIN) * POP(IRPK,ISPIN)
      ENDIF
C
C     COMPUTE ADDRESSES AND LENGTHS OF ABC SYMMETRY BLOCKS FOR
C     THIS IJK. THIS LOOP IS EFFECTIVELY OVER IRREPS OF A (IE
C     COLUMNS OF THE EVENTUAL TARGET).
C
      DO  300 IRREP=1,NIRREP
      IF(IRREP.EQ.1)THEN
      IADBLK(IRREP) = 1
      ELSE
      IADBLK(IRREP) = IADBLK(IRREP-1) + LEN(IRREP-1,IRPIJK)
      ENDIF
      LENBLK(IRREP) = LEN(IRREP,IRPIJK)
  300 CONTINUE
C
      LENABC=0
      DO  310 IRREP=1,NIRREP
      LENABC = LENABC + LENBLK(IRREP)
  310 CONTINUE
C
C
C     I000 is t3(a<b<c)
C
      I000 = 1
      I010 = I000 + DISTSZ(IRPIJK,1 + 3 * (ISPIN-1))
      I020 = I010 + LENABC
C
C     SET ADDRESSES FOR T2 VECTORS
C
      I030 = I020 + IRPDPD(IRPIJ,ISPIN) * NIJ
      I040 = I030 + IRPDPD(IRPIK,ISPIN) * NIK
      I050 = I040 + IRPDPD(IRPJK,ISPIN) * NJK
C
C     DETERMINE DISTRIBUTION SIZES FOR EXPANDED T2 VECTORS
C
      DSZEIJ = IRPDPD(IRPIJ,18+ISPIN)
      DSZEIK = IRPDPD(IRPIK,18+ISPIN)
      DSZEJK = IRPDPD(IRPJK,18+ISPIN)
C
      I060 = I050 + DSZEIJ * NIJ
      I070 = I060 + DSZEIK * NIK
      I080 = I070 + DSZEJK * NJK
C
C     READ T2 VECTORS.
C
      CALL GETLST(CORE(I020),IOFFOO(IRPJ,IRPIJ,ISPIN)+1,
     1            NIJ,1,IRPIJ,43+ISPIN)
      CALL GETLST(CORE(I030),IOFFOO(IRPK,IRPIK,ISPIN)+1,
     1            NIK,1,IRPIK,43+ISPIN)
      CALL GETLST(CORE(I040),IOFFOO(IRPK,IRPJK,ISPIN)+1,
     1            NJK,1,IRPJK,43+ISPIN)
C
C     EXPAND T2 VECTORS
C
      CALL SYMEXP2(IRPIJ,VRT(1,ISPIN),DSZEIJ,IRPDPD(IRPIJ,ISPIN),
     1             NIJ,CORE(I050),CORE(I020))
      CALL SYMEXP2(IRPIK,VRT(1,ISPIN),DSZEIK,IRPDPD(IRPIK,ISPIN),
     1             NIK,CORE(I060),CORE(I030))
      CALL SYMEXP2(IRPJK,VRT(1,ISPIN),DSZEJK,IRPDPD(IRPJK,ISPIN),
     1             NJK,CORE(I070),CORE(I040))
C
      I090 = I080 + DISTSZ(IRPIJK, 1 + 3*(ISPIN-1))
      I100 = I090 + IRPDPD(IRPJK,ISPIN)
      I110 = I100 + IRPDPD(IRPIK,ISPIN)
      I120 = I110 + IRPDPD(IRPIJ,ISPIN)
C
C     Old triples.
C
      I130 = I120 + DISTSZ(IRPIJK,1+3*(ISPIN-1))
C
C     Disconnected triples.
C
      I140 = I130 + DISTSZ(IRPIJK,1 + 3 * (ISPIN-1))
      I150 = I140 + LENABC
      ISTART = I150
      NLEFT = MCORE - ISTART
C
      IF(ISTART.GE.MCORE)THEN
      WRITE(6,9010)
      CALL INSMEM('TRPS14',ISTART,MCORE)
      ENDIF
C
C     FORM ABC DENOMINATOR FOR THIS IJK SYMMETRY BLOCK.
C
      CALL MKD314(CORE(I080),EVAL,ISPIN,NO,NV,IRPIJK,
     &            DISTSZ(1,1+3*(ISPIN-1)))
C
      IF(NONEQL)THEN
      KLOW  = 1
      KHIGH = POP(IRPK,ISPIN)
      JLOW  = 1
      JHIGH = POP(IRPJ,ISPIN)
      ILOW  = 1
      IHIGH = POP(IRPI,ISPIN)
      ENDIF
C
      IF(IJKEQL)THEN
      KLOW  = 3
      KHIGH = POP(IRPK,ISPIN)
      JLOW  = 2
      ILOW  = 1
      ENDIF
C
      IF(IJEQL)THEN
      KLOW  = 1
      KHIGH = POP(IRPK,ISPIN)
      JLOW  = 2
      JHIGH = POP(IRPJ,ISPIN)
      ILOW  = 1
      ENDIF
C
      IF(JKEQL)THEN
      KLOW  = 2
      KHIGH = POP(IRPK,ISPIN)
      JLOW  = 1
      ILOW  = 1
      IHIGH = POP(IRPI,ISPIN)
      ENDIF
C
      DO   430 K=KLOW,KHIGH
C
      IF(IJKEQL.OR.JKEQL) JHIGH = K-1
      DO   420 J=JLOW,JHIGH
C
      IF(IJKEQL.OR.IJEQL) IHIGH = J-1
      DO   410 I=ILOW,IHIGH
C
      CALL ZERO(CORE(I000),DISTSZ(IRPIJK,1+3*(ISPIN-1)))
      CALL ZERO(CORE(I010),LENABC)
      CALL D1T14(CORE(I010),CORE(I050),CORE(I060),CORE(I070),
     1 OOOV(OOOVAD(IRPIJ) + 
     1      IOFFOO(IRPJ,IRPIJ,ISPIN)*IRPDPD(IRPIJ,15+ISPIN)),
     1 OOOV(OOOVAD(IRPIK) + 
     1      IOFFOO(IRPK,IRPIK,ISPIN)*IRPDPD(IRPIK,15+ISPIN)),
     1 OOOV(OOOVAD(IRPJK) + 
     1      IOFFOO(IRPK,IRPJK,ISPIN)*IRPDPD(IRPJK,15+ISPIN)),
     1           CORE(ISTART),ISPIN,
     1           IADBLK,LENBLK,IADT2,LENT2,IADV,LENV,
     1           I,J,K,IRPI,IRPJ,IRPK,IRPIJ,IRPIK,IRPJK,IRPIJK,
     1           DSZEIJ,DSZEIK,DSZEJK,
     1 IRPDPD(IRPIJ,15+ISPIN),IRPDPD(IRPIK,15+ISPIN),
     1 IRPDPD(IRPJK,15+ISPIN),NLEFT)
C
c      IJK  = IJKPOS(IRPI,IRPJ,IRPK,1)
c      IOFF = IJKOFF(IJK,IRPIJK,1+3*(ISPIN-1))
c      IF(IJKEQL) IJKVAL = IOFF + ((K-1)*(K-2)*(K-3))/6 + INDEX(J-1) + I
c      IF(IJEQL ) IJKVAL = IOFF + (K-1)*NIJ             + INDEX(J-1) + I
c      IF(JKEQL ) IJKVAL = IOFF + (INDEX(K-1)+ J-1)*POP(IRPI,ISPIN)  + I
c      IF(NONEQL) IJKVAL = IOFF + (K-1)*NIJ + (J-1)*POP(IRPI,ISPIN)  + I
      IJKVAL = IJKVAL + 1
C
      IF(TRIPNI)THEN
      CALL GETLIST(CORE(I120),IJKVAL,1,1,IRPIJK,4+1+3*(ISPIN-1))
      CALL SYMCONTW(CORE(I000),CORE(I010),EVAL,IADBLK,ISPIN,NO,NV,
     1              IRPIJK)
       IF(ISPIN.EQ.1)THEN
       E5TD1 = E5TD1 + SDOT(DISTSZ(IRPIJK,1+3*(ISPIN-1)),
     1                      CORE(I120),1,CORE(I000),1)
       ELSE
       E5TD4 = E5TD4 + SDOT(DISTSZ(IRPIJK,1+3*(ISPIN-1)),
     1                      CORE(I120),1,CORE(I000),1)
       ENDIF
C
C     Disconnected QT (or is it TQ ?) term.
C
      CALL ZERO(CORE(I130),DISTSZ(IRPIJK,1+3*(ISPIN-1)))
      CALL ZERO(CORE(I140),LENABC)
      CALL S1S214N(S1A,S1B,CORE(ISTART),CORE(I140),IADBLK,ISPIN,
     1             I,J,K,IRPI,IRPJ,IRPK,IRPIJ,IRPIK,IRPJK,IRPIJK,3)
      CALL SYMCONTW(CORE(I130),CORE(I140),EVAL,IADBLK,ISPIN,NO,NV,
     1              IRPIJK)
       IF(ISPIN.EQ.1)THEN
       E5QT1 = E5QT1 + SDOT(DISTSZ(IRPIJK,1+3*(ISPIN-1)),
     1                      CORE(I120),1,CORE(I130),1)
       ELSE
       E5QT4 = E5QT4 + SDOT(DISTSZ(IRPIJK,1+3*(ISPIN-1)),
     1                      CORE(I120),1,CORE(I130),1)
       ENDIF
C
      CALL ZERO(CORE(I000),DISTSZ(IRPIJK,1+3*(ISPIN-1)))
      ENDIF
C
C     TT terms.
C
      CALL ZERO(CORE(I000),DISTSZ(IRPIJK,1+3*(ISPIN-1)))
      CALL ZERO(CORE(I010),LENABC)
C
C     CCSDT or non-HF calculations without semicanonical orbitals.
C     (i) Virtual orbital sum.
C
      IF(ICLLVL.EQ.18.OR.(INONHF.GT.0.AND.IORBTP.EQ.0))THEN
      CALL T3FT314V(CORE(I010),CORE(ISTART),MAXCOR,ISPIN,
     1              DISTSZ(IRPIJK,1+3*(ISPIN-1)),
     1              LENABC,IRPIJK,IJKVAL,IADBLK)
      ENDIF
C
      IF(CCSDT4.OR.CCSDT)THEN
C
C     CCSDT abef intermediate contribution.
C
      CALL T3WT314P(CORE(I010),CORE(ISTART),MAXCOR,ISPIN,
     1               DISTSZ(IRPIJK,1+3*(ISPIN-1)),
     1              LENABC,IRPIJK,IJKVAL,IADBLK)
C
C     CCSDT maei intermediate contribution.
C
      CALL T3WT314R(CORE(I010),CORE(ISTART),MAXCOR,ISPIN,LENABC,
     1              IADBLK,IRPI,IRPJ,IRPK,I,J,K,IRPIJK)
      ENDIF
C
C     Convert the a<b;c T3 to a<b<c.
C
      CALL SYMCONTW(CORE(I000),CORE(I010),EVAL,IADBLK,ISPIN,NO,NV,
     1              IRPIJK)
C
C     CCSDT or non-HF calculations without semicanonical orbitals.
C     (ii) Occupied orbital sum.
C     Note : T3FT314O computes contributions to an a<b<c T3 rather than
C     to a<b;c. Therefore, it MUST be called after SYMCONTW.
C
      CALL ZERO(CORE(ISTART),LENABC)
      IF(ICLLVL.EQ.18.OR.(INONHF.GT.0.AND.IORBTP.EQ.0))THEN
      CALL T3FT314O(CORE(I000),CORE(ISTART),MAXCOR,ISPIN,
     1              DISTSZ(IRPIJK,1+3*(ISPIN-1)),
     1              IRPI,IRPJ,IRPK,IRPIJK,I,J,K)
      ENDIF
      IF(CCSDT4.OR.CCSDT)THEN
      CALL T3WT314HH(CORE(I000),CORE(ISTART),MAXCOR,ISPIN,
     1               DISTSZ(IRPIJK,1+3*(ISPIN-1)),
     1               IRPI,IRPJ,IRPK,IRPIJK,I,J,K)
      ENDIF
C
C     In noniterative runs compute E5TT.
C
      IF(TRIPNI)THEN
       IF(ISPIN.EQ.1)THEN
       E5TT1 = E5TT1 + SDOT(DISTSZ(IRPIJK,1+3*(ISPIN-1)),
     1                      CORE(I120),1,CORE(I000),1)
       ELSE
       E5TT4 = E5TT4 + SDOT(DISTSZ(IRPIJK,1+3*(ISPIN-1)),
     1                      CORE(I120),1,CORE(I000),1)
       ENDIF
      ENDIF
C
C    Try to compute E6TT. T3[3;T] is at I000. Form disconnected D3T3
C
      CALL ZERO(CORE(I120),DISTSZ(IRPIJK,1+3*(ISPIN-1)))
      CALL ZERO(CORE(I010),LENABC)
      CALL S1S214N(S1A,S1B,CORE(ISTART),CORE(I010),IADBLK,ISPIN,
     1             I,J,K,IRPI,IRPJ,IRPK,IRPIJ,IRPIK,IRPJK,IRPIJK,1)
      CALL SYMCONTW(CORE(I120),CORE(I010),EVAL,IADBLK,ISPIN,NO,NV,
     1              IRPIJK)
      DIJK = EVAL(ABSOCC(I,IRPI,ISPIN)) + EVAL(ABSOCC(J,IRPJ,ISPIN))
     1                                  + EVAL(ABSOCC(K,IRPK,ISPIN))
      CALL RMD314(CORE(I120),CORE(I080),
     1            DISTSZ(IRPIJK,1+3*(ISPIN-1)),DIJK)
       IF(ISPIN.EQ.1)THEN
       E6TT1 = E6TT1 + SDOT(DISTSZ(IRPIJK,1+3*(ISPIN-1)),
     1                      CORE(I120),1,CORE(I000),1)
       ELSE
       E6TT4 = E6TT4 + SDOT(DISTSZ(IRPIJK,1+3*(ISPIN-1)),
     1                      CORE(I120),1,CORE(I000),1)
       ENDIF
C
C
      DIJK = EVAL(ABSOCC(I,IRPI,ISPIN)) + EVAL(ABSOCC(J,IRPJ,ISPIN))
     1                                  + EVAL(ABSOCC(K,IRPK,ISPIN))
      CALL RMD314(CORE(I000),CORE(I080),
     1            DISTSZ(IRPIJK,1+3*(ISPIN-1)),DIJK)
      CALL E4TIJK(CORE(I000),CORE(I080),
     1            DISTSZ(IRPIJK,1+3*(ISPIN-1)),DIJK,E4T14)
C
C     CORE(I000) A<B<C ordered T3(C)
C
C     Write out the amplitudes. Now the fun begins !
C
c      IJK  = IJKPOS(IRPI,IRPJ,IRPK,1)
c      IOFF = IJKOFF(IJK,IRPIJK,1+3*(ISPIN-1))
c      IF(IJKEQL) IJKVAL = IOFF + ((K-1)*(K-2)*(K-3))/6 + INDEX(J-1) + I
c      IF(IJEQL ) IJKVAL = IOFF + (K-1)*NIJ             + INDEX(J-1) + I
c      IF(JKEQL ) IJKVAL = IOFF + (INDEX(K-1)+ J-1)*POP(IRPI,ISPIN)  + I
c      IF(NONEQL) IJKVAL = IOFF + (K-1)*NIJ + (J-1)*POP(IRPI,ISPIN)  + I
C     write(6,*) ' @TRPS14-I, sym, record ',IRPIJK,IJKVAL
c      IF(T3STOR)THEN
c      CALL PUTLIST(CORE(I000),IJKVAL,1,1,IRPIJK,1+3*(ISPIN-1))
c      ENDIF
  410 CONTINUE
  420 CONTINUE
  430 CONTINUE
C
  980 CONTINUE
  990 CONTINUE
 1000 CONTINUE
C
c      write(6,*) ' trps14-i, td and tt ',E5TD1,E5TD4,E5TT1,E5TT4
c      write(6,*) ' trps14-i, e5qt1 and e5qt4 ',e5qt1,e5qt4
c      write(6,*) ' @trps14-i, e6tt1, e6tt4 ',e6tt1,e6tt4
      RETURN
 9010 FORMAT(' @TRPS14-I, Insufficient memory to continue. ')
      END
