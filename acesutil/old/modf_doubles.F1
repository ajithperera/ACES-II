      SUBROUTINE MODF_DOUBLES(ISPIN,ILIST,NT2SIZ,NOCCA,NOCCB,NVRTA,
     &                        NVRTB,NSMSZ1,NSMSZ2,T,SYVEC1,SYVEC2,
     &                        I,J,A,B,TYPE,ACT,IUNIT)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C
#include <maxbasfn.par>
C
      INTEGER A(NT2SIZ),B(NT2SIZ),SYVEC1(NSMSZ1),SYVEC2(NSMSZ2),
     &        AIRREP, BIRREP, A_VRT, B_VRT, POP, VRT, DIRPRD,
     &        NDRPOP(8), NDRVRT(8), IPOP_OFF(8), IVRT_OFF(8),
     &        A_IND, B_IND, A_IRREP, B_IRREP, AEND
      CHARACTER*2 SPCASE(3)
      CHARACTER*1 TYPE
      CHARACTER*4 ACT
      LOGICAL PACKD
C
      DIMENSION T(NT2SIZ),I(NT2SIZ), J(NT2SIZ)
C
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /INFO/ NOCCO(2),NVRTO(2)
      COMMON /SYM/POP(8,2),VRT(8,2),NT(2),NFMI(2),NFEA(2)
      COMMON /SYMPOP/ IRPDPD(8,22), ISYTYP(2,500), ID(18)
      COMMON /SYMINF/ NSTART, NIRREP, IRREPS(255,2), DIRPRD(8,8)
      COMMON /IRREPS_OF_ORB/ IRREP_ORB(MAXBASFN, 2)
C
      DATA SPCASE /'AA','BB','AB'/
C
      ILRG(INTX)=INT(0.5D0*(1.D0+SQRT(8.0*INTX-7)))+1
      NNM1O2(IX)=(IX*(IX-1))/2
C
      IF(NT2SIZ.EQ.0)RETURN
C
      CALL GETALL(T,NT2SIZ,1,ILIST)
C
#ifdef _DEBUG_LVLM1
      write(6,*)
      Write(6, "(a)") "T2 amplitudes"
      Write(6,*)
      Write(6, "(6F13.8)") (T(it2), it2=1, NT2SIZ)
      Write(6,*)
#endif
C  
      DO IRANK=1,NT2SIZ

         CALL PCKIND(IRANK,ISPIN,SYVEC1,SYVEC2,NSMSZ1,NSMSZ2,
     &               I(IRANK),J(IRANK),A(IRANK),B(IRANK))
      ENDDO
C
#ifdef _DEBUG_LVL0
      Write(6,"(a,a,a)") type,"2 amplitudes for spin case ",
     &                   spcase(ispin)
      Write(6,*)
      do irank = 1, nt2siz
         Write(6,"(i3,1x,i3,1x,i3,1x,i3,1x,F13.8)")I(irank),
     &                                             J(irank), A(irank),
     &                                             B(irank), T(irank)
      enddo
      write(6,*)
#endif
C
      CALL GETREC(-1,'JOBARC','NDROPPOP',NIRREP,NDRPOP)
      CALL GETREC(-1,'JOBARC','NDROPVRT',NIRREP,NDRVRT)
      CALL GETREC(-1,'JOBARC','NDROTPOP',1,NDRPOPT)
      CALL GETREC(-1,'JOBARC','NDROTVRT',1,NDRVRTT)
C
#ifdef _DEBUG_LVL0
       Write(6,"(a,8I4)") "Occ-Drop", (NDRPOP(k), k=1, Nirrep)
       Write(6,"(a,8I4)") "Vrt-Drop", (NDRVRT(k), k=1, Nirrep)
       Write(6,*)
       Write(6,"(a)") "The orbital symmetries"
       do i1 = 1, ispin
       write(6,"(10(1x,I2))")(IRREP_ORB(j1,i1),j1=1,NOCCO(i1)
     &           +NVRTO(i1)+NDRPOPT+NDRVRTT)
       enddo
#endif
      IPOP_OFF(1) = 0
      IVRT_OFF(1) = NDRPOP(1)
      DO IRREP = 2, NIRREP
         IPOP_OFF(IRREP) = IPOP_OFF(IRREP-1) + NDRPOP(IRREP-1)
         IVRT_OFF(IRREP) = IVRT_OFF(IRREP-1) + NDRVRT(IRREP-1)
      ENDDO

      IF (ISPIN .EQ. 1) THEN
          ASPIN = 1
          BSPIN = 1 
          PACKD = .TRUE. 
      ELSEIF (ISPIN .EQ. 2) THEN
          ASPIN = 2 
          BSPIN = 2 
          PACKD = .TRUE. 
      ELSEIF (ISPIN .EQ. 3) THEN
          ASPIN = 1
          BSPIN = 2  
          PACKD = .FALSE. 
      ENDIF
C
      IRREPX = 1
      Ioff   = 0
C
#ifdef _DEBUG_LVL0
      Write(6,*)
      Write(6,"(6x,a,3x,a,3x,a,3x,a)") 'i  [i_SYM]  ', 'j  [j_SYM]  ', 
     &                                 'a  [a_SYM]  ', 'b  [b_SYM]  '
      write(6,*) 
#endif
      IF (ACT .EQ. "SAVE") WRITE(IUNIT, "(I5)") NT2SIZ
C
      DO IRREPR = 1, NIRREP
         IRREPL = DIRPRD(IRREPR, IRREPX)
 
         DO JIRREP = 1, NIRREP
            IIRREP = DIRPRD(JIRREP, IRREPR)
C
            Write(6,"(a, 2I2)") "Irrepi and j", IIRREP, JIRREP
C
            IF (PACKD .AND. IIRREP .LT. JIRREP) GO TO 10

            DO J_OCC = 1, POP(JIRREP, BSPIN)
C
               IF (PACKD .AND. IIRREP .EQ. JIRREP)  THEN
                   IEND = (J_OCC - 1)
               ELSE
                   IEND = POP(IIRREP, ASPIN)
               ENDIF
       
CSSS               DO I_OCC = 1, POP(IIRREP, ASPIN)
                  DO I_OCC = 1, IEND

                  DO BIRREP = 1, NIRREP
                     Write(6,"(a,2I2)") "irrepl and r",irrepr, irrepl
                     AIRREP = DIRPRD(IRREPL, BIRREP)

                      IF (PACKD .AND. AIRREP .LT. BIRREP) GO TO 100

                      DO B_VRT = 1, VRT(BIRREP, BSPIN)
C
                        IF (PACKD .AND.  AIRREP .EQ. BIRREP)  THEN
                           AEND = (B_VRT - 1)
                        ELSE
                           AEND = VRT(AIRREP, ASPIN)
                        ENDIF
C
CSSS                        DO A_VRT = 1, VRT(AIRREP, ASPIN)
                        DO A_VRT = 1, AEND
C
                           IOFF  = IOFF + 1
                  Write(6,"(a, 2I2)") "Irrep a and b", AIRREP, BIRREP
C
                           If (Ioff .LE. NT2SIZ) THEN
C
                              I_IND = I(Ioff) + NDRPOP(IIRREP) +
     &                                          IPOP_OFF(IIRREP)
                              J_IND = J(Ioff) + NDRPOP(JIRREP) + 
     &                                          IPOP_OFF(JIRREP)
                             
                              A_IND = A(Ioff) + IVRT_OFF(AIRREP)
                              B_IND = B(Ioff) + IVRT_OFF(BIRREP)

C                              A_IND = A(Ioff) + NDRVRT(AIRREP) +
C     &                                          IVRT_OFF(AIRREP)
C                              B_IND = B(Ioff) + NDRVRT(BIRREP) +
C     &                                          IVRT_OFF(BIRREP)
C     
                              I_IRREP = IRREP_ORB(I_IND, ASPIN)
                              J_IRREP = IRREP_ORB(J_IND, BSPIN)
                              A_IRREP = IRREP_ORB(A_IND, ASPIN)
                              B_IRREP = IRREP_ORB(B_IND, BSPIN)
C     

#ifdef _DEBUG_LVL0
                              Write(6, "(3X,I4,3X, ' [',I1,'],  ',
     &                              1X, I4,3X, ' [',I1,']   ;',
     &                              I4,3X, ' [',I1,']    ', I4,3X,
     &                              ' [',I1,']  ', F12.6)")
     &                              I_IND, I_IRREP, J_IND,
     &                              J_IRREP, A_IND, A_IRREP, 
     &                              B_IND, B_IRREP, T(ioff)
#endif
C 
                              IF (ACT .EQ. "SAVE") WRITE(IUNIT,"(3X, 
     &                                     I4, 3X, I1, 3X, I4, 3X, 
     &                                     I1, 3X, I4, 3X, I1, 3X,
     &                                     I4, 3X, I1, 3X, F15.12)")
     &                                     I_IND, I_IRREP, J_IND,
     &                                     J_IRREP, A_IND, A_IRREP,
     &                                     B_IND, B_IRREP, T(ioff)
C
                              IF (ACT .EQ. "READ") CALL T2MATCH( 
     &                                               I_IND, I_IRREP, 
     &                                               J_IND, J_IRREP, 
     &                                               A_IND, A_IRREP,
     &                                               B_IND, B_IRREP, 
     &                                               T(Ioff))
                           ENDIF 

                        ENDDO
                     ENDDO
C
  100                 CONTINUE                  
C               
                  ENDDO
C
               ENDDO
            ENDDO
C
  10       CONTINUE
C
         ENDDO
C
      ENDDO
C
#ifdef _DEBUG_LVL0
      write(6,*)
      Write(6, "(a)") "Read T2 amplitudes"
      Write(6,*)
      Write(6, "(6F13.8)") (T(it2), it2=1, NT2SIZ)
      Write(6,*)
#endif

      IF (ACT .EQ. "READ") CALL PUTALL(T,NT2SIZ,1,ILIST)
C
      RETURN
      END
