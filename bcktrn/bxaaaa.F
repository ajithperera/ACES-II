      SUBROUTINE BXAAAA(EVEC,BUF1,BUF2,BUF3,BUFTMP,LEN1,LEN2,
     &                  LEN3,LENTMP,IUHF,SCR,MAXSIZE,INCORE)
C
C THIS ROUTINE TRANSFORMS T2 AMPLITUDES OF SYMMETRY TYPE
C  AAAA FROM THE MO TO THE AO BASIS.  THE AMPLITUDES ARE
C  DEALT WITH IN MULLIKEN ORDER (AI,BJ) AND THE TRANSFORMATION
C  PASSES THROUGH TWO STAGES:
C
C    T(AI,BJ) -> T(XX,BJ) -> T(X<X,BJ) -> T(X<X,XX) -> T(X<X,X<X)
C
C EVEC IS THE SYMMETRY PACKED EIGENVECTOR MATRIX AS PREPARED BY SYPKEV.
C
C REQUIRED SPIN CASES:
C             AIBJ
C             ----
C             AAAA (UHF ONLY, IS DONE SEPARATELY AFTER BBBB AND AABB
C             BBBB (UHF ONLY, IS DONE FIRST, BUT ONLY FIRST HALF TRANSFORM)
C             AABB (RHF AND UHF)
C
C THE TRANSFORMATION IS IN THE RHF CASE STRAIGHTFORWARD. HOWEVER, IN THE
C UHF CASE WE APPLY THE FOLLOWING STRATEGY. FIRST WE DEAL SIMULTANEOUSLY
C WITH THE AABB AND BBBB SPIN CASE. WE HALF TRANSFORM AABB TO XXBB, THEN
C WE HALFTRANSFORM BBBB TO XXBB AND ADD BOTH HALFTRANSFORMED GAMMAS. THE
C SUM IS FINALLY TRANSFORMED TO XXXX. THE AAAA CASE IS TREATED SEPARATELY
C AND HERE THE FINAL XXXX TERMS ARE ADDED TO THE PREVIOUS ONES. NOTE ALSO
C THAT IN THE UHF CASE, THE XXXX CONTRIBUTIONS HAVE TO BE SYMMETRIZED IN
C ORDER TO ALLOW CANONICAL ORDERING. THIS IS DONE BY CALLING SYMMET3
C
C MEMORY REQUIREMENTS:
C       
C       BUF1  = MAX(NTAIBJ,NTXXBJ)             (RHF AND UHF)
C             = NTAIBJ                         (OUT OF CORE)
C       BUF2  = MAX(NTAIBJ,NXX)                (RHF AND UHF)
C       BUF3  = NTAIBJ                         (UHF ONLY)
C       BUFTMP= 2*NAO*NAO                      (RHF AND UHF)
C 
C  WHERE: 
C        NTAIBJ - LENGTH OF THE IRREP 1 DPD FOR T2.
C        NTXXBJ - MAX[NAO(IRR)*NAO(IRR)*NOC(IRR)*NVRT(IRR)] OVER ALL IRREPS.
C        NXX    - MAX[NAO(IRR)*NAO(IRR)] FOR ALL IRREPS.
C
CEND
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL INCORE
      DIMENSION BUF1(LEN1),BUF2(LEN2),BUF3(LEN3),BUFTMP(LENTMP),EVEC(1),
     &          SCR(MAXSIZE)
      INTEGER POP,VRT,DIRPRD,DISSIZ,AOPOP,RECNUM
C
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
 
#include "icdacc.com"
 
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON /SYM/    POP(8,2),VRT(8,2),NT(2),NFMI(2),NFEA(2)
      COMMON /SYMINF/ NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON /AOPOPS/ AOPOP(8),MOPOP(8),NAO,NAOSPH,NMO
      COMMON /AOOFST/ INDOCC(8,2),INDVRT(8,2)
C
      DATA ONE   /1.0/
      DATA ZILCH /0.0/
      DATA FOURTH/0.25/
C
      NNP1O2(I)=(I*(I+1))/2
C
C  LOOP OVER THE DIFFERENT TYPES
C
      DO 1000 ITYPE=1,IUHF+1
C
C  SET SPINS FOR RIGHT AND LEFT SIDE OF GAMMA
C
      IF(ITYPE.EQ.1)THEN
C
C AABB AND BBBB SPIN CASES
C
       LISTW=118
       ISL=1
       ISR=2
C
      ELSE 
C
C AAAA SPIN CASE
C
       LISTW=119
       ISL=1
       ISR=1
C
      ENDIF
C
C READ IN FIRST IRREP OF SYMMETRY-PACKED T2 VECTOR.  THESE AMPLITUDES
C  BELONG TO ONE OF THE SYMMETRY TYPES AAAA OR AABB.  
C  EACH LOGICAL RECORD CONTAINS - ALL AA, FOLLOWED BY ALL BB, CC, ETC
C  FOR A SPECIFIC BJ PAIR WHICH IS ALSO AA,BB,CC ETC.  FROM THIS LIST,
C  THE AAAA AMPLITUDES WILL BE EXTRACTED AND ORDERED
C
C                  1 1 1 1
C                  2 2 2 2
C                  3 3 3 3
C                  . . . .
C                  h h h h
C
C WHERE EACH SYMMETRY BLOCK IS DESIGNATED BY A NUMBER.  THE AAAA 
C  AMPLITUDES WILL THEN BE TRANSFORMED ONE SYMMETRY BLOCK AT A TIME.
C
      DISSIZ=IRPDPD(1,ISYTYP(1,LISTW))
      NUMDIS=IRPDPD(1,ISYTYP(2,LISTW))
      CALL GETLST(BUF1,1,NUMDIS,1,1,LISTW)
C
C NOW RESORT THE ELEMENTS IN THE LIST SO THAT THEY ARE ORDERED
C
C                      T2(AA,AA)
C                      T2(BB,BB)
C                        . . .
C                      T2(NN,NN)
C
      IOFF1S=1
      IOFF2=1
      DO 10 IRREPDO=1,NIRREP
       NSIZVL=VRT(IRREPDO,ISL)
       NSIZVR=VRT(IRREPDO,ISR)
       NSIZOL=POP(IRREPDO,ISL)
       NSIZOR=POP(IRREPDO,ISR)
       NSIZEL=NSIZVL*NSIZOL
       NSIZER=NSIZVR*NSIZOR
       IOFF1=IOFF1S
       DO 20 INDEXJ=1,NSIZOR
        DO 30 INDEXB=1,NSIZVR
         CALL SCOPY(NSIZEL,BUF1(IOFF1),1,BUF2(IOFF2),1)
         IOFF1=IOFF1+DISSIZ
         IOFF2=IOFF2+NSIZEL
30      CONTINUE
20     CONTINUE
       IOFF1S=IOFF1S+NSIZER*DISSIZ+NSIZEL
10    CONTINUE
C
C  FOR UHF TREAT AS WELL THE BBBB LIST, BUT ONLY FOR ITYPE EQ 1
C
      IF(IUHF.EQ.1.AND.ITYPE.EQ.1) THEN
C 
       LISTW2=120
       DISSIZ=IRPDPD(1,ISYTYP(1,LISTW2))
       NUMDIS=IRPDPD(1,ISYTYP(2,LISTW2))
       CALL GETLST(BUF1,1,NUMDIS,1,1,LISTW2)
C
C NOW RESORT THE ELEMENTS IN THE LIST SO THAT THEY ARE ORDERED
C
C                      T2(AA,AA)
C                      T2(BB,BB)
C                        . . .
C                      T2(NN,NN)
C
       IOFF1S=1
       IOFF2=1
       DO 15 IRREPDO=1,NIRREP
        NSIZVL=VRT(IRREPDO,ISR)
        NSIZVR=VRT(IRREPDO,ISR)
        NSIZOL=POP(IRREPDO,ISR)
        NSIZOR=POP(IRREPDO,ISR)
        NSIZEL=NSIZVL*NSIZOL
        NSIZER=NSIZVR*NSIZOR
        IOFF1=IOFF1S
        DO 25 INDEXJ=1,NSIZOR
         DO 35 INDEXB=1,NSIZVR
          CALL SCOPY(NSIZEL,BUF1(IOFF1),1,BUF3(IOFF2),1)
          IOFF1=IOFF1+DISSIZ
          IOFF2=IOFF2+NSIZEL
35       CONTINUE
25      CONTINUE
        IOFF1S=IOFF1S+NSIZER*DISSIZ+NSIZEL
15     CONTINUE
C
      ENDIF
C
C DRIVE TRANSFORMATION BY LOOPING OVER IRREPS
C
      IOFF2=1
      IOFF3=1
      DO 110 IRREPDO=1,NIRREP
       CALL ZERO(BUF1,LEN1)  
C
C FIRST HALF TRANSFORM THE AMPLITUDES TO T2(XX,BJ).  HALF TRANSFORMED
C  AMPLITUDES ARE HELD ON BUF1.
C
       NSIZAO=AOPOP(IRREPDO)
       NSIZF=NSIZAO*NSIZAO
       NSIZT=(NSIZAO*(NSIZAO+1))/2
       NSIZVL=VRT(IRREPDO,ISL)
       NSIZVR=VRT(IRREPDO,ISR)
       NSIZOL=POP(IRREPDO,ISL)
       NSIZOR=POP(IRREPDO,ISR)
       NVNO=NSIZOR*NSIZVR
       NSIZEL=NSIZVL*NSIZOL
       NSIZER=NSIZVR*NSIZOR
       IOFFB=NSIZAO*NSIZAO+1
       IOFFB2=NSIZAO*NSIZAO+IOFFB
       IOFF1=1
       IOFFEV=INDVRT(IRREPDO,ISL)
       IOFFEO=INDOCC(IRREPDO,ISL)

C CREATE SORTFILES FOR OUT OF CORE METHOD
       IF (.NOT.INCORE) THEN
c YAU - old
cC          OPEN(UNIT=60,FILE='XXBJ',FORM='UNFORMATTED',ACCESS=
cC     &         'DIRECT',RECL=IFLTLN*NSIZT)
cC          OPEN(UNIT=61,FILE='BJXX',FORM='UNFORMATTED',ACCESS=
cC     &         'DIRECT',RECL=IFLTLN*NVNO)
c          OPEN(UNIT=60,FILE='XXBJ',
c     &         FORM='UNFORMATTED',ACCESS='DIRECT',RECL=2*NSIZT*idaccm)
c          OPEN(UNIT=61,FILE='BJXX',
c     &         FORM='UNFORMATTED',ACCESS='DIRECT',RECL=2*NVNO*idaccm)
c YAU - new
          OPEN(UNIT=60,FILE='XXBJ',FORM='UNFORMATTED',ACCESS='DIRECT',
     &         RECL=NSIZT*iintfp*idaccm)
          OPEN(UNIT=61,FILE='BJXX',FORM='UNFORMATTED',ACCESS='DIRECT',
     &         RECL=NVNO *iintfp*idaccm)
c YAU - end
       END IF

C CHECK FOR IADD. FOR THE AABB CASE IN UHF WE HAVE TO
C ADD THE HALF TRANFORMED XXBB TO THE ALREADY COMPUTED
C XXBB ELEMENTS OF THE BBBB BLOCK
C
        RECNUM=1
        DO 120 INDEXJ=1,NSIZOR
         DO 130 INDEXB=1,NSIZVR
C
C HALF TRANSFORM TO AO BASIS
C
          CALL SYTRAA(BUF2(IOFF2),EVEC(IOFFEV),EVEC(IOFFEO),
     &                NSIZAO,NSIZVL,NSIZOL,BUFTMP(IOFFB),BUFTMP,0)
C
C NOW COMPRESS MATRIX TO T2(X.LE.X;BJ) AND PUT DIRECTLY ON TARGET LIST
C
          CALL MPMT(BUFTMP,NSIZAO)
          CALL SQUEZ2(BUFTMP,BUF1(IOFF1),NSIZAO)
          IF(INCORE)THEN
           IOFF1=IOFF1+NSIZT
          ELSE
           CALL ACES_IO_WRITE(60,RECNUM,BUF1(IOFF1),NSIZT*IINTFP)
           RECNUM=RECNUM+1
          ENDIF
          IOFF2=IOFF2+NSIZEL
130      CONTINUE
120     CONTINUE
C
C  FOR UHF WE HAVE TO DO SOME EXTRA WORK
C
        IF(ITYPE.EQ.1.AND.IUHF.EQ.1) THEN
C
C
C FIRST HALF TRANSFORM THE AMPLITUDES TO T2(XX,BJ).  HALF TRANSFORMED
C  AMPLITUDES ARE HELD ON BUF1.
C
       NSIZVL=VRT(IRREPDO,2)
       NSIZOL=POP(IRREPDO,2)
       NSIZEL=NSIZVL*NSIZOL
       IOFF1=1
       IOFFEV=INDVRT(IRREPDO,2)
       IOFFEO=INDOCC(IRREPDO,2)
       RECNUM=1
        DO 220 INDEXJ=1,NSIZOR
         DO 230 INDEXB=1,NSIZVR
C
C HALF TRANSFORM TO AO BASIS
C
          CALL SYTRAA(BUF3(IOFF3),EVEC(IOFFEV),EVEC(IOFFEO),
     &                NSIZAO,NSIZVL,NSIZOL,BUFTMP(IOFFB),BUFTMP,0)
C
C NOW COMPRESS MATRIX TO T2(X.LE.X;BJ) AND PUT DIRECTLY ON TARGET LIST
C
          CALL MPMT(BUFTMP,NSIZAO)
          IF(INCORE)THEN
           CALL SQUEZ3(BUFTMP,BUF1(IOFF1),NSIZAO)
           IOFF1=IOFF1+NSIZT
          ELSE
           CALL SQUEZ2(BUFTMP,BUF1(IOFF1),NSIZAO)
           CALL ACES_IO_READ(60,RECNUM,BUFTMP,NSIZT*IINTFP)
           CALL SAXPY(NSIZT,ONE,BUF1(IOFF1),1,BUFTMP,1)
           CALL ACES_IO_WRITE(60,RECNUM,BUFTMP,NSIZT*IINTFP)
           RECNUM=RECNUM+1
          ENDIF
          IOFF3=IOFF3+NSIZEL
230      CONTINUE
220     CONTINUE
C
       ENDIF
C
C NOW DO SECOND HALF TRANSFORMATION 
C
C HALF-TRANSFORMED INTEGRALS MUST BE PLUCKED OFF OF BUF1 FOR INCORE,
C  TRANSPOSED FOR OUT-OF-CORE
C
       IF(.NOT.INCORE)THEN
        CALL TRANX(SCR,MAXSIZE,NSIZT,NVNO,60,61)
       ENDIF
C
       IF(ITYPE.EQ.1) THEN
C
C  XXBB SPIN CASE
C
        IOFF1=1
        IOFFEV=INDVRT(IRREPDO,ISR)
        IOFFEO=INDOCC(IRREPDO,ISR)
        RECNUM=1
        DO 140 INDXMU=1,NSIZAO
         DO 150 INDXNU=1,INDXMU
          IF(INCORE)THEN
           CALL SCOPY(NSIZER,BUF1(IOFF1),NSIZT,BUFTMP(IOFFB2),1)
          ELSE
           CALL ACES_IO_READ(61,RECNUM,BUFTMP(IOFFB2),NVNO*IINTFP)
           RECNUM=RECNUM+1
          ENDIF
          CALL SYTRAA(BUFTMP(IOFFB2),EVEC(IOFFEV),EVEC(IOFFEO),NSIZAO,
     &                NSIZVR,NSIZOR,BUFTMP(IOFFB),BUFTMP,0)   
          CALL MPMT(BUFTMP,NSIZAO) 
          CALL SSCAL(NSIZAO*NSIZAO,FOURTH,BUFTMP,1)
          CALL SQUEZ2(BUFTMP,BUFTMP(IOFFB),NSIZAO)
          CALL PUTLST(BUFTMP(IOFFB),IOFF1,1,1,1,IRREPDO)
          IOFF1=IOFF1+1
150      CONTINUE
140     CONTINUE
       ELSE
C 
C   XXAA SPIN CASE
C
        IOFF1=1
        IOFFEV=INDVRT(IRREPDO,ISR)
        IOFFEO=INDOCC(IRREPDO,ISR)
        RECNUM=1
        DO 240 INDXMU=1,NSIZAO
         DO 250 INDXNU=1,INDXMU
          IF(INCORE)THEN
           CALL SCOPY(NSIZER,BUF1(IOFF1),NSIZT,BUFTMP(IOFFB2),1)
          ELSE
           CALL ACES_IO_READ(61,RECNUM,BUFTMP(IOFFB2),NVNO*IINTFP)
           RECNUM=RECNUM+1
          ENDIF
          CALL SYTRAA(BUFTMP(IOFFB2),EVEC(IOFFEV),EVEC(IOFFEO),NSIZAO,
     &                NSIZVR,NSIZOR,BUFTMP(IOFFB),BUFTMP,0)   
          CALL MPMT(BUFTMP,NSIZAO) 
          CALL SSCAL(NSIZAO*NSIZAO,FOURTH,BUFTMP,1)
          CALL GETLST(BUFTMP(IOFFB),IOFF1,1,1,1,IRREPDO)
          CALL SQUEZ3(BUFTMP,BUFTMP(IOFFB),NSIZAO)
          CALL PUTLST(BUFTMP(IOFFB),IOFF1,1,1,1,IRREPDO)
          IOFF1=IOFF1+1
250      CONTINUE
240     CONTINUE
       ENDIF
C
       IF(.NOT.INCORE)THEN
        CLOSE(UNIT=60,STATUS='DELETE')
        CLOSE(UNIT=61,STATUS='DELETE')
       ENDIF
C
110   CONTINUE
C
1000  CONTINUE
C
C  FOR UHF WE HAVE TO SYMMETRIZE THE GAMMA LISTS
C
      IF(IUHF.EQ.1) THEN
C
       DO 300 IRREP=1,NIRREP
        NSIZE=NNP1O2(AOPOP(IRREP))
        IF (NSIZE.GT.0) CALL SYMMET3(1,IRREP,NSIZE,SCR,MAXSIZE)
300    CONTINUE
      ENDIF
      RETURN
      END
