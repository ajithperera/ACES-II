      SUBROUTINE FORMFD(ICORE,MAXCOR)
C
C THIS ROUTINE TRANSFORMS THE FOCK MATRIX DERIVATIVES
C FROM THE AO TO THE MO BASIS
C
CEND
C
C CODED JAN/91 JG
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER DIRPRD,POP,VRT
      LOGICAL SCF,NONHF,ROHF,SEMI,GEOM,FIELD,THIRD,MAGN,SPIN
      LOGICAL GEERTSEN,MSZ
C
      DIMENSION ICORE(MAXCOR)
      DIMENSION ICMO(2)
C
      COMMON/INFO/NOCCO(2),NVRTO(2)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/SYMINF/NSTART,NIRREP,IRREPA(255,2),DIRPRD(8,8)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),NJUNK(18)
      COMMON/BASSYM/NBAS(8),NBASIS,NBASSQ,NBASTT
      COMMON/METHOD/IUHF,SCF,NONHF
      COMMON/OPENSH/ROHF,SEMI
      COMMON/OFFSET/IOFFC(8)
      COMMON/PERT/NTPERT,NPERT(8),IPERT(8),IXPERT,IYPERT,IZPERT,
     &            IXYPERT,IXZPERT,IYZPERT,ITRANSX,ITRANSY,ITRANSZ,
     &            NUCIND
      COMMON/SYM/POP(8,2),VRT(8,2),NT(2),NF1(2),NF2(2)
      COMMON/LSYM/NLENQ(8),NLENT(8)
      COMMON/PERT2/FIELD,GEOM,THIRD,MAGN,SPIN
      COMMON/PERT3/MSZ
      COMMON/DIAMAG/GEERTSEN
C
      IF(GEOM.OR.FIELD) THEN
       IANTI=0
      ELSE IF(MAGN) THEN
       IANTI=1
      ENDIF
C
C  ALLOCATE MEMORY FOR MO COEFFICIENTS
C
      ICMO(1)=1
      ICMO(2)=ICMO(1)+NBASSQ*IUHF*IINTFP
      ISCR=ICMO(2)+NBASIS*NBASIS*IINTFP
      IEVA=ISCR+NBASIS*NBASIS*IINTFP
      IEVB=IEVA+IINTFP*IUHF*NBASIS
      IFD=IEVB+IINTFP*NBASIS
      MXSCR=NBASIS*NBASIS
C
      LENFD=0
      LENFD2=0
      LENSD=0
      LENSD2=0
      DO 10 IRREP=1,NIRREP
       LENFD=MAX(LENFD,NLENT(IRREP))
       LENFD2=MAX(LENFD2,NLENQ(IRREP))
       LENSD=MAX(LENSD,IRPDPD(IRREP,21),IRPDPD(IRREP,22))
       LENSD2=MAX(LENSD2,IRPDPD(IRREP,21),IRPDPD(IRREP,22),
     &            IRPDPD(IRREP,19),IRPDPD(IRREP,20),
     &            IRPDPD(IRREP,9),IRPDPD(IRREP,10))
10    CONTINUE
      ISD=IFD+IINTFP*LENFD*(IUHF+1)
      ISD3=ISD+IINTFP*LENSD*(IUHF+1)
      IEND=ISD3+IINTFP*LENSD2
      IF(ROHF) THEN
       ISD4=IEND
       IFIJA=ISD4+IINTFP*LENSD2
       IFIJB=IFIJA+IINTFP*NF1(1)
       IFABA=IFIJB+IINTFP*NF1(2)
       IFABB=IFABA+IINTFP*NF2(1)
       IFAIA=IFABB+IINTFP*NF2(2)
       IFAIB=IFAIA+IINTFP*NT(1)
       IEND=IFAIB+IINTFP*NT(2)
C
      IF(IEND.GE.MAXCOR) CALL ERREX
C
       CALL GETLST(ICORE(IFIJA),1,1,1,3,91)
       CALL GETLST(ICORE(IFIJB),1,1,1,4,91)
       CALL GETLST(ICORE(IFABA),1,1,1,3,92)
       CALL GETLST(ICORE(IFABB),1,1,1,4,92)
       CALL GETLST(ICORE(IFAIA),1,1,1,3,93)
       CALL GETLST(ICORE(IFAIB),1,1,1,4,93)
C
      ENDIF
C
      IF(IEND.GE.MAXCOR) CALL ERREX
C
C GET EIGEN VECTORS AND SYMMETRY PACK THEM
C
      CALL GETREC(20,'JOBARC','SCFEVCA0',NBASIS*NBASIS*IINTFP,
     &            ICORE(ISCR))
      CALL SYMC(ICORE(ISCR),ICORE(ICMO(1)),NBASIS,NBAS,.FALSE.,1)
      IF(IUHF.EQ.1) THEN
       CALL GETREC(20,'JOBARC','SCFEVCB0',
     &             NBASIS*NBASIS*IINTFP,ICORE(ISCR))
       CALL SYMC(ICORE(ISCR),ICORE(ICMO(2)),NBASIS,NBAS,.FALSE.,2)
      ENDIF
C
C FILL IOFFC
C
      IOFFC(1)=1
      DO 1 IRREP=1,NIRREP-1
       IOFFC(IRREP+1)=IOFFC(IRREP)+NBAS(IRREP)*NBAS(IRREP)
1     CONTINUE 
C
C READ ORBITAL ENERGIES
C
      CALL GETREC(20,'JOBARC','SCFEVLA0',IINTFP*NBASIS,
     &            ICORE(IEVA))
      IF(IUHF.EQ.1) THEN
       CALL GETREC(20,'JOBARC','SCFEVLB0',IINTFP*NBASIS,
     &             ICORE(IEVB))
      ENDIF
C
C ALLOCATE MEMORY FOR THE TRANSFORMED OVERLAP MATRIX DERIVATIVES
C
      IFDEXP=IEND
      IFDMO=IFDEXP+IINTFP*(IUHF+1)*LENFD2
      IEND2=IFDMO+IINTFP*LENFD2*(IUHF+1)
      MXCOR2=MAXCOR-IEND2
      
C
C LOOP OVER ALL IRREPS
C
      DO 100 IRREPP=1,NIRREP
C
C CHECK IF THERE ANY PERTURBATIONS BELONGING TO THIS IRREP
C 
       NP=NPERT(IRREPP)
       NSP=NP
       IF(MAGN) THEN
        NSP=0 
        IF(IYZPERT.EQ.IRREPP) THEN
         NP=NP+1
         NSP=NSP+1
        ENDIF
        IF(IXZPERT.EQ.IRREPP) THEN
         NP=NP+1
         NSP=NSP+1
        ENDIF
        IF(IXYPERT.EQ.IRREPP) THEN
         NP=NP+1
         NSP=NSP+1
        ENDIF
        IF(GEERTSEN) THEN
         IF(IXPERT.EQ.IRREPP) THEN
          NP=NP+2
         ENDIF
         IF(IYPERT.EQ.IRREPP) THEN
          NP=NP+2
         ENDIF
         IF(IZPERT.EQ.IRREPP) THEN
          NP=NP+2
         ENDIF
        ENDIF
       ENDIF
C
       IF(NP.EQ.0) GO TO 100
C
C LOOP OVER ALL PERTURBATIONS IN THIS IRREP
C
       DO 150 IP=1,NP
C
C READ IN THE FOCK MATRIX DERIVATIVE INTEGRALS
C
       CALL GETLST(ICORE(IFD),IP,1,1,IRREPP,102)
       IF(IP.LE.NSP) CALL GETLST(ICORE(ISD),IP,1,1,IRREPP,170)
       IF(IUHF.EQ.1) THEN
        IFD2=IFD+IINTFP*NLENT(IRREPP)
        ISD2=ISD+IRPDPD(IRREPP,21)*IINTFP
        CALL GETLST(ICORE(IFD2),IP,1,1,IRREPP,103)
        IF(IP.LE.NSP) CALL GETLST(ICORE(ISD2),IP,1,1,IRREPP,171)
       ENDIF
C
       IFDEXP2=IFDEXP+IINTFP*NLENQ(IRREPP)*IUHF
       CALL MATEXP(IRREPP,NBAS,ICORE(IFD),ICORE(IFDEXP),IANTI)
       IF(IUHF.EQ.1) CALL MATEXP(IRREPP,NBAS,ICORE(IFD2),
     &                           ICORE(IFDEXP2),IANTI)
C
       NOCCSQ=IRPDPD(IRREPP,21)
       NVRTSQ=IRPDPD(IRREPP,19)
       NOVSQ=IRPDPD(IRREPP,9)
C
C  COMPUTE THE OCCUPIED-OCCUPIED BLOCK
C
       IOFF=IFDMO
       CALL FORMIJ(IRREPP,ICORE(IFDEXP),ICORE(ICMO(1)),NBASSQ,
     &             ICORE(ISCR),MXSCR,IUHF,ICORE(IOFF),NOCCSQ,
     &             .TRUE.)
C
       IF(IP.LE.NSP) THEN
C
C SAVE FOR CORRELATED MAGNETAZIBILITY CALCULATIONS
C
        IF(.NOT.SCF.AND.MSZ) THEN 
         CALL PUTLST(ICORE(IOFF),IP,1,1,IRREPP,186)
         IF(IUHF.EQ.1) THEN
          CALL PUTLST(ICORE(IOFF+IINTFP*NOCCSQ),IP,1,1,IRREPP,187)
         ENDIF
        ENDIF
C
C  ADD -1/2 S(I,J)^chi (f(I,I) + f(J,J)) TO F(I,J)^chi
C
        CALL SXEVAL1(IRREPP,ICORE(IOFF),ICORE(IEVA),ICORE(ISD),
     &               POP(1,1),IANTI)
C
        IF(ROHF) THEN
C
C FOR ROHF WE NEED IN ADDITION THE OFF-DIAGONAL CONTRIBUTIONS OF F(I,J)
C
         CALL SXF(IRREPP,ICORE(IOFF),ICORE(IFIJA),ICORE(ISD),
     &            POP(1,1))
        ENDIF
C
        CALL PUTLST(ICORE(IOFF),IP,1,1,IRREPP,184)
C
        IF(IUHF.EQ.1) THEN
C
         CALL SXEVAL1(IRREPP,ICORE(IOFF+IINTFP*NOCCSQ),
     &                ICORE(IEVB),ICORE(ISD2),POP(1,2),
     &                IANTI)
C
         IF(ROHF) THEN
C
          CALL SXF(IRREPP,ICORE(IOFF+IINTFP*NOCCSQ),
     &             ICORE(IFIJB),ICORE(ISD2),POP(1,2))
C
         ENDIF
C 
         CALL PUTLST(ICORE(IOFF+IINTFP*NOCCSQ),IP,1,1,IRREPP,185)
C
        ENDIF
C
       ENDIF
C
       IF(IP.LE.NSP) THEN
C
C  ADD S(IJ) CONTRIBUTION TO FIJ(chi)
C
        IF(.NOT.MAGN) THEN
C
         CALL SDINOO(IRREPP,ICORE(IOFF),ICORE(ISD),ICORE(IEND2),
     &               MXCOR2,IUHF)
C
        ELSE
C
         CALL SDINOOC(IRREPP,ICORE(IOFF),ICORE(ISD),ICORE(IEND2),
     &                MXCOR2,IUHF)
C
        ENDIF
C
       ENDIF
C
       CALL PUTLST(ICORE(IOFF),IP,1,1,IRREPP,176)
C
       IF(IUHF.EQ.1) THEN
C
        CALL PUTLST(ICORE(IOFF+IINTFP*NOCCSQ),IP,1,1,IRREPP,177)
C
       ENDIF
C
C  COMPUTE THE VIRTUAL-VIRTUAL BLOCK
C
       IOFF=IOFF+IINTFP*(IUHF*NOCCSQ+IRPDPD(IRREPP,22))
       CALL FORMAB(IRREPP,ICORE(IFDEXP),ICORE(ICMO(1)),NBASSQ,
     &             ICORE(ISCR),MXSCR,IUHF,ICORE(IOFF),NVRTSQ,
     &             .TRUE.)
C
       IF(IP.LE.NSP) THEN
C
C SAVE FOR CORRELATED MAGNETAZIBILITY CALCULATIONS
C
        IF(.NOT.SCF.AND.MSZ) THEN 
         CALL PUTLST(ICORE(IOFF),IP,1,1,IRREPP,188)
         IF(IUHF.EQ.1) THEN
          CALL PUTLST(ICORE(IOFF+IINTFP*NVRTSQ),IP,1,1,IRREPP,189)
         ENDIF
        ENDIF
C
C  ADD S(IJ)^chi CONTRIBUTION TO F(A,B)(chi)
C
        IF(.NOT.MAGN) THEN
C
         CALL SDINVV(IRREPP,ICORE(IOFF),ICORE(ISD),ICORE(IEND2),
     &               MXCOR2,IUHF)
C
        ELSE
C
         CALL SDINVVC(IRREPP,ICORE(IOFF),ICORE(ISD),ICORE(IEND2), 
     &                MXCOR2,IUHF)
C
        ENDIF
C
        CALL GETLST(ICORE(ISD3),IP,1,1,IRREPP,172)
C
C  ADD - 1/2 S(A,B)^chi (F(A,A) + F(B,B)) TERM TO F(A,B)^chi
C 
        CALL SXEVAL1(IRREPP,ICORE(IOFF),ICORE(IEVA+IINTFP*NOCCO(1)),
     &               ICORE(ISD3),VRT(1,1),IANTI)
C
        IF(ROHF) THEN
C
         CALL SXF(IRREPP,ICORE(IOFF),
     &            ICORE(IFABA),ICORE(ISD3),VRT(1,1))
C
        ENDIF
C 
       ENDIF
C
       CALL PUTLST(ICORE(IOFF),IP,1,1,IRREPP,178)
C
       IF(IUHF.EQ.1) THEN
C
        IF(IP.LE.NSP) THEN
C
         CALL GETLST(ICORE(ISD3),IP,1,1,IRREPP,173)
C
         CALL SXEVAL1(IRREPP,ICORE(IOFF+IINTFP*NVRTSQ),
     &                ICORE(IEVB+IINTFP*NOCCO(2)),
     &                ICORE(ISD3),VRT(1,2),IANTI)
C
         IF(ROHF) THEN
C
          CALL SXF(IRREPP,ICORE(IOFF+IINTFP*NVRTSQ),
     &             ICORE(IFABB),ICORE(ISD3),VRT(1,2))
C
         ENDIF
C
        ENDIF 
        
C
        CALL PUTLST(ICORE(IOFF+IINTFP*NVRTSQ),IP,1,1,IRREPP,179)
C
       ENDIF 
C
C  COMPUTE THE VIRTUAL-OCCUPIED BLOCK
C
       IOFF=IOFF+IINTFP*(IUHF*NVRTSQ+IRPDPD(IRREPP,20))
       CALL FORMAI(IRREPP,ICORE(IFDEXP),ICORE(ICMO(1)),NBASSQ,
     &             ICORE(ISCR),MXSCR,IUHF,ICORE(IOFF),NOVSQ,
     &             .TRUE.)
C
       IF(IP.LE.NSP) THEN
C
C  ADD S(IJ)^chi CONTRIBUTION TO F(AI)^chi
C
        IF(.NOT.MAGN) THEN
C
         CALL SDINVO(IRREPP,ICORE(IOFF),ICORE(ISD),ICORE(IEND2),
     &               MXCOR2,IUHF)
C
        ELSE
C
         CALL SDINVOC(IRREPP,ICORE(IOFF),ICORE(ISD),ICORE(IEND2),
     &                MXCOR2,IUHF)
C
        ENDIF
C  
        CALL GETLST(ICORE(ISD3),IP,1,1,IRREPP,174)
C
C  ADD  -S(A,I)^chi f(II) TERM TO f(A,I)^chi
C
        CALL SXEVAL2(IRREPP,ICORE(IOFF),ICORE(IEVA),ICORE(ISD3),
     &               POP(1,1),VRT(1,1))
C
        IF(ROHF) THEN
C
         CALL SXF2(IRREPP,ICORE(IOFF),ICORE(IFIJA),ICORE(ISD3),
     &             POP(1,1),VRT(1,1))
         CALL SXF3(IRREPP,ICORE(IOFF),ICORE(IFAIA),ICORE(ISD),
     &             POP(1,1),VRT(1,1))
        ENDIF
C
       ENDIF 
C
       CALL PUTLST(ICORE(IOFF),IP,1,1,IRREPP,180)
C
       IF(IUHF.EQ.1) THEN
C
        IF(IP.LE.NSP) THEN
C
         CALL GETLST(ICORE(ISD3),IP,1,1,IRREPP,175)
         CALL SXEVAL2(IRREPP,ICORE(IOFF+IINTFP*NOVSQ),ICORE(IEVB),
     &                ICORE(ISD3),POP(1,2),VRT(1,2))
C
         IF(ROHF) THEN
C
          CALL SXF2(IRREPP,ICORE(IOFF+IINTFP*NOVSQ),
     &              ICORE(IFIJB),ICORE(ISD3),
     &              POP(1,2),VRT(1,2))
          CALL SXF3(IRREPP,ICORE(IOFF+IINTFP*NOVSQ),
     &              ICORE(IFAIB),ICORE(ISD2),POP(1,2),VRT(1,2))
C
         ENDIF
C
        ENDIF
C
        CALL PUTLST(ICORE(IOFF+IINTFP*NOVSQ),IP,1,1,IRREPP,181)
C
       ENDIF
C
150    CONTINUE
C
100   CONTINUE
C
C ALL DONE, RETURN 
C
      RETURN
      END
