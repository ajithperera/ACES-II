      
      SUBROUTINE LADAB1(W,T,Z,MAXSIZE,DISSYW,NUMSYW,DISSYT,NUMSYT,
     &                  LISTW,LISTT,ITYPE,IRREP,T1A,T1B,TAU,POP1,
     &                  POP2,VRT1,VRT2,LISTZ,ELADAB,MODIF,IUHF)
C
C THIS ROUTINE FORMS THE AB LADDER TYPE CONTRACTION FOR MBPT(3) OR 
C  THE GENERALIZED LADDER CONTRACTIONS IN THE INTERMEDIATE-DRIVEN
C  COUPLED-CLUSTER SCHEME.
C
CEND
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL TAU
      LOGICAL MBPT3,MBPT4,CC,TRPEND,SNGEND,GRAD,MBPTT,SING1,
     &        QCISD,UCC
      INTEGER DISSYT,DISSYW,DIRPRD,POP1,POP2,VRT1,VRT2
      INTEGER DISREAD,DISMAX,DISLEFT
      CHARACTER*4 MODIF
      DIMENSION W(DISSYW),T(DISSYT,NUMSYT)
      DIMENSION Z(DISSYT,NUMSYT)
      DIMENSION POP1(8),POP2(8),VRT1(8),VRT2(8),T1A(1),T1B(1)
      COMMON/SWITCH/MBPT3,MBPT4,CC,TRPEND,SNGEND,GRAD,MBPTT,
     &              SING1,QCISD,UCC
      COMMON /MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),
     &DIRPRD(8,8)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),NTOT(18)
      DATA ONE,AZERO /1.0D0,0.D0/
C
C PICK UP THE RELEVANT T2 AND W PIECES.
C
      CALL GETLST(T,1,NUMSYT,1,IRREP,LISTT)
      IF(TAU) THEN
       CALL FTAU(T,T1A,T1B,DISSYT,NUMSYT,POP1,POP2,
     &            VRT1,VRT2,IRREP,3,ONE)
      ENDIF
C
C   CHECK IF WE CAN DO IT IN CORE ?
C
      IF(MAXSIZE.GE.NUMSYW*DISSYW) THEN
C
      CALL GETLST(W,1,NUMSYW,2,IRREP,LISTW)
C
C COMPUTE THE LADDER CONTRIBUTION.
C
      IF(ITYPE.EQ.6)THEN
       MODIF='abef'
       IF(IUHF.EQ.0.AND..NOT.GRAD) THEN
c        NUMST2=IRPDPD(IRREP,7)
c        CALL SQ3SYM(IRREP,POP1,DISSYT,Z,T)
c        CALL ICOPY(DISSYT*NUMST2*IINTFP,Z,1,T,1)
c        CALL MXM(W,DISSYW,T,DISSYT,Z,NUMST2)
c        CALL SYMEXP3(IRREP,VRT1,POP1,DISSYW,NUMST2,Z,T)
        CALL XGEMM('N','N',DISSYW,NUMSYT,DISSYT,ONE,W,DISSYW,
     &             T,DISSYT,AZERO,Z,DISSYW)
c        CALL MXM(W,DISSYW,T,DISSYT,Z,NUMSYT)
        CALL SYMEXP4(IRREP,VRT1,POP1,DISSYT,DISSYW,NUMSYT,Z,Z,W)
       ELSE
        CALL XGEMM('N','N',DISSYW,NUMSYT,DISSYT,ONE,W,DISSYW,
     &             T,DISSYT,AZERO,Z,DISSYW)
c        CALL MXM(W,DISSYW,T,DISSYT,Z,NUMSYT)
       ENDIF
      ELSE
c       IF(IUHF.EQ.0) THEN
c        DISST2=IRPDPD(IRREP,5)
c        CALL SQ4SYM(IRREP,VRT1,DISST2,DISSYT,NUMSYT,Z,T)
c        CALL ICOPY(DISST2*NUMSYT*IINTFP,Z,1,T,1)
c        CALL MXM(T,DISST2,W,DISSYW,Z,DISSYW)
c        CALL SYMEXP4(IRREP,VRT1,POP1,DISSYT,DISST2,NUMSYT,Z,Z,T)
c       ELSE
        CALL XGEMM('N','N',DISSYT,DISSYW,DISSYW,ONE,T,DISSYT,
     &             W,DISSYW,AZERO,Z,DISSYT)
c        CALL MXM(T,DISSYT,W,DISSYW,Z,DISSYW)
c       ENDIF
       MODIF='mnij'
      ENDIF
C
      ELSE
C
C  WE HAVE TO DO IT OUT OF CORE
C
       CALL ZERO(Z,NUMSYT*DISSYT)
C
       DISMAX=MAXSIZE/DISSYW
       IOFFSET=1
       DISLEFT=NUMSYW
10     CONTINUE
       DISREAD=MIN(DISMAX,DISLEFT)
       DISLEFT=DISLEFT-DISREAD
       CALL GETLST(W,IOFFSET,DISREAD,2,IRREP,LISTW)
C
C    COMPUTE NOW THE LADDER CONTRIBUTION
C 
       IF(ITYPE.EQ.6) THEN
        MODIF='abef'
        CALL XGEMM('N','N',DISSYW,NUMSYT,DISREAD,ONE,W,DISSYW,
     &             T(IOFFSET,1),DISSYT,ONE,Z,DISSYW)
       ELSE
        MODIF='mnij'
        CALL XGEMM('N','N',DISSYT,DISREAD,DISSYW,ONE,T,DISSYT,
     &             W,DISSYW,ONE,Z(1,IOFFSET),DISSYT)
       ENDIF
       IOFFSET=IOFFSET+DISREAD
       IF(DISLEFT.NE.0) GO TO 10
       IF(ITYPE.EQ.6.AND.IUHF.EQ.0.AND..NOT.GRAD) THEN
        CALL SYMEXP4(IRREP,VRT1,POP1,DISSYT,DISSYW,NUMSYT,Z,Z,T)
C
C  READ IN AGAIN THE T2 AMPLITUDES AND FORM TAU AMPLITUDES
C  IN ORDER TO GET THE RIGHT LADDER-ENERGY
C
        CALL GETLST(T,1,NUMSYT,1,IRREP,LISTT)
        IF(TAU) THEN
         CALL FTAU(T,T1A,T1B,DISSYT,NUMSYT,POP1,POP2,
     &             VRT1,VRT2,IRREP,3,ONE)
        ENDIF
       ENDIF  
C
      ENDIF
C
      ELADAB=SDOT(DISSYT*NUMSYT,Z,1,T,1)+ELADAB
C
C AUGMENT T2 INCREMENT.
C
C     CALL SUMSYM2(Z,T,NUMSYT*DISSYT,1,IRREP,63)
      CALL SUMSYM2(Z,T,NUMSYT*DISSYT,1,IRREP,LISTZ)
      RETURN
      END
