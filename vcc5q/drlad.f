C
C DRIVER FOR LADDER CONTRIBUTIONS TO MBPT AND CC
C
      SUBROUTINE DRLAD(ICORE,MAXCOR,IUHF,ITYPE)
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL TAU,ROHF4,ITRFLG
      LOGICAL MBPT3,MBPT4,CC,TRPEND,SNGEND,GRAD,MBPTT,SING1,QCISD,UCC
      INTEGER DIRPRD,DISSYW,DISSYT
      INTEGER POP,VRT
      CHARACTER*4 MODIF
      CHARACTER*2 SPCASE(3)
      DIMENSION ICORE(MAXCOR)
      COMMON /INFO/ NOCCO(2),NVRTO(2)
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /FILES/ LUOUT,MOINTS
      COMMON /SWITCH/ MBPT3,MBPT4,CC,TRPEND,SNGEND,GRAD,MBPTT,SING1,
     &                QCISD,UCC
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),
     &DIRPRD(8,8)
      COMMON /SYM/POP(8,2),VRT(8,2),NTAA,NTBB,NF1AA,NF1BB,NF2AA,NF2BB
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),NJUNK(18)
      COMMON /CONTROL/ IPRNT,IXXX,IXXX2
      COMMON /FLAGS/ IFLAGS(100)
      COMMON /ROHF/ ROHF4,ITRFLG
C
      EQUIVALENCE(IFLAGS(2),METHOD)
C
      DATA SPCASE /'AA','BB','AB'/
C
      MXCOR=MAXCOR
      TAU=.FALSE.
C      IF(METHOD.GT.9.AND.SING1.AND.(.NOT.QCISD).OR.
C     &   (ROHF4.AND..NOT.ITRFLG)) THEN
C
C    ALLOCATE CORE MEMORY FOR T1 AMPLITUDES
C
      I0TA=MXCOR+1-NTAA*IINTFP
      MXCOR=MXCOR-NTAA*IINTFP
      IF(IUHF.EQ.0) THEN
       I0TB=I0TA
      ELSE
       I0TB=I0TA-NTBB*IINTFP
       MXCOR=MXCOR-NTBB*IINTFP
      ENDIF
      CALL GETLST(ICORE(I0TA),1,1,1,1,90)
      IF(IUHF.EQ.1) CALL GETLST(ICORE(I0TB),1,1,1,2,90)
C     TAU=.TRUE.
C      ENDIF
C
      IF(IUHF.EQ.0) THEN
       IBOT=3
      ELSE
       IBOT=1
      ENDIF
C
      DO 1000 ISPIN=IBOT,3
C
      IF(ISPIN.LT.3)THEN
C
C    AA OR BB CASE.
C
       IF(ISPIN.EQ.1) THEN
        I0T=I0TA
       ELSE
        I0T=I0TB
       ENDIF
C
       ELADAA=0.D0
C
C       IF(ROHF4.AND..NOT.ITRFLG) THEN
C         LISTT=ISPIN+93
C       ELSE
         LISTT=ISPIN+43
C       ENDIF
C
C      LISTZ=ISPIN+60
C      put increments on D(ij,ab) lists (48-50)
       LISTZ=ISPIN+47
C
       IF(ITYPE.EQ.1)THEN
C         IF(ROHF4.AND..NOT.ITRFLG) THEN
           LISTW=10+ISPIN
C         ELSE
C           LISTW=50+ISPIN
C         ENDIF
       ELSE
        LISTW=230+ISPIN
       ENDIF 
       DO 100 IRREP=1,NIRREP
        DISSYW=IRPDPD(IRREP,ISYTYP(1,LISTW))
        DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTT))
        NUMSYW=IRPDPD(IRREP,ISYTYP(2,LISTW))
        NUMSYT=IRPDPD(IRREP,ISYTYP(2,LISTT))
        I000=1
        I010=I000+IINTFP*DISSYT*NUMSYT
        I020=I010+IINTFP*DISSYT*NUMSYT
        MAXSIZE=(MXCOR-I020)/IINTFP
C
C CAN WE DO IT WITH THE CURRENT ALGORITHM AVAILABLE
C
        IF(MIN(NUMSYT,NUMSYW,DISSYT,DISSYW).NE.0)THEN
         IF(MAXSIZE.GT.DISSYW) THEN
          CALL LADAA1(ICORE(I020),ICORE(I000),ICORE(I010),MAXSIZE,
     &                DISSYW,NUMSYW,DISSYT,NUMSYT,LISTW,LISTT,ITYPE,
     &                IRREP,ICORE(I0T),TAU,POP(1,ISPIN),VRT(1,ISPIN),
     &                LISTZ,ELADAA,MODIF,ISPIN)
         ELSE
          CALL INSMEM('DRLAD',I030,MXCOR)
         ENDIF
        ENDIF
100    CONTINUE
       WRITE(LUOUT,313)MODIF,SPCASE(ISPIN),ELADAA
313    FORMAT(T3,'W(',A4,') ',A2,' contribution =',F14.10,' a.u.')
      ELSE
C
C AB SPIN CASE.  AGAIN, FIRST TRY FOR IN-CORE ALGORITHM.
C
       ELADAB=0.D0
C       IF(ROHF4.AND..NOT.ITRFLG) THEN
C         LISTT=96
C       ELSE
         LISTT=46
C       ENDIF
       IF(ITYPE.EQ.1)THEN
C         IF(ROHF4.AND..NOT.ITRFLG) THEN
           LISTW=13
C         ELSE
C           LISTW=53
C         ENDIF
       ELSE
        LISTW=233
       ENDIF
       DO 110 IRREP=1,NIRREP
C
C GET INFORMATION ABOUT THE SIZE OF THE VARIOUS ARRAYS AND ALLOCATE
C CORE MEMORY
C
        DISSYW=IRPDPD(IRREP,ISYTYP(1,LISTW))
        DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTT))
        NUMSYW=IRPDPD(IRREP,ISYTYP(2,LISTW))
        NUMSYT=IRPDPD(IRREP,ISYTYP(2,LISTT))
        I000=1
        I010=I000+NUMSYT*DISSYT*IINTFP
        I020=I010+NUMSYT*DISSYT*IINTFP
        MAXSIZE=(MXCOR-I020)/IINTFP
C      (usually 63 __normal energy calculations)
      LISTZ = 50
C
C CAN WE DO IT WITh THE MEMORY AVAILABLE ?
C
        IF(MIN(NUMSYT,NUMSYW,DISSYT,DISSYW).NE.0)THEN
         IF(MAXSIZE.GT.DISSYW) THEN
          CALL LADAB1(ICORE(I020),ICORE(I000),ICORE(I010),MAXSIZE,
     &                DISSYW,NUMSYW,DISSYT,NUMSYT,LISTW,LISTT,ITYPE,
     &                IRREP,ICORE(I0TA),ICORE(I0TB),TAU,POP(1,1),
     &                POP(1,2),VRT(1,1),VRT(1,2),
     &                LISTZ,ELADAB,MODIF,IUHF)
C
C NO ALGORITHM AVAILABLE
C
         ELSE
          CALL INSMEM('DRLAD',I030,MXCOR)
         ENDIF
        ENDIF
110    CONTINUE
       WRITE(LUOUT,313)MODIF,SPCASE(ISPIN),ELADAB
      ENDIF
1000  CONTINUE
      RETURN
      END
