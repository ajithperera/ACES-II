      SUBROUTINE F1INL2_LEOM(ICORE,MAXCOR,IUHF)
C
C THIS ROUTINE CALCULATES THE TERM
C
C  P(AB) SUM E L(IJ,AE) F(E,B)
C
C USING SYMMETRY PACKED ARRAYS
C 
C
C IN RHF :
C
C SUM e L(Ij,Ae) F(eb) - SUM E  L(Ij,Eb) F(EA)
C
C IN UHF
C
C SUM E L(IJ,AE) F(EB) - SUM E L(IJ,EB) F(EA)
C
C SUM e L(Ij,Ae) F(eb) - SUM E L(Ij,Eb) F(EA)
C
C SUM e L(ij,ae) F(eb) - SUM e L(ij,eb) F(ea)
C
C
C FOR CCSD AND QCISD IN ADDITION THE TERMS
C
C SUM L(I,E) F(EA)
C
C SUM L(i,e) F(ea)
C
C ARE CALCULATED
C
C FURTHER FOR CCSD METHODS THE TERM
C
C - 1/2 SUM M F(E,M) T(A,M) 
C
C IS ADDED TO THE FEA CONTRIBUTION BEFORE THE
C CONTRACTION WITH THE L2 AND L1  AMPLITUDES IS CARRIED OUT.
C
CEND
C
C
C CODED JG AUGUST/90
C
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER DIRPRD,DISSYT,DISSYZ,POP,VRT
      LOGICAL MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC,CC2
      DIMENSION ICORE(MAXCOR)
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWO
      COMMON /SYM/ POP(8,2),VRT(8,2),NTAA,NTBB,
     &             NF1AA,NF1BB,NF2AA,NF2BB
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),
     &DIRPRD(8,8)
      COMMON /FLAGS/IFLAGS(100)
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),NTOT(18)
      COMMON /METH/MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC,CC2
C
#include "parcc.com"
C
      DATA ONE,HALFM /1.0D0,-0.5D0/
C
C    CALCULATE SIZE OF F(A,E) ARRAY
C    AND GET THESE ARRAYS
C
C The singles contribution is with standard CCSD FAE 
C
      NFAA=NF2AA
      NFBB=NF2BB
      I0AA=MAXCOR+1-NFAA*IINTFP
      MXCOR=MAXCOR-NFAA*IINTFP
      CALL GETLST(ICORE(I0AA),1,1,1,1,92)
      IF(IUHF.EQ.0) THEN
       I0BB=I0AA
      ELSE
       I0BB=I0AA-NFBB*IINTFP
       MXCOR=MXCOR-NFBB*IINTFP
       CALL GETLST(ICORE(I0BB),1,1,1,2,92)
      ENDIF
C
C     FOR QCISD AND CCSD METHODS GET THE L1-AMPLITUDES
C
C     CALCULATE ADDTIONAL TERMS FOR QCISD AND CCSD
C
      IF(CCSD.OR.QCISD) THEN
       I0TA=I0BB-NTAA*IINTFP
       I0ZA=I0TA-NTAA*IINTFP
       MXCOR=MXCOR-2*NTAA*IINTFP
       CALL GETLST(ICORE(I0TA),1,1,2,1,190)
       CALL GETLST(ICORE(I0ZA),1,1,1,3,90)
       IF(IUHF.EQ.0) THEN
        I0TB=I0TA
        I0ZB=I0ZA
       ELSE
        I0TB=I0ZA-NTBB*IINTFP
        I0ZB=I0TB-NTBB*IINTFP
        MXCOR=MXCOR-2*NTBB*IINTFP
        CALL GETLST(ICORE(I0TB),1,1,2,2,190)
        CALL GETLST(ICORE(I0ZB),1,1,1,4,90)
       ENDIF

       DO 300 ISPIN=1,IUHF+1
C
        IF(ISPIN.EQ.1) THEN
         IOFFF=I0AA
         IOFFT=I0TA
         IOFFZ=I0ZA
         I0Z=I0ZA
        ELSE
         IOFFF=I0BB
         IOFFT=I0TB
         IOFFZ=I0ZB
         I0Z=I0ZB
        ENDIF
C
        DO 250 IRREP=1,NIRREP
C
         NOCC=POP(IRREP,ISPIN)
         NVRT=VRT(IRREP,ISPIN)
C
         IF(MIN(NOCC,NVRT).GT.0) THEN
C
         CALL XGEMM('N','N',NVRT,NOCC,NVRT,ONE,ICORE(IOFFF),
     &              NVRT,ICORE(IOFFT),NVRT,ONE,ICORE(IOFFZ),
     &              NVRT)
         ENDIF
         IOFFF=IOFFF+NVRT*NVRT*IINTFP
         IOFFT=IOFFT+NVRT*NOCC*IINTFP
         IOFFZ=IOFFZ+NVRT*NOCC*IINTFP
250     CONTINUE
        CALL PUTLST(ICORE(I0Z),1,1,1,ISPIN+2,90)
300    CONTINUE
      ENDIF
C
C CC2 and f(m,e) != 0, we need the -1/2f(m,e)*t(m,a) contribution to
C the F(a,e) intermediate. 
C
      IF (CC2) THEN

         IF (IFLAGS(38) .EQ. 0) RETURN

            CALL GETLST(ICORE(I01),1,1,1,3,93)
            CALL GETLST(ICORE(I02),1,1,1,1,90)
            CALL GETLST(ICORE(I0AA),1,1,1,3,92)

            IOFFEA=I0AA
            IOFFEM=I01
            IOFT=I02

            DO IRREP=1,NIRREP
               NOCC=POP(IRREP,1)
               NVRT=VRT(IRREP,1)
               CALL XGEMM('N','T',NVRT,NVRT,NOCC,ONEM,ICORE(IOFFEM),
     &                     NVRT,ICORE(IOFT),NVRT,ONE,ICORE(IOFFEA),
     &                     NVRT)
              IOFFEA=IOFFEA+NVRT*NVRT*IINTFP
              IOFFEM=IOFFEM+NOCC*NVRT*IINTFP
              IOFT=IOFT+NOCC*NVRT*IINTFP

            ENDDO

            IF (IUHF.EQ.1) THEN
               CALL GETLST(ICORE(I01),1,1,1,4,93)
               CALL GETLST(ICORE(I02),1,1,1,2,90)
               CALL GETLST(ICORE(I0BB),1,1,1,4,92)

               IOFFEA=I0BB
               IOFFEM=I01
               IOFT=I02

               DO IRREP=1,NIRREP
                  NOCC=POP(IRREP,2)
                  NVRT=VRT(IRREP,2)
                  CALL XGEMM('N','T',NVRT,NVRT,NOCC,ONEM,ICORE(IOFFEM),
     &                        NVRT,ICORE(IOFT),NVRT,ONE,ICORE(IOFFEA),
     &                        NVRT)
                 IOFFEA=IOFFEA+NVRT*NVRT*IINTFP
                 IOFFEM=IOFFEM+NOCC*NVRT*IINTFP
                 IOFT=IOFT+NOCC*NVRT*IINTFP
               ENDDO

            ENDIF
      ENDIF 
C
C The doubles contributions is with scalled CCSD FAE 
C
CSSS#ifdef _DCC_FLAG
      If (Ispar) Then
      NFAA=NF2AA
      NFBB=NF2BB
      I0AA=MAXCOR+1-NFAA*IINTFP
      MXCOR=MAXCOR-NFAA*IINTFP
      CALL GETLST(ICORE(I0AA),1,1,1,9,92)
      IF(IUHF.EQ.0) THEN
       I0BB=I0AA
      ELSE
       I0BB=I0AA-NFBB*IINTFP
       MXCOR=MXCOR-NFBB*IINTFP
       CALL GETLST(ICORE(I0BB),1,1,1,10,92)
      ENDIF
      Endif 
CSSS#endif 
C
C     AA AND BB SPIN CASES
C
      IF(IUHF.EQ.1) THEN
C
C      THESE CASES ARE ONLY NECCESARY IN THE UHF CASE
C      IN RHF THE AAAA AMPLITUDES ARE CALCULATED FROM
C      THE ABAB AMPLITUDES
C
       DO 100 ISPIN=1,2
C
        IF(ISPIN.EQ.1) THEN 
         I000=I0AA
        ELSE
         I000=I0BB
        ENDIF
        LISTT=ISPIN+143
        LISTZ=ISPIN+60
C
        DO 50 IRREP=1,NIRREP
C
        NVRTSQ=0
        DO 45 IRREPJ=1,NIRREP
         IRREPI=DIRPRD(IRREP,IRREPJ)
         NVRTSQ=NVRTSQ+VRT(IRREPJ,ISPIN)*VRT(IRREPI,ISPIN)
45      CONTINUE
C
        DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTT))
        DISSYZ=IRPDPD(IRREP,ISYTYP(1,LISTZ))
        NUMSYT=IRPDPD(IRREP,ISYTYP(2,LISTT))
        NUMSYZ=IRPDPD(IRREP,ISYTYP(2,LISTZ))
        I001=1
        I002=I001+IINTFP*NUMSYT*NVRTSQ
        I003=I002+IINTFP*NUMSYZ*NVRTSQ
        IF(MIN(NUMSYT,NUMSYZ,DISSYT,DISSYZ).NE.0) THEN
         I004=I003+IINTFP*MAX(NUMSYT,NUMSYZ)
         IF(I004.LT.MXCOR) THEN
C
C     IN CORE VERSION
C
         CALL F1L2AA_LEOM(ICORE(I001),ICORE(I002),ICORE(I002),
     &               ICORE(I001),ICORE(I000),VRT(1,ISPIN),
     &               NVRTSQ,DISSYT,DISSYZ,NUMSYT,
     &               NUMSYZ,NFAA,LISTT,LISTZ,IRREP,ICORE(I003))
        ELSE
         STOP 'F1L2AA'
        ENDIF
       ENDIF
50    CONTINUE
100   CONTINUE
      ENDIF
  
C
C      AB SPIN CASE
C
       LISTT=146
       LISTZ=63
C
C    LOOP OVER IRREPS
C
       DO 200 IRREP=1,NIRREP
C
C    RETRIEVE AMPLITUDES AND CALCULATE CONTRIBUTION TO Z
C
        DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTT))
        DISSYZ=IRPDPD(IRREP,ISYTYP(1,LISTZ))
        NUMSYT=IRPDPD(IRREP,ISYTYP(2,LISTT))
        NUMSYZ=IRPDPD(IRREP,ISYTYP(2,LISTZ))
        I001=1
        I002=I001+IINTFP*NUMSYT*DISSYT
        I003=I002+IINTFP*NUMSYZ*DISSYZ
        IF(MIN(NUMSYT,NUMSYZ,DISSYT,DISSYZ).NE.0) THEN
         I004=I003+IINTFP*MAX(NUMSYT,NUMSYZ,DISSYZ,DISSYT)*3
         IF(I004.LT.MXCOR) THEN
C
C       IN CORE ALGORITHM
C
         CALL F1L2AB_LEOM(ICORE(I001),ICORE(I002),ICORE(I002),
     &               ICORE(I001),
     &               ICORE(I0AA),ICORE(I0BB),
     &               POP(1,1),POP(1,2),VRT(1,1),VRT(1,2),DISSYT,
     &               DISSYZ,NUMSYT,NUMSYZ,NFAA,NFBB,
     &               LISTT,LISTZ,IRREP,IUHF,ICORE(I003))
        ELSE
C
C       OUT CORE ALGORITHM
C
        STOP 'F1L2AB'
        ENDIF
       ENDIF
200   CONTINUE
      RETURN
      END
