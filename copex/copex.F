#include "flags.h"
      PROGRAM COPEX 
C
C This program does COPT IP/EA calculations. Added to ACESII suite 
C by Ajith Perera, 11/2016. 
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z) 
C
      CHARACTER*10 ROUT   
      CHARACTER*8 STRING

#include "icore.com"
#include "istart.com"
#include "machsp.com"
#include "machsp.com"
#include "flags.com"
#include "flags2.com"
#include "info.com"
#include "files.com"
#include "sympop.com"
C
      NAMELIST /INPUTP/ EA,IP,DIR
C
      LOGICAL FZMAT
      LOGICAL IIP,IEA,IDIR
C
      FZMAT   = .FALSE.
C
C READING INPUT NAMELIST
C
      OPEN(UNIT=30, FILE='ZMAT', FORM='FORMATTED') 
    1 READ(30,'(A)',END=2) STRING
C
      IF (INDEX(STRING,'QSPACE') .EQ. 0) THEN
         FZMAT   = .TRUE.
      ENDIF
C
    2 CONTINUE
C
      IF(FZMAT) READ(30, INPUTP)
C
      IF (IP.NE.0) THEN
         IIP=.TRUE.
      ELSE 
         IIP=.FALSE.
      ENDIF 
      IF (EA.NE.0) THEN
         IEA=.TRUE.
      ELSE 
         IEA=.FALSE.
      ENDIF    
      IF (DIR.NE.0) THEN
         IDIR=.TRUE.
      ELSE 
         IDIR=.FALSE.
      ENDIF
C
C Initialize by calling CRAPSI
C
      Call ACES_INIT(icore, i0,icrsiz, iuhf, .true.)
C     
      ROUT = 'hbar'
      IONE = 1
C
      CALL GETREC (20, 'JOBARC', 'NAOBASFN', IONE, NAO)
C
C     ONLY FOR CLOSED SHELL
C 
      NOCC = NOCCO(1)
      NVIR = NVRTO(1)
C
      IEVA = NAO*IINTFP   
      IEVEC = NAO*NAO*IINTFP
      NINTMX = 600  
      NIPSH = NOCC*NOCC*NVIR
      NIP = NOCC + NIPSH
      NEASH = NOCC*NVIR*NVIR
      NEA = NVIR + NEASH
C
      LWORKEA = NEA*NEA
C
      IF (NEA.LT.4) THEN
         LWORKEA = 4*NEA
      ENDIF       
C
      LWORKIP = NIP*NIP
C
      IF (NIP.LT.4) THEN
         LWORKIP = 4*NIP
      ENDIF  
C
      LWORKHFIP = NOCC*NOCC
C
      IF (NOCC.LT.4) THEN
         LWORKHFIP = 4*NOCC
      ENDIF     
C
      LWORKHFEA = NVIR*NVIR
C
      IF (NVIR.LT.4) THEN
         LWORKHFEA = 4*NVIR
      ENDIF  
C
      LWORKHF = NAO*NAO
C
      IF (NAO.LT.4) THEN
         LWORKHF = 4*NAO
      ENDIF   
C
C ALLCOCATE MEMORY
C
C     I000 -> STATRT 
      I000 = I0
C     
C     I000 -> FBAR_IJ
      I010 = I000 + NOCC*NOCC*IINTFP
C
C     I010 -> FBAR_AI
      I020 = I010 + NOCC*NVIR*IINTFP
C
C     I020 -> FBAR_AB
      I030 = I020 + NVIR*NVIR*IINTFP

C     I030 -> AUX  (temporary array)
      I040 = I030 + NAO*NAO*IINTFP
      IF (I040 .GT. MAXCOR) CALL INSMEM("@-COPEX: ",I040,MAXCOR)
C
C     READ FBAR (ONE ELECTRON PART)
C
      CALL FBAR(ICORE(I000),ICORE(I010),ICORE(I020),ICORE(I040),
     &                NOCC,NVIR,NAO)
C
C     I030 -> H
C
      I040 = I030 + NAO*NAO*NAO*NAO*IINTFP
C
C     I040 -> AUX (temporary array)
C
      I050 = I040 + NAO*NAO*NAO*NAO*IINTFP
C
      IF (I050 .GT. MAXCOR) CALL INSMEM("@-COPEX: ",I050,MAXCOR)
C
C     READ WBAR (TWO ELECTRON PART)
C
      CALL WBAR(ICORE(I030),ICORE(I040),NOCC,NVIR,NAO)
C
C
C     I060 -> EEA
      I060 = I050 + NAO*NAO*NAO*NAO*IINTFP
C
C     I070 -> T2
      I070 = I060 + NEA*NEA*IINTFP
C
C     I080 -> F
      I080 = I070 + NOCC*NOCC*NVIR*NVIR*IINTFP
C
C     I090 -> HPP
      I090 = I080 + NAO*IINTFP
C
C     I100 -> HPQ
      I100 = I090 + NVIR*NVIR*IINTFP
C
C     I110 -> WORKEA
      I110 = I100 + NVIR*NEASH*IINTFP
C
C     I120 -> EIVEL
      I120 = I110 + LWORKEA*IINTFP
C
C     I130 -> EIVER
      I130 = I120 + NEA*NEA*IINTFP
C
C     I140 -> EIVA
      I140 = I130 + NEA*NEA*IINTFP
C
C     I150 -> WIEA
      I150 = I140 + NEA*IINTFP
C
C     I160 -> XQP
      I160 = I150 + NEA*IINTFP
C
C     I170 -> CP
      I170 = I160 + NVIR*NEASH*IINTFP
C
C     I180 -> CQ
      I180 = I170 + NVIR*NVIR*IINTFP
C
C     I190 -> HEFF
      I190 = I180 + NEASH*NVIR*IINTFP
C
C     I200 -> AUX
      I200 = I190 + NVIR*NVIR*IINTFP
C
C     I210 -> 
      I210 = I200 + NAO*NAO*IINTFP
C
      IF (I210.GT.ICRSIZ) THEN
         WRITE(6,*) 'YOU ASKED FOR TOO MUCH MEMORY!    YOU HAVE:', 
     &ICRSIZ,'  YOU ASKED FOR:',I210
      CALL ERREX
      ENDIF
C
C      CALL GETREC(20, 'JOBARC', 'SCFEVECA', IEVEC, ICORE(I040))
C      CALL GETREC(20, 'JOBARC', 'FOCKA   ', IEVEC, ICORE(I130))    
      CALL GETREC(20, 'JOBARC', 'SCFEVALA', IEVA, ICORE(I080))      
C
      WRITE(6,*)
      WRITE(6,*) 'HATREE FOCK EIGENVALUES'
      CALL OUTPUT(ICORE(I080),1,1,1,NAO,1,1,1)
      WRITE(6,*) 
C     READ THE T2 COUPLED CLUSTER AMPLITUDES
C
      CALL GETT2(ICORE(I070),ICORE(I050),NOCC,NVIR,NAO)
C
C     THE ELECTRON AFFINITIES ARE COMPUTED
C
      IF (IEA) THEN
C
C     HBAR FOR EAS IS BUILT
C
         WRITE(6,*) 
         WRITE(6,*)  'HBAR FOR EAS IS BUILT'
C         
         CALL BDHBAREA(ICORE(I060),ICORE(I030),ICORE(I000),ICORE(I010),
     &ICORE(I020),ICORE(I070),ICORE(I080),NOCC,NVIR,NEA,NAO)
C
C     THE EAS ARE OBTAINED BY DIAGONALIZATION OF THE FULL HAMILTONIAN
C
         IF (IDIR) THEN
C
            WRITE(6,*) 
            WRITE(6,*)  'FULL DIAGONALIZATION'
C
            CALL DIAGMAT(ICORE(I060),ICORE(I110),ICORE(I120),ICORE(I130)
     &,ICORE(I140),ICORE(I150),LWORKEA,NEA,.TRUE.)
         ELSE
C
C     A QUADRATIC EQUATION IS SOLVED TO COMPUTE THE XQP COEFFICIENTS
C     HQP + HQQ * XQP - XQP * (HPP + HPQ * XQP) = 0
C     AND EFFECTIVE HAMILTONIAN IS BUILT HEF = HPP + HPQ * XQP
C     THE EAS ARE OBTAINED BY DIAGONALIZING HEF
C     FOCK SPACE COUPLED CLUSTER APPROACH
C
C     THE COEFFICIENTS XQP ARE OBTAINED FROM DIAGONALIZATION OF THE FULL
C     HBAR: XQP = CQP * CPP^(-1) 
C
            WRITE(6,*) 
            WRITE(6,*)  'COEFFICIENTS FROM FULL DIAGONALIZATION'
C
            CALL DRCCOF(ICORE(I060),ICORE(I090),ICORE(I100),ICORE(I11
     &0),ICORE(I120),ICORE(I130),ICORE(I140),ICORE(I150),ICORE(I050),ICO
     &RE(I170),ICORE(I180),LWORKEA,NEA,NVIR,NEASH,0)
            CALL HEFF(ICORE(I090),ICORE(I100),ICORE(I050),ICORE(I190)
     &,ICORE(I160),ICORE(I120),ICORE(I130),ICORE(I140),ICORE(I150),
     &ICORE(I110),ICORE(I040),ICORE(I200),NEASH,NVIR,NAO,NOCC,LWORKHFEA,
     &LWORKHF,0)
         ENDIF
      ENDIF  
C
C     THE IPS ARE CALCULATED
C
      IF (IIP) THEN
C      
         CALL BDHBARIP(ICORE(I060),ICORE(I030),ICORE(I000),ICORE(I010),
     &ICORE(I020),ICORE(I070),ICORE(I080),NOCC,NVIR,NIP,NAO)
C
C     THE EAS ARE OBTAINED BY DIAGONALIZATION OF THE FULL HAMILTONIAN
C
C     ONLY FOR MORE VIRTUALS THAN OCCUPIED
C
         IF (IDIR) THEN 
C
            WRITE(6,*) 
            WRITE(6,*)  'FULL DIAGONALIZATION'  
C
            CALL DIAGMAT(ICORE(I060),ICORE(I110),ICORE(I120),ICORE(I130)
     &,ICORE(I140),ICORE(I150),LWORKIP,NIP,.TRUE.)
         ELSE
C
C     A QUADRATIC EQUATION IS SOLVED TO COMPUTE THE XQP COEFFICIENTS
C     HQP + HQQ * XQP - XQP * (HPP + HPQ * XQP) = 0
C     AND EFFECTIVE HAMILTONIAN IS BUILT HEF = HPP + HPQ * XQP
C     THE EAS ARE OBTAINED BY DIAGONALIZING HEF
C     FOCK SPACE COUPLED CLUSTER APPROACH
C
C     THE COEFFICIENTS XQP ARE OBTAINED FROM DIAGONALIZATION OF THE FULL
C     HBAR: XQP = CQP * CPP^(-1) 
C
C     ONLY FOR MORE VIRTUALS THAN OCCUPIED
C
            WRITE(6,*) 
            WRITE(6,*)  'GUESS FROM FULL DIAGONALIZATION'
C
            CALL DRCCOF(ICORE(I060),ICORE(I090),ICORE(I100),ICORE(I11
     &0),ICORE(I120),ICORE(I130),ICORE(I140),ICORE(I150),ICORE(I050),ICO
     &RE(I170),ICORE(I180),LWORKIP,NIP,NOCC,NIPSH,1)
C
            CALL HEFF(ICORE(I090),ICORE(I100),ICORE(I050),ICORE(I190)
     &,ICORE(I160),ICORE(I120),ICORE(I130),ICORE(I140),ICORE(I150),
     &ICORE(I110),ICORE(I040),ICORE(I200),NIPSH,NOCC,NAO,NOCC,LWORKHFIP,
     &LWORKHF,1)
         ENDIF
      ENDIF
C
      CALL ACES_FIN

      STOP
      END      
