       SUBROUTINE RCL_FORM_HBAR_JI(ICORE,MAXCOR,IUHF,FACT)
C
C THIS PROGRAM COMPUTES :
C
C     +  1/2 SUM N SUM E,F <MN//EF> T(IN,EF)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER DIRPRD,DISSYW,DISSYT,POP,VRT
      LOGICAL MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC,
     &            CC2,RCCD,DRCCD
      LOGICAL NON_HF,TAU
      DIMENSION ICORE(MAXCOR)
      COMMON /SYM/ POP(8,2),VRT(8,2),NTAA,NTBB,NF1AA,NF1BB,NF2AA,NF2BB
      COMMON /INFO/ NOCCO(2),NVRTO(2)
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /FILES/ LUOUT,MOINTS
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),
     &DIRPRD(8,8)
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),NTOT(18)
      COMMON /CONTROL/ IPRNT,IXXX,IXXX2
      COMMON /FLAGS/ IFLAGS(100)
      COMMON /METH/MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC,
     &            CC2,RCCD,DRCCD
C
      TAU = .FALSE.
      UCC = .FALSE.

      I0TA = MAXCOR
      I0TB = MAXCOR

      DO 1000 ISPIN=1,IUHF+1 
C
       IF (ISPIN .EQ. 1) THEN
          NOCCSQ=NF1AA
       ELSE
          NOCCSQ=NF1BB
       ENDIF

       I000   = MAXCOR + 1 - NOCCSQ * IINTFP
       MAXCOR = MAXCOR -     NOCCSQ * IINTFP

       CALL ZERO(ICORE(I000),NOCCSQ)

       IF(IUHF.EQ.1) THEN

C LOOP OVER IRREPS OF EF BLOCK (THE SAME IRREPS AS THE IN AND MN BLOCKS 
C HAVE
C
       DO 100 IRREP=1,NIRREP
C
C RETRIEVE INTEGRALS AND T2 AMPLITUDES.
C
        NOCC2SQ=0 
        DO 110 IRREPJ=1,NIRREP
         NOCC2SQ=NOCC2SQ+POP(IRREPJ,ISPIN)
     &                    *POP(DIRPRD(IRREPJ,IRREP),ISPIN)
110     CONTINUE 
        DISSYW=IRPDPD(IRREP,18+ISPIN)
        DISSYT=IRPDPD(IRREP,18+ISPIN)
        NUMSYW=IRPDPD(IRREP,20+ISPIN)  
        NUMSYT=IRPDPD(IRREP,20+ISPIN)
        MAXDIM=MAX(DISSYW,DISSYT,NUMSYW,NUMSYT)
        I001=1
        I002=I001+IINTFP*NOCC2SQ*MAXDIM
        I003=I002+IINTFP*NOCC2SQ*MAXDIM
        IF(MIN(NUMSYT,NUMSYW,DISSYT,DISSYW).NE.0) THEN
         I004=I003+IINTFP*MAX(NUMSYT,NUMSYW)
         if (I004.LT.0) call trap_intovf('rcl_form_hbar_ji',1)
         IF(I004.LT.MAXCOR) THEN

          CALL RCL_Q2AA(ICORE(I001),ICORE(I002),ICORE(I000),
     &                  ISPIN,POP(1,ISPIN),VRT(1,ISPIN),
     &                  NOCCSQ,DISSYW,DISSYT,NUMSYW,NUMSYT,
     &                  IRREP,ICORE(I003),FACT)
          
         ELSE
          CALL INSMEM("rcl_form_hbar_ji",I005,MAXCOR)
         ENDIF
         ENDIF 
100    CONTINUE
#ifdef _DEBUG_LVL0
      call checksum("F(j,i)1:",icore(i000),noccsq)
#endif 
       ENDIF
C
C       AB SPIN CASE
C
       NMULT = 1 
       IF (RCCD .AND. IUHF .EQ. 0) NMULT = 2
       DO IMULT = 1, NMULT 

       IF (IMULT.EQ.2) CALL ZERO(ICORE(I000),NOCCSQ)

C      LOOP OVER IRREPS.
C
       DO 200 IRREP=1,NIRREP
C
C     RETRIEVE INTEGRALS AND T2 AMPLITUDES
C
        DISSYW=IRPDPD(IRREP,13)
        DISSYT=IRPDPD(IRREP,13)
        NUMSYW=IRPDPD(IRREP,14)
        NUMSYT=IRPDPD(IRREP,14)

        I001=1
        I002=I001+IINTFP*NUMSYW*DISSYW
        I003=I002+IINTFP*NUMSYT*DISSYT
        IF(MIN(NUMSYT,NUMSYW,DISSYT,DISSYW).NE.0) THEN
         I004=I003+3*IINTFP*MAX(NUMSYT,NUMSYW,DISSYW,DISSYT)
         if (I004.LT.0) call trap_intovf('rcl_form_hbar_ji',2)
         IF(I004.LT.MAXCOR) THEN
C
C         IN CORE VERSION
C
          CALL RCL_Q2AB(ICORE(I001),ICORE(I002),ICORE(I000),ICORE(I0TA),
     &              ICORE(I0TB),ISPIN,POP(1,ISPIN),POP(1,3-ISPIN),
     &              VRT(1,ISPIN),VRT(1,3-ISPIN),NOCCSQ,DISSYW,DISSYT,
     &              NUMSYW,NUMSYT,IRREP,ICORE(I003),IUHF,FACT,IMULT)
         ELSE
          CALL INSMEM("rcl_form_hbar_ji",I005,MAXCOR)
        ENDIF
        ENDIF
200   CONTINUE

C This has been transferred to rcl_q2ab.F
CSSS      IF (IUHF .EQ.0. AND. DRCCD) CALL DSCAL(NOCCSQ,2.0D0,ICORE(I000),1)

         NON_HF = (IFLAGS(38) .GT. 0)   
         IF (NON_HF) THEN
            CALL GETLST(ICORE(I001),1,1,1,ISPIN+2,91)
#ifdef _DEBUG_LVL0
            call checksum("F(j,i)-NON-HF:",icore(i001),NOCCSQ)
#endif 
            CALL DAXPY(NOCCSQ,1.0D0,ICORE(I001),1,ICORE(I000),1)
         ENDIF

      IF (IMULT .EQ. 1) THEN
         CALL PUTLST(ICORE(I000),1,1,1,ISPIN,91)
      ELSE
         CALL PUTLST(ICORE(I000),1,1,1,10,91)
      ENDIF 
 
#ifdef _DEBUG_LVL0
      call checksum("F(j,i):",icore(i000),noccsq)
#endif 

      ENDDO 
1000  CONTINUE
C
      RETURN
      END
