       sUBROUTINE RCL_FORM_HBAR_AB(ICORE,MAXCOR,IUHF,FACT)
C
C THIS PROGRAM COMPUTES :
C
C      - 1/2 SUM F SUM M N <MN//EF> T(MN,AF)
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER DIRPRD,DISSYW,DISSYT,POP,VRT
      LOGICAL TAU,NON_HF
      DIMENSION ICORE(MAXCOR)
      LOGICAL MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC,
     &        CC2,RCCD,DRCCD
      COMMON /SYM/ POP(8,2),VRT(8,2),NTAA,NTBB,NF1AA,NF1BB,NF2AA,NF2BB
      COMMON /INFO/ NOCCO(2),NVRTO(2)
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /FILES/ LUOUT,MOINTS
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),
     &                DIRPRD(8,8)
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),NTOT(18)
      COMMON /CONTROL/ IPRNT,IXXX,IXXX2
      COMMON /FLAGS/ IFLAGS(100)
      COMMON/METH/MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC,
     &            CC2,RCCD,DRCCD
C
      TAU = .FALSE.
      UCC = .FALSE.

      IOTA = MAXCOR
      IOTB = MAXCOR

      DO 1000 ISPIN=1,IUHF+1
       IF (ISPIN .EQ. 1) THEN
          NVRTSQ=NF2AA
       ELSE
          NVRTSQ=NF2BB
       ENDIF 

       I000   = MAXCOR + 1 - NVRTSQ * IINTFP
       MAXCOR = MAXCOR -     NVRTSQ * IINTFP

       CALL ZERO(ICORE(I000),NVRTSQ)

       IF(IUHF.EQ.1) THEN
C
C LOOP OVER IR REPS OF MN BLOCK (THE SAME IRREPS AS THE AF AND EF BLOCKS C HAVE
C
       DO 100 IRREP=1,NIRREP
C
C RETRIEVE INTEGRALS AND T2 AMPLITUDES.
C
        NVRT2SQ=0
        DO 110 IRREPJ=1,NIRREP
         NVRT2SQ=NVRT2SQ+VRT(IRREPJ,ISPIN)*
     &                   VRT(DIRPRD(IRREPJ,IRREP),ISPIN)
110     CONTINUE
C
        DISSYW=IRPDPD(IRREP,18+ISPIN)
        DISSYT=IRPDPD(IRREP,18+ISPIN)
        NUMSYW=IRPDPD(IRREP,20+ISPIN)
        NUMSYT=IRPDPD(IRREP,20+ISPIN) 
        MAXDIM = MAX(DISSYW,DISSYT,NUMSYW,NUMSYT)
        I001=1
        I002=I001+IINTFP*MAXDIM*NVRT2SQ
        I003=I002+IINTFP*MAXDIM*NVRT2SQ
        I004=I003+IINTFP*MAX(NUMSYT*DISSYT,NUMSYW*DISSYW)
        IF(MIN(NUMSYT,NUMSYW,DISSYT,DISSYW).NE.0) THEN
         I005=I004+IINTFP*MAX(DISSYT,DISSYW,NUMSYW,NUMSYT)
         if (I005.LT.0) call trap_intovf('rcl_form_hbar_ab',1)
         IF(I005.LT.MAXCOR) THEN

          CALL RCL_Q3AA(ICORE(I001),ICORE(I002),ICORE(I003),
     &                  ICORE(I000),ISPIN,POP(1,ISPIN),
     &                  VRT(1,ISPIN),NVRTSQ,NVRT2SQ,
     &                  DISSYW,DISSYT,NUMSYW,NUMSYT,IRREP,
     &                  ICORE(I004),FACT)
          
         ELSE
          CALL INSMEM("rcl_form_hbar_ab",I005,MAXCOR)
         ENDIF
        ENDIF      
100    CONTINUE

#ifdef _DEBUG_LVL0
      call checksum("F(a,b)1:",icore(i000),Nvrtsq)
C      call output(icore(i000),1,NVRTO(ispin),1,NVRTO(ispin),
C     +            NVRTO(ispin),NVRTO(ispin),1)
#endif 
       ENDIF
C
       NMULT = 1 
       IF (RCCD .AND. IUHF .EQ. 0) NMULT = 2

       DO IMULT = 1, NMULT 

       IF (IMULT .EQ. 2) CALL ZERO(ICORE(I000),NVRTSQ)

C      LOOP OVER IRREPS.
C
       DO 200 IRREP=1,NIRREP
C
C     RETRIEVE INTEGRALS AND T2 AMPLITUDES
C
        DISSYW=IRPDPD(IRREP,13)
        DISSYT=IRPDPD(IRREP,13)
        NUMSYW=IRPDPD(IRREP,14)
        NUMSYT=IRPDPD(IRREP,14)

        I001=1
        I002=I001+IINTFP*NUMSYW*DISSYW
        I003=I002+IINTFP*NUMSYT*DISSYT
        I004=I003+IINTFP*NUMSYT*DISSYT
        IF(MIN(NUMSYT,NUMSYW,DISSYT,DISSYW).NE.0) THEN
         I005=I004+3*IINTFP*MAX(DISSYT,DISSYW,NUMSYW,NUMSYT)
         if (I005.LT.0) call trap_intovf('rcl_form_hbar_ab',2)
         IF(I005.LE.MAXCOR) THEN
C
          CALL RCL_Q3AB(ICORE(I001),ICORE(I002),ICORE(I003),ICORE(I000),
     &              ICORE(I0TA),ICORE(I0TB),ISPIN,POP(1,ISPIN),
     &              POP(1,3-ISPIN),VRT(1,ISPIN),VRT(1,3-ISPIN),NVRTSQ, 
     &              DISSYW,DISSYT,NUMSYW,NUMSYT,IRREP,ICORE(I004),IUHF,
     &              FACT,IMULT)
         ELSE
          CALL INSMEM('rcl_form_hbar_ab',I005,MXCOR)
         ENDIF
        ENDIF

200   CONTINUE
C This has been transferred to rcl_q3ab.F
CSSS      IF (IUHF .EQ.0 .AND. DRCCD) CALL DSCAL(NVRTSQ,2.0D0,ICORE(I000),1)

         NON_HF = (IFLAGS(38) .GT. 0) 
         IF (NON_HF) THEN 
            CALL GETLST(ICORE(I001),1,1,1,ISPIN+2,92) 
#ifdef _DEBUG_LVL0
            call checksum("F(a,b)-NON-HF:",icore(i001),Nvrtsq)
#endif  
          CALL DAXPY(NVRTSQ,1.0D0,ICORE(I001),1,ICORE(I000),1)
         ENDIF 

      IF (IMULT .EQ. 1) THEN
         CALL PUTLST(ICORE(I000),1,1,1,ISPIN,92) 
      ELSE 
         CALL PUTLST(ICORE(I000),1,1,1,10,92) 
      ENDIF 
#ifdef _DEBUG_LVL0
      call checksum("F(a,b):",icore(i000),Nvrtsq)
C      call output(icore(i000),1,NVRTO(1),1,NVRTO(1),NVRTO(1),
C     +            NVRTO(1),1)
#endif 
      ENDDO 
1000  CONTINUE

      RETURN
      END
