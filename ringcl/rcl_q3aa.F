      SUBROUTINE RCL_Q3AA(W,T,T1,Z,ISPIN,POP,VRT,NVRTSQ,
     &                    NVRT2SQ,DISSYW,DISSYT,NUMSYW,NUMSYT,
     &                    IRREP,TMP,FACT)

      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC,
     &            CC2,RCCD,DRCCD,RLE
      INTEGER DISSYT, DISSYW, DIRPRD,POP,VRT
      DIMENSION W(NUMSYW,NVRT2SQ),T(NUMSYT,NVRT2SQ)
      DIMENSION T1(DISSYT,NUMSYT),Z(NVRTSQ)
      DIMENSION TMP(1)
      DIMENSION POP(8),VRT(8),T1A(1)
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),DIRPRD(8,8)
      COMMON /FLAGS/  IFLAGS(100)
      COMMON /FLAGS2/ IFLAGS2(500)
      COMMON/METH/MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC,
     &            CC2,RCCD,DRCCD
C
      DATA ONEM,ONE,HALF,TWO /-1.0D0,1.D0,0.5D0,2.D0/
C
      IND(I,J)=((I-2)*(I-1))/2+J

      FACTM=-FACT
C
C      PICK UP FIRST THE RELEVANT T2 AND W PIECES
C
      IF (DRCCD) THEN

C I don't believe drCCD necessarily calls for antisymmetriced integrals.
C This term in the lambda equation comes from the lead term (<ab||ij>) in the
C T2 equation. If Coulomb only integrals use ISPIN 

         CALL GETLST(T1,1,NUMSYW,2,IRREP,ISPIN+2)
      ELSEIF (RCCD) THEN 
         CALL GETLST(T1,1,NUMSYW,2,IRREP,ISPIN+2)
      ENDIF 

      CALL TRANSP(T1,W,NUMSYW,DISSYW)
      CALL GETLST(T1,1,NUMSYT,1,IRREP,ISPIN+43)   
      CALL TRANSP(T1,T,NUMSYT,DISSYT)
C 
#ifdef _DEBUG_LVL0
      call checksum("@q3a-W:",W,NUMSYW*DISSYW)
      call checksum("@q3a-T:",T,NUMSYT*DISSYT)
#endif
         IOFF=1
         JOFF=1
         DO 90 IRREPJ=1,NIRREP
C          
C        GET NUMBER OF VIRTUAL ORBITALS FOR IRREPJ     
C
           NVRTJ=VRT(IRREPJ)
C
C        IF ZERO, NOTHING TO COMPUTE
C
           IF(NVRTJ.EQ.0) GO TO 90
C
C        DETERMINE IRREPI WHOSE DIRECT PRODUCT WITH IRREPJ GIVES IRREP
C
           IRREPI=DIRPRD(IRREP,IRREPJ)
C
C        GET NUMBER  OF VIRTUAL ORBITALS FOR IRREPI
C
           NVRTI=VRT(IRREPI)
C
C        IF ZERO, NOTHING TO COMPUTE
C
           IF(NVRTI.EQ.0) GO TO 80
C
            CALL XGEMM('T','N',NVRTJ,NVRTJ,NVRTI*NUMSYW,FACTM,
     &                  W(1,JOFF),NVRTI*NUMSYW,T(1,JOFF),
     &                  NVRTI*NUMSYW,ONE,Z(IOFF),NVRTJ)
C
            JOFF=JOFF+NVRTI*NVRTJ
80         CONTINUE
           IOFF=IOFF+NVRTJ*NVRTJ
C
90        CONTINUE
C
      RETURN
      END
