      SUBROUTINE WTWTW(ICORE,MAXCOR,IUHF)
C
C THIS ROUTINE FORMS W(MBEJ) "TWIDLE-TWIDLE", WHICH IS CONSTRUCTED
C  FROM W(MBEJ) "TWIDLE" AND AN INTERMEDIATE QUANTITY THAT WAS WRITTEN
C  OUT IN T1RING
C       =           _
C       W(MBEJ) = 2*W-WX
C
C
C  WHERE
C =
C W(mbej)=<mb||ej> + SUM t(fb,jn) <mn||ef>
C
C _
C W(mbej)=<mb||ej> + SUM t(f,j)<mb||ef> - SUM t(b,n)<mn||ej> 
C  
C         + [t(fb,jn) + t(f,j)*t(b,n)] <mn||ef>
C 
C WX(mbej)=<mb||ej> + 2 * SUM t(f,j)<mb||ef> - 2 * SUM t(b,n)<mn||ej> 
C  
C         + [t(fb,jn) + 2 * t(f,j)*t(b,n)] <mn||ef>
C
C 
C ON THE CALL, THE INTERMEDIATES ARE STORED ON THE FOLLOWING LISTS
C                                 _
C     TYPE            WX          W
C
C     MBEJ           123         54
C     mbej           124         55  (UHF only)
C     MbEj           118         56
C     mBeJ           117         57  (UHF only)
C     mBEj           125         58
C     MbeJ           126         59  (UHF only)
C
C   =
C   W IS WRITTEN TO THE LISTS WHICH HOLD WX
C
CEND
      IMPLICIT INTEGER (A-Z)
      DOUBLE PRECISION ONE,ONEM,TWO
      DIMENSION ICORE(MAXCOR)
      LOGICAL CC2, HBAR_4LCCSD, ADC2
      COMMON/FLAGS/IFLAGS(100)
      COMMON/FLAGS2/IFLAGS2(500)
      DATA ONE /1.0/
      DATA ONEM /-1.0/
      DATA TWO /2.0/

      CC2 = IFLAGS(2) .EQ. 47
      ADC2        = .FALSE.
      HBAR_4LCCSD = .FALSE.  
      HBAR_4LCCSD = (IFLAGS(2) .EQ. 6 .OR. IFLAGS2(117) .EQ. 7)
      ADC2 =  (IFLAGS(2) .EQ. 1 .AND. IFLAGS(87) .EQ. 3 .AND.
     &         IFLAGS2(117) .EQ. 10)
      IF (ADC2) HBAR_4LCCSD = .TRUE. 

      IF (HBAR_4LCCSD) THEN

         CALL GETALL(ICORE,MAXCOR,1,23)
         CALL PUTALL(ICORE,MAXCOR,1,123)
         CALL GETALL(ICORE,MAXCOR,1,25)
         CALL PUTALL(ICORE,MAXCOR,1,125)
         CALL GETALL(ICORE,MAXCOR,1,18)
         CALL PUTALL(ICORE,MAXCOR,1,118)

         IF (IUHF .NE. 0) THEN
            CALL GETALL(ICORE,MAXCOR,1,24)
            CALL PUTALL(ICORE,MAXCOR,1,124)
            CALL GETALL(ICORE,MAXCOR,1,17)
            CALL PUTALL(ICORE,MAXCOR,1,117)
            CALL GETALL(ICORE,MAXCOR,1,26)
            CALL pUTALL(ICORE,MAXCOR,1,126)
         ENDIF
         RETURN
      ENDIF
C
      IF (CC2) THEN
         CALL SAXLST(ICORE,MAXCOR,23,123,123,ONE,ONE)
         CALL SAXLST(ICORE,MAXCOR,123,54,123,ONE,ONEM)
         CALL SAXLST(ICORE,MAXCOR,25,125,125,ONE,ONE)
         CALL SAXLST(ICORE,MAXCOR,125,58,125,ONE,ONEM)
      ELSE
         CALL SAXLST(ICORE,MAXCOR,54,123,123,TWO,ONEM)
         CALL SAXLST(ICORE,MAXCOR,58,125,125,TWO,ONEM)
      ENDIF 
C
      IF(IUHF.NE.0)THEN
        IF (CC2) THEN
           CALL SAXLST(ICORE,MAXCOR,18,118,118,ONE,ONE)
           CALL SAXLST(ICORE,MAXCOR,118,56,118,ONE,ONEM)
           CALL SAXLST(ICORE,MAXCOR,24,124,124,ONE,ONE)
           CALL SAXLST(ICORE,MAXCOR,124,55,124,ONE,ONEM)
           CALL SAXLST(ICORE,MAXCOR,17,117,117,ONE,ONE)
           CALL SAXLST(ICORE,MAXCOR,117,57,117,ONE,ONEM)
           CALL SAXLST(ICORE,MAXCOR,26,126,126,ONE,ONE)
           CALL SAXLST(ICORE,MAXCOR,126,59,126,ONE,ONEM)
        ELSE
       
           CALL SAXLST(ICORE,MAXCOR,56,118,118,TWO,ONEM)
           CALL SAXLST(ICORE,MAXCOR,55,124,124,TWO,ONEM)
           CALL SAXLST(ICORE,MAXCOR,57,117,117,TWO,ONEM)
           CALL SAXLST(ICORE,MAXCOR,59,126,126,TWO,ONEM)
        ENDIF 
      ELSE
       CALL QUIKAB2(ICORE,MAXCOR,IUHF)
      ENDIF
C
C SAVE COPIES FOR CCSD SECOND DERIVATIVE CALCULATION
C
      IF(IFLAGS(3).EQ.2)THEN
       CALL GETALL(ICORE,MAXCOR,1,123)
       CALL PUTALL(ICORE,MAXCOR,1,74)
       CALL GETALL(ICORE,MAXCOR,1,125)
       CALL PUTALL(ICORE,MAXCOR,1,78)
       CALL GETALL(ICORE,MAXCOR,1,118)
       CALL PUTALL(ICORE,MAXCOR,1,76)
       IF(IUHF.NE.0)THEN
        CALL GETALL(ICORE,MAXCOR,1,124)
        CALL PUTALL(ICORE,MAXCOR,1,75)
        CALL GETALL(ICORE,MAXCOR,1,117)
        CALL PUTALL(ICORE,MAXCOR,1,77)
        CALL GETALL(ICORE,MAXCOR,1,126)
        CALL PUTALL(ICORE,MAXCOR,1,79)
       ENDIF
      ENDIF
C 
      RETURN
      END
