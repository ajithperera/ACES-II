C
C DRIVER FOR AO-BASED PARTICLE-PARTICLE LADDER CONTRACTION.
C
      SUBROUTINE AOLAD(ICORE,MAXCOR,IUHF,ISPIN,TAU)
      IMPLICIT INTEGER (A-Z)
      DOUBLE PRECISION X,SNRM2,SDOT,ABLAD,ZILCH,ONE
      LOGICAL TAU
      CHARACTER*2 SPLAB(3)
      CHARACTER*80 FNAME
C
      DIMENSION ICORE(MAXCOR)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/SYMINF/NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON/AOSYM/IAOPOP(8),IOFFAO(8),IOFFV(8,2),IOFFO(8,2),
     &             IRPDPDAO(8),IRPDPDAOS(8),ISTART(8,8),ISTARTMO(8,3)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON/SYM/POP(8,2),VRT(8,2),NT(2),NFMI(2),NFEA(2)
      COMMON/INFO/NOCCO(2),NVRTO(2)
C
      DATA ZILCH,ONE /0.0D0,1.0D0/
      DATA SPLAB /'AA','BB','AB'/
C
      NNM1O2(I)=(I*(I-1))/2
C
      IONE=1
      LUINT=10
      NMO=NOCCO(1)+NVRTO(1)
      CALL GETREC(20,'JOBARC','NBASTOT ',IONE,NAO)
      CALL GETAOINF(IUHF,IRREPX)
      ILNBUF=600
C
C CALCULATE TOTAL SIZE OF T2 VECTOR IN (XX,IJ) BASIS
C
      ISIZT2MIX=0
      DO 1 IRREP=1,NIRREP
       ISIZT2MIX=ISIZT2MIX+IRPDPD(IRREP,ISYTYP(2,43+ISPIN))
     &                    *IRPDPDAO(IRREP)
1     CONTINUE       
C
      I000=1
      I010=I000+ISIZT2MIX*IINTFP
      I020=I010+ISIZT2MIX*IINTFP
      I030=I020+MAX(NT(1),NT(2),ILNBUF,NAO*NMO)*IINTFP
      I040=I030+MAX(NT(1),NT(2),ILNBUF,NAO*NMO*IINTFP)
      I050=I040+ILNBUF
      I060=I050+ILNBUF
      I070=I060+ILNBUF
      I080=I070+ILNBUF
      I090=I080+ILNBUF
      I100=I090+ILNBUF
      I110=I100+ILNBUF
      I120=I110+ILNBUF
      I130=I120+ILNBUF
      I140=I130+ILNBUF
      I150=I140+MAX(ILNBUF,NAO)
      I160=I150+NAO*NAO
      I170=I160+4*ILNBUF
C
      J=1
      IOFF=I140
      DO 2 IRREP=1,NIRREP
       DO 3 I=1,IAOPOP(IRREP)
        ICORE(IOFF)=IRREP
        IOFF=IOFF+1
3      CONTINUE
2     CONTINUE
      CALL AOSYMVEC(ICORE(I150),NAO)
C      
      MXCOR=MAXCOR-I040+1   
C
C LOOP OVER SYMMETRIES AND FORM T2 VECTOR IN THE XX,IJ REPRESENTATION
C
      IOFFT2MO=I000
      IOFFT2MX=I010
      DO 4 IRREP=1,NIRREP  
       NUMAB=IRPDPD(IRREP,ISYTYP(1,43+ISPIN))
       NUMIJ=IRPDPD(IRREP,ISYTYP(2,43+ISPIN))
       NUMAO=IRPDPDAO(IRREP)
       IF(ISPIN.LE.2)THEN
        NUMABX=IRPDPD(IRREP,18+ISPIN)
       ELSE
        NUMABX=NUMAB
       ENDIF
       CALL GETLST(ICORE(IOFFT2MO),1,NUMIJ,1,IRREP,43+ISPIN)
C
       IF(TAU)THEN
        IF(ISPIN.LE.2)THEN
         CALL GETLST(ICORE(I020),1,1,1,ISPIN,90)
         CALL FTAU  (ICORE(IOFFT2MO),ICORE(I020),ICORE(I020),NUMAB,
     &               NUMIJ,POP(1,ISPIN),POP(1,ISPIN),VRT(1,ISPIN),
     &               VRT(1,ISPIN),IRREP,ISPIN,ONE)
        ELSE 
         CALL GETLST(ICORE(I020),1,1,1,1,90)
         CALL GETLST(ICORE(I030),1,1,1,1+IUHF,90)
         CALL FTAU  (ICORE(IOFFT2MO),ICORE(I020),ICORE(I030),NUMAB,
     &               NUMIJ,POP(1,1),POP(1,2),VRT(1,1),
     &               VRT(1,2),IRREP,3,ONE)
        ENDIF
       ENDIF
C
C EXPAND TO FULL T2(AB,I<J) FOR AA AND BB SPIN CASES
C
       IF(ISPIN.LE.2)THEN
        CALL SYMEXP2(IRREP,VRT(1,ISPIN),NUMABX,NUMAB,
     &               NUMIJ,ICORE(IOFFT2MO),ICORE(IOFFT2MO))
       ENDIF
C
C TRANSFORM THIS IRREP OF T2 VECTOR TO MIXED REPRESENTATION :
C
C          T2(AB,*) -> T2(XX,*)
C
       CALL T2TRAN(1,ICORE(IOFFT2MO),ICORE(IOFFT2MX),ICORE(I020),
     &               ICORE(I030),ICORE(I040),NAO,NMO,ISPIN,IUHF,IRREP)
       IOFFT2MO=IOFFT2MO+NUMABX*NUMIJ*IINTFP
       IOFFT2MX=IOFFT2MX+NUMAO*NUMIJ*IINTFP
4     CONTINUE
      CALL GFNAME('IIII    ',FNAME,ILENGTH)
      OPEN(UNIT=LUINT,FILE=FNAME(1:ILENGTH),
     &     FORM='UNFORMATTED',STATUS='OLD')
       CALL ZERO(ICORE(I000),ISIZT2MIX)
       CALL RDAOIJKL(ICORE(I010),ICORE(I000),ICORE(I020),ICORE(I030),
     &               ICORE(I040),ICORE(I050),ICORE(I060),ICORE(I070),
     &               ICORE(I080),ICORE(I090),ICORE(I100),ICORE(I110),
     &               ICORE(I120),ICORE(I130),ICORE(I160),ICORE(I140),
     &               ICORE(I150),
     &              IRPDPD(1,ISYTYP(2,43+ISPIN)),ILNBUF,LUINT,ISPIN,NAO,
     &                isizt2mix)
      CLOSE(UNIT=LUINT,STATUS='KEEP')
      IF(NIRREP.GT.1)THEN
       CALL GFNAME('IJIJ    ',FNAME,ILENGTH)
       OPEN(UNIT=LUINT,FILE=FNAME(1:ILENGTH),
     &      FORM='UNFORMATTED',STATUS='OLD')
       CALL RDAOIJKL(ICORE(I010),ICORE(I000),ICORE(I020),ICORE(I030),
     &               ICORE(I040),ICORE(I050),ICORE(I060),ICORE(I070),
     &               ICORE(I080),ICORE(I090),ICORE(I100),ICORE(I110),
     &               ICORE(I120),ICORE(I130),ICORE(I160),ICORE(I140),
     &               ICORE(I150),
     &            IRPDPD(1,ISYTYP(2,43+ISPIN)),ILNBUF,LUINT,ISPIN,NAO,
     &                isizt2mix)
       CLOSE(UNIT=LUINT,STATUS='KEEP')
       CALL GFNAME('IIJJ    ',FNAME,ILENGTH)
       OPEN(UNIT=LUINT,FILE=FNAME(1:ILENGTH),
     &      FORM='UNFORMATTED',STATUS='OLD')
       CALL RDAOIJKL(ICORE(I010),ICORE(I000),ICORE(I020),ICORE(I030),
     &               ICORE(I040),ICORE(I050),ICORE(I060),ICORE(I070),
     &               ICORE(I080),ICORE(I090),ICORE(I100),ICORE(I110),
     &               ICORE(I120),ICORE(I130),ICORE(I160),ICORE(I140),
     &               ICORE(I150),
     &            IRPDPD(1,ISYTYP(2,43+ISPIN)),ILNBUF,LUINT,ISPIN,NAO,
     &                isizt2mix)
       CLOSE(UNIT=LUINT,STATUS='KEEP')
       IF(IRREP.GT.2)THEN
        CALL GFNAME('IJKL    ',FNAME,ILENGTH)
        OPEN(UNIT=LUINT,FILE=FNAME(1:ILENGTH),
     &       FORM='UNFORMATTED',STATUS='OLD')
        CALL RDAOIJKL(ICORE(I010),ICORE(I000),ICORE(I020),ICORE(I030),
     &                ICORE(I040),ICORE(I050),ICORE(I060),ICORE(I070),
     &                ICORE(I080),ICORE(I090),ICORE(I100),ICORE(I110),
     &                ICORE(I120),ICORE(I130),ICORE(I160),ICORE(I140),
     &                ICORE(I150),
     &           IRPDPD(1,ISYTYP(2,43+ISPIN)),ILNBUF,LUINT,ISPIN,NAO,
     &                isizt2mix)
        CLOSE(UNIT=LUINT,STATUS='KEEP')
       ENDIF
      ENDIF
C
C TRANSFORM BACK TO MO REPRESENTATION
C
      IOFFT2MO=I010
      IOFXT2MO=I010
      IOFFT2MX=I000
      ABLAD=ZILCH
      DO 5 IRREP=1,NIRREP
       NUMAB=IRPDPD(IRREP,ISYTYP(1,43+ISPIN))
       NUMIJ=IRPDPD(IRREP,ISYTYP(2,43+ISPIN))
       NUMAO=IRPDPDAO(IRREP)
       IF(ISPIN.LE.2)THEN
        NUMABX=IRPDPD(IRREP,18+ISPIN)
       ELSE
        NUMABX=NUMAB
       ENDIF
       CALL T2TRAN(2,ICORE(IOFXT2MO),ICORE(IOFFT2MX),ICORE(I020),
     &             ICORE(I030),ICORE(I040),NAO,NMO,ISPIN,IUHF,IRREP)
C
C ANTISYMMETRIZE LEFT-HAND INDICES FOR AA AND BB SPIN CASES
C
       IF(ISPIN.LE.2)THEN
        CALL SQSYM(IRREP,VRT(1,ISPIN),NUMAB,NUMABX,NUMIJ,
     &             ICORE(I000),ICORE(IOFXT2MO))
        CALL SCOPY(NUMAB*NUMIJ,ICORE(I000),1,ICORE(IOFFT2MO),1)
       ENDIF
       CALL GETLST(ICORE(I000),1,NUMIJ,1,IRREP,60+ISPIN)
       CALL SAXPY (NUMIJ*NUMAB,ONE,ICORE(IOFFT2MO),1,ICORE(I000),1)
       CALL PUTLST(ICORE(I000),1,NUMIJ,1,IRREP,60+ISPIN)
C
C CALCULATE LADDER CONTRIBUTION
C
      CALL GETLST(ICORE(I000),1,NUMIJ,1,IRREP,43+ISPIN)
      IF(TAU)THEN
       IF(ISPIN.LE.2)THEN
        CALL GETLST(ICORE(I020),1,1,1,ISPIN,90)
        CALL FTAU  (ICORE(I000),ICORE(I020),ICORE(I020),NUMAB,
     &              NUMIJ,POP(1,ISPIN),POP(1,ISPIN),VRT(1,ISPIN),
     &              VRT(1,ISPIN),IRREP,ISPIN,ONE)
       ELSE 
        CALL GETLST(ICORE(I020),1,1,1,1,90)
        CALL GETLST(ICORE(I030),1,1,1,1+IUHF,90)
        CALL FTAU  (ICORE(I000),ICORE(I020),ICORE(I030),NUMAB,
     &              NUMIJ,POP(1,1),POP(1,2),VRT(1,1),
     &              VRT(1,2),IRREP,3,ONE)
       ENDIF
      ENDIF
      ABLAD=ABLAD+SDOT(NUMIJ*NUMAB,ICORE(I000),1,ICORE(IOFFT2MO),1)
      IOFFT2MX=IOFFT2MX+NUMAO*NUMIJ*IINTFP
      IOFFT2MO=IOFFT2MO+NUMAB*NUMIJ*IINTFP
      IOFXT2MO=IOFXT2MO+NUMABX*NUMIJ*IINTFP
5     CONTINUE
CSSS      WRITE(6,5005)SPLAB(ISPIN),ABLAD
CSSS5005  FORMAT(T3,'W(abef) ',A2,' contribution =',F14.10,' a.u.')
c
      RETURN
      END
