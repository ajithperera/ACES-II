      SUBROUTINE W4AB2(ICORE,MAXCOR,IUHF,TERM1,TERM2,TERM3,TAU)
c     &                 IOFFLIST)
C
C THIS ROUTINE CALCULATES THREE OF THE FIVE CONTRACTIONS WHICH 
C  CONTRIBUTE TO THE W(iFmN) INTERMEDIATE WHICH IS USED IN CCSD
C  GRADIENTS AND CCSDT MODELS FOR AAAA AND BBBB SPIN CASES.  
C
C  FIRST CONTRACTION:
C           Z(IfMn) = - SUM T1(f,o) * W (IoMn)
C  SECOND CONTRACTION:
C           Z(IfMn) = T2(Ef,Mn) * F(IE)
C  THIRD CONTRACTION
C           Z(IfMn) = TAU(Eg,Mn) <If|Eg>
C
C  THE REMAINING CONTRACTIONS ARE DONE BEFORE THIS ROUTINE IS
C   CALLED AND THE TARGET LIST CONTAINS THEM ON ENTRY. 
C
CEND
      IMPLICIT INTEGER (A-Z)
      DOUBLE PRECISION ONE,ONEM,ZILCH,ALPHA,BETA
      LOGICAL INCORE,RHF,TERM1,TERM2,TERM3,TAU
      DIMENSION ICORE(MAXCOR),IOFFT1(8,2)
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /SYMINF/ NSTART,NIRREP,IRREPS(255,2),DIRPRD(8,8)
      COMMON /SYM/ POP(8,2),VRT(8,2),NT(2),NFMI(2),NFEA(2)
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),ID(18)
      DATA ONE   /1.0/
      DATA ONEM  /-1.0/
      DATA ZILCH /0.0/
      RHF=.TRUE.
      IF(IUHF.NE.0)RHF=.FALSE.
 
      iofflist = 0
 
      CALL GETT1(ICORE,MAXCOR,MXCOR,IUHF,IOFFT1)
      IBOT=1
      BETA=ONE
      LSTTAR=110+IOFFLIST
      DO 20 IRREPDO=1,NIRREP
       TARDSZ=IRPDPD(IRREPDO,ISYTYP(1,10))
       TARDIS=IRPDPD(IRREPDO,ISYTYP(2,10))
       TARSIZ=TARDSZ*TARDIS
       LISTW =53
       WDSZ=IRPDPD(IRREPDO,ISYTYP(1,LISTW))
       WDIS=WDSZ
       ALPHA=ONEM
       CALL IZERO(ICORE,IINTFP*TARSIZ)
       I000=1
       I010=I000+IINTFP*TARSIZ
       IF(TERM1)THEN
C
C FIRST CONTRACTION: 
C                                
C           Z(IfMn) = SUM T2(Ef,Mn) * F(IE)
C                      e
       ALPHA=ONE
       LISTT2=46
       NT2DSZ=IRPDPD(IRREPDO,ISYTYP(1,LISTT2))
       NT2DIS=IRPDPD(IRREPDO,ISYTYP(2,LISTT2))
       I020=I010+IINTFP*NT2DSZ*NT2DIS
       I030=I020+IINTFP*NT2DSZ
       CALL GETTRN(ICORE(I010),ICORE(I020),NT2DSZ,NT2DIS,1,IRREPDO,
     &             LISTT2)
C
C REDEFINE DISTRIBUTION SIZE AND NUMBER OF DISTRIBUTIONS
C
       ITMP=NT2DIS
       NT2DIS=NT2DSZ
       NT2DSZ=ITMP
C
C WE NOW HAVE T(Mn,Ef) IN CORE.
C NOW TRANSPOSE KET INDICES TO FORM T(Mn,fE)
C
       I030=I020+IINTFP*NT2DSZ
       I040=I030+IINTFP*NT2DSZ
       I050=I040+IINTFP*NT2DSZ
       CALL SYMTR1(IRREPDO,VRT(1,1),VRT(1,2),NT2DSZ,ICORE(I010),
     &             ICORE(I020),ICORE(I030),ICORE(I040))
C
C
C
C EVALUATE V CONTRIBUTION WITH THE MATRIX MULTIPLICATION
C                                          
C             Z(Mn,fI) = T(Mn,fE) * F(E,I)
C
       CALL GETLST(ICORE(I020),1,1,1,1,93)
       IOFFF =I020
       IOFFT2=I010
       IOFFZ =I000
       DO 430 IRREPE=1,NIRREP
        IRREPF=DIRPRD(IRREPE,IRREPDO)
        IRREPI=IRREPE
        NROWT2=NT2DSZ*VRT(IRREPF,2)
        NCOLT2=VRT(IRREPE,1)
        NROWZ =NROWT2
        NCOLZ =POP(IRREPI,1)
        NROWF =NCOLT2
        NCOLF =NCOLZ
        IF(MIN(NROWZ,NCOLZ,NCOLT2).GT.0)THEN
         CALL XGEMM('N','N',NROWZ,NCOLZ,NCOLT2,ALPHA,ICORE(IOFFT2),
     &               NROWT2,ICORE(IOFFF),NROWF,BETA,ICORE(IOFFZ),
     &               NROWZ)
        ENDIF
        IOFFF =IOFFF+IINTFP*NROWF*NCOLF
        IOFFT2=IOFFT2+IINTFP*NROWT2*NCOLT2
        IOFFZ =IOFFZ+IINTFP*NROWZ*NCOLZ
430    CONTINUE
       ENDIF
C
C NOW REARRANGE THIS SO THAT IT IS ORDERED IN THE SAME WAY AS THE NEXT 
C  TWO TERMS  (THIS ORDERING [Mn,If] IS THE SAME AS THE TARGET LIST, SO
C  NO ADDITIONAL MANIPULATIONS WILL BE NEEDED)
C
C                  Z(Mn,fI) -> Z(Mn,If)
C
       I020=I010+IINTFP*TARDSZ
       I030=I020+IINTFP*TARDSZ
       I040=I030+IINTFP*TARDSZ
       CALL SYMTR1(IRREPDO,VRT(1,2),POP(1,1),TARDSZ,ICORE(I000),
     &             ICORE(I010),ICORE(I020),ICORE(I030))
       IF(TERM2)THEN
C
C SECOND CONTRACTION: 
C                                
C           Z(IfMn) = - T1(f,o) * W (IoMn)
C
C READ THE INTEGRALS INTO AN I(Mn,Io) MATRIX
C
       ALPHA=ONEM
       I020=I010+IINTFP*WDSZ*WDIS
       I030=I020+IINTFP*WDSZ
       CALL GETLST(ICORE(I010),1,WDIS,2,IRREPDO,LISTW)
       CALL MTRAN2(ICORE(I010),WDIS)
C
C EVALUATE V CONTRIBUTION WITH THE MATRIX MULTIPLICATION
C                                           +
C             Z(Mn,If) = - W(Mn,Io) * T(o,f)
C
       IOFFZ=I000
       IOFFW=I010
       DO 330 IRREPO=1,NIRREP
        IRREPI=DIRPRD(IRREPO,IRREPDO)
        IRREPF=IRREPO
        NROWZ=WDSZ*POP(IRREPI,1)
        NCOLZ=VRT(IRREPF,2)
        NROWW=NROWZ
        NCOLW=POP(IRREPO,2)
        NROWT=VRT(IRREPF,2)
        NCOLT=NCOLW
        IOFFT=IOFFT1(IRREPO,2)
        IF(MIN(NROWZ,NCOLZ,NCOLW).GT.0)THEN
         CALL XGEMM('N','T',NROWZ,NCOLZ,NCOLW,ALPHA,ICORE(IOFFW),
     &              NROWW,ICORE(IOFFT),NROWT,BETA,ICORE(IOFFZ),
     &              NROWZ)
        ENDIF
        IOFFW=IOFFW+IINTFP*NROWW*NCOLW
        IOFFZ=IOFFZ+IINTFP*NROWZ*NCOLZ
330    CONTINUE
       ENDIF
C
C THIRD AND FINAL TERM (N**6 DEPENDENCE)
C                                
C           Z(IfMn) = TAU(Eg,Mn) <If|Eg>
C
       IF(TERM3)THEN
       ALPHA=ONE
       LSTINT=30-IUHF
       LISTT2=46
       INTDSZ=IRPDPD(IRREPDO,ISYTYP(1,LSTINT))
       INTDIS=IRPDPD(IRREPDO,ISYTYP(2,LSTINT))
       TAUDSZ=IRPDPD(IRREPDO,ISYTYP(1,LISTT2))
       TAUDIS=IRPDPD(IRREPDO,ISYTYP(2,LISTT2))
       I020=I010+IINTFP*TAUDSZ*TAUDIS
       CALL GETLST(ICORE(I010),1,TAUDIS,1,IRREPDO,LISTT2)
       IF(TAU)THEN
        CALL FTAU(ICORE(I010),ICORE(IOFFT1(1,1)),ICORE(IOFFT1(1,2)),
     &            TAUDSZ,TAUDIS,POP(1,1),POP(1,2),VRT(1,1),
     &            VRT(1,2),IRREPDO,3,ONE)
       ENDIF
C
C DO GENERAL ALGORITHM ALLOWING OUT OR IN-CORE SOLUTIONS
C
       IF(RHF)THEN
        MAXINT=MAX(INTDIS,INTDSZ,TARDSZ,TARDIS)
        ITMP1=I020
        ITMP2=ITMP1+IINTFP*MAXINT
        ITMP3=ITMP2+IINTFP*MAXINT
        ITOP =ITMP3+IINTFP*MAXINT
       ELSE
        ITOP =I020
       ENDIF
       IF(RHF)THEN
C
C Z(Mn,If) -> Z(Mn,fI)
C
        CALL SYMTR1(IRREPDO,POP(1,1),VRT(1,2),TARDSZ,ICORE(I000),
     &              ICORE(ITMP1),ICORE(ITMP2),ICORE(ITMP3))
       ENDIF
       MXCOR2=MXCOR-ITOP+1
       IF(INTDSZ.EQ.0)THEN
        NINCOR=INTDIS
       ELSE
        NINCOR=MXCOR2/(IINTFP*INTDSZ)
       ENDIF
       NLEFT=INTDIS
       IFIRST=1
       IOFFZ=I000
2      NREAD=MIN(NINCOR,NLEFT)
C
C PICK UP THE INTEGRALS AS AN I(Eg,If) [OR I(Eg,Fi) = I(gE,fI) FOR RHF] MATRIX
C
       CALL GETLST(ICORE(ITOP),IFIRST,NREAD,1,IRREPDO,LSTINT)
C
C IF RHF, HAVE TO TRANSPOSE BRA INDICES
C
        IF(RHF)THEN
         CALL SYMTR3(IRREPDO,VRT(1,1),VRT(1,2),INTDSZ,NREAD,ICORE(ITOP),
     &               ICORE(ITMP1),ICORE(ITMP2),ICORE(ITMP3))
        ENDIF
C                               +
C          Z(Nm,fI) = TAU(Eg,Mn) * W(Eg,fI)
C
        CALL XGEMM('T','N',TARDSZ,NREAD,INTDSZ,ALPHA,ICORE(I010),
     &             INTDSZ,ICORE(ITOP),INTDSZ,BETA,ICORE(IOFFZ),TARDSZ)
        NLEFT=NLEFT-NREAD
        IFIRST=IFIRST+NREAD
        IOFFZ=IOFFZ+IINTFP*TARDSZ*NREAD
        IF(NLEFT.NE.0)GOTO 2
        IF(RHF)THEN
         CALL SYMTR1(IRREPDO,VRT(1,2),POP(1,1),TARDSZ,ICORE(I000),
     &               ICORE(ITMP1),ICORE(ITMP2),ICORE(ITMP3))
        ENDIF
       ENDIF
C
C FINALLY, INCREMENT THE TARGET LIST WITH Z(Nm,Fi) AND LEAVE.
C
       I020=I010+IINTFP*TARDSZ*TARDIS
       CALL GETLST(ICORE(I010),1,TARDIS,2,IRREPDO,LSTTAR)
       CALL SAXPY(TARSIZ,ONE,ICORE(I010),1,ICORE(I000),1)
       CALL PUTLST(ICORE(I000),1,TARDIS,2,IRREPDO,LSTTAR)
20    CONTINUE
      RETURN
      END
