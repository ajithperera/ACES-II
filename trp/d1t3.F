
#define _DO_T2IJ
#define _DO_T2KJ
#define _DO_T2KI
#define _DO_T2IK
#define _DO_T2JK
#define _DO_HHIJ
#define _DO_GSKJ
#define _DO_GSKI
#define _DO_GSJK
#define _DO_GSIK

      SUBROUTINE D1T3(T3,W,
     1                T2IJBB,T2BAJK,T2BAIK,
     1                VIJBB,VJKBA,VIKBA,VJKBA2,VIKBA2,
     1                 ICORE,IUHF,
     1                 IADBLK,LENBLK,IADW,LENW,IADT2,LENT2,IADV,LENV,
     1                 I,J,K,IRPI,IRPJ,IRPK,IRPIJ,IRPJK,IRPIK,IRPIJK,
     1                 LNVVIJ,LNVVJK,LNVVIK,
     1                 LNVOIJ,LNVOJK,LNVOIK,LNOVJK,LNOVIK,
     1                 SCR1,SCR2,SCR3,LAMBDA)
      IMPLICIT INTEGER (A-Z)
      LOGICAL LAMBDA
      DOUBLE PRECISION TOL
      DOUBLE PRECISION T2IJBB(LNVVIJ,1),
     1                 T2BAJK(LNVVJK,1),T2BAIK(LNVVIK,1)
      DOUBLE PRECISION  VIJBB(LNVOIJ,1),
     1                  VJKBA(LNVOJK,1),
     1                  VIKBA(LNVOIK,1)
      DOUBLE PRECISION VJKBA2(LNOVJK,1),
     1                 VIKBA2(LNOVIK,1)
C
      DOUBLE PRECISION T3(1),W(1)
      DOUBLE PRECISION ICORE(1)
      DOUBLE PRECISION SCR1(1),SCR2(1),SCR3(1)
      DIMENSION IADBLK(8),LENBLK(8)
      DIMENSION IADW(8)  ,LENW(8)
      DIMENSION IADT2(8) ,LENT2(8),
     1          IADV(8)  ,LENV(8)
C
C     LOCAL ARRAYS
C
      DIMENSION IADVT(8),IADTT(8)
C
C     END OF LOCAL ARRAYS
C
      COMMON /MACHSP/ IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON /SYMINF/ NSTART,NIRREP,IRREPA(255),IRREPB(255),
     1                DIRPRD(8,8)
      COMMON /SYMPOP/ IRPDPD(8,22),ISYTYP(2,500),ID(18)
      COMMON /SYM/    POP(8,2),VRT(8,2),NTAA,NTBB,NF1AA,NF2AA,
     1                NF1BB,NF2BB
      COMMON /INFO/   NOCCO(2),NVRTO(2)
C
      COMMON /T3OFF/  IOFFVV(8,8,10),IOFFOO(8,8,10),IOFFVO(8,8,4)
C
      COMMON /LISWI/  LWIC11,LWIC12,LWIC13,LWIC14,
     1                LWIC15,LWIC16,LWIC17,LWIC18,
     1                LWIC21,LWIC22,LWIC23,LWIC24,
     1                LWIC25,LWIC26,LWIC27,LWIC28,
     1                LWIC31,LWIC32,LWIC33,
     1                LWIC34,LWIC35,LWIC36,
     1                LWIC37,LWIC38,LWIC39,LWIC40,LWIC41,LWIC42
C
C
      INDEX(I) = I*(I-1)/2
C     List offset
      IF (LAMBDA) THEN
         LISTOFF=100
      ELSE
         LISTOFF=0
      ENDIF
      TOL = 1.0D-12
C
      LISWVA = LWIC15
      LISWVB = LWIC16
      LISWVC = LWIC17
      LISWVD = LWIC18
C
      LISWOA = LWIC11
      LISWOB = LWIC12
      LISWOC = LWIC13
      LISWOD = LWIC14
C
C      JTEST = 1
C      IF(JTEST.NE.0) GOTO 9999
C
C      AE                BE
C     T   <CB//KE>  -   T   <CA//KE>
C      IJ                IJ
C
C      BB  AB  AB        BB  AB  AB
C      BB                BB
C
      DO   10 IRREP=1,NIRREP
      LENT2(IRREP) = VRT(IRREP,2) * VRT(DIRPRD(IRREP,IRPIJ),2)
      IF(IRREP.EQ.1)THEN
      IADT2(IRREP) = 1
      ELSE
      IADT2(IRREP) = IADT2(IRREP-1) + 
     1               VRT(IRREP-1,2) * 
     1               VRT(DIRPRD(IRREP-1,IRPIJ),2)
      ENDIF
   10 CONTINUE
C
C     SET ADDRESSES, READ, AND TRANSPOSE V
C
      IOFFV = 1
      DO   20 IRPE=1,NIRREP
      IRPBC = DIRPRD(IRPE,IRPK)
      LENV(IRPE) = IRPDPD(IRPBC,13) * VRT(IRPE,2)
      IF(IRPE.EQ.1)THEN
      IADV(IRPE) = IOFFV
      ELSE
      IADV(IRPE) = IADV(IRPE-1) + LENV(IRPE-1)
      ENDIF
   20 CONTINUE
C
      DO   40 IRPE=1,NIRREP
      IF(VRT(IRPE,2).EQ.0) GOTO 40
      IRPEK = DIRPRD(IRPE,IRPK)
      IRPBC = IRPEK
C      DO   30    E=1,VRT(IRPE,2)
C      CALL GETLST(ICORE(IADV(IRPE)+(E-1)*IRPDPD(IRPBC,13)),
C     1            IOFFVO(IRPE,IRPEK,3)+(E-1)*POP(IRPK,1)+K,
C     1            1,2,IRPEK,29)
C   30 CONTINUE
      CALL GETLST(ICORE(IADV(IRPE)),
     1            IOFFVO(IRPK,IRPEK,3) + (K-1)*VRT(IRPE,2) + 1,
     1            VRT(IRPE,2),2,IRPEK,LISWVC)
C    1            VRT(IRPE,2),2,IRPEK,29)
   40 CONTINUE
C
C     SYMTR3 IS NOT NEEDED IF SYM2930 WORKS (WOULDN'T THAT BE GREAT)
C
C                           A B B         B A B
C     THE V MATRIX HERE IS (C,B,E). FORM (B,C,E). SYMTR3 DOES AN IN PLACE
C     TRANSPOSITION.
C
C      DO   50 IRPE = 1,NIRREP
C      IRPEK = DIRPRD(IRPE,IRPK)
C      IRPBC = IRPEK
C      CALL SYMTR3(IRPBC,VRT(1,1),VRT(1,2),IRPDPD(IRPBC,13),VRT(IRPE,2),
C     1            ICORE(IADV(IRPE)),
C     1            SCR1,SCR2,SCR3)
C   50 CONTINUE
C                                        BA B            B BA
C     AT THIS POINT V MATRIX IS ORDERED (BC,E). WE NEED (E,BC).
C     DO A TRANSPOSITION WHICH CANNOT BE IN PLACE.
C
      IOFFVT = IADV(NIRREP) + LENV(NIRREP)
C
C     FOR THE TIME BEING LABEL BLOCKS OF TRANSPOSE BY IRREP OF E.
C
      DO   60 IRREP=1,NIRREP
      IF(IRREP.EQ.1)THEN
      IADVT(IRREP) = IOFFVT
      ELSE
      IADVT(IRREP) = IADVT(IRREP-1) + LENV(IRREP-1)
      ENDIF
   60 CONTINUE
C
C     NOW TRANSPOSE EACH BLOCK. HIGH-TECH STUFF !
C
CJ      DO   70 IRPE=1,NIRREP
CJ      IRPBC = DIRPRD(IRPE,IRPK)
CJ      CALL TRANSP(ICORE(IADV(IRPE)),ICORE(IADVT(IRPE)),
CJ     1            VRT(IRPE,2),IRPDPD(IRPBC,13))
CJ   70 CONTINUE
C
C     LOOP OVER SYMMETRY BLOCKS OF E. FOR EACH SYMMETRY BLOCK
C     DETERMINE WHICH BLOCKS OF A AND BC WILL BE COMPUTED AND
C     COMPUTE THEM.
C
      IF(IRPI.EQ.IRPJ)THEN
      IJ = INDEX(J-1) + I
      ELSE
      IJ = (J-1)*POP(IRPI,2) + I
      ENDIF
C
      DO   80 IRPE=1,NIRREP
C
      IRPA   = DIRPRD(IRPE,IRPIJ)
      IRPBC  = DIRPRD(IRPE,IRPK)
      IRPEK  = IRPBC
C
#ifdef _DO_T2IJ
      CALL XGEMM('N','T',VRT(IRPA,2),IRPDPD(IRPBC,13),VRT(IRPE,2),
     1            1.0D+00,
     1           T2IJBB(IADT2(IRPE),IJ),VRT(IRPA,2),
     1           ICORE(IADV(IRPE)),IRPDPD(IRPBC,13),
     1            0.0D+00,
     1           W(IADW(IRPBC)),VRT(IRPA,2))
#endif
   80 CONTINUE
 9999 CONTINUE
C
C
C        EA                EB
C     - T   <CB//EI>   +  T   <CA//EI>
C        KJ                KJ
C
C        AB  AB  AB        AB  AB  AB
C        AB                AB
C
      DO  110 IRPE=1,NIRREP
      LENT2(IRPE) = VRT(IRPE,1) * VRT(DIRPRD(IRPE,IRPJK),2)
      IF(IRPE.EQ.1)THEN
      IADT2(IRPE) = 1
      ELSE
      IADT2(IRPE) = IADT2(IRPE-1) + 
     1               VRT(IRPE-1,1) * 
     1               VRT(DIRPRD(IRPE-1,IRPJK),2)
      ENDIF
  110 CONTINUE
C
C     SET ADDRESSES, READ, AND TRANSPOSE V
C
      IOFFV = 1
      DO  120 IRPE=1,NIRREP
      IRPBC = DIRPRD(IRPE,IRPI)
      LENV(IRPE) = IRPDPD(IRPBC,13) * VRT(IRPE,1)
      IF(IRPE.EQ.1)THEN
      IADV(IRPE) = IOFFV
      ELSE
      IADV(IRPE) = IADV(IRPE-1) + LENV(IRPE-1)
      ENDIF
  120 CONTINUE
C
      DO  140 IRPE=1,NIRREP
      IF(VRT(IRPE,1).EQ.0) GOTO 140
      IRPEI = DIRPRD(IRPE,IRPI)
      CALL GETLST(ICORE(IADV(IRPE)),
     1            IOFFVO(IRPI,IRPEI,4) + (I-1)*VRT(IRPE,1) + 1,
     1            VRT(IRPE,1),2,IRPEI,LISWVD)
C    1            VRT(IRPE,1),2,IRPEI,30)
  140 CONTINUE
C
C     IF SYM2930 WORKS, WE DO NOT NEED SYMTR3
C
C                           A B A         B A A
C     THE V MATRIX HERE IS (C,B,E). FORM (B,C,E). SYMTR3 DOES AN IN PLACE
C     TRANSPOSITION.
C
C      DO  150 IRPE = 1,NIRREP
C      IRPEI = DIRPRD(IRPE,IRPI)
C      IRPBC = IRPEI
C      CALL SYMTR3(IRPBC,VRT(1,1),VRT(1,2),IRPDPD(IRPBC,13),VRT(IRPE,1),
C     1            ICORE(IADV(IRPE)),
C     1            SCR1,SCR2,SCR3)
C  150 CONTINUE
C
C     AT THIS POINT V MATRIX IS ORDERED (BC,E). WE NEED (E,BC).
C     DO A TRANSPOSITION WHICH CANNOT BE IN PLACE.
C
      IOFFVT = IADV(NIRREP) + LENV(NIRREP)
C
C     FOR THE TIME BEING LABEL BLOCKS OF TRANSPOSE BY IRREP OF E.
C
      DO  160 IRREP=1,NIRREP
      IF(IRREP.EQ.1)THEN
      IADVT(IRREP) = IOFFVT
      ELSE
      IADVT(IRREP) = IADVT(IRREP-1) + LENV(IRREP-1)
      ENDIF
  160 CONTINUE
C
C     NOW TRANSPOSE EACH BLOCK. HIGH-TECH STUFF !
C
CJ      DO  170 IRPE=1,NIRREP
CJ      IRPBC = DIRPRD(IRPE,IRPI)
CJ      CALL TRANSP(ICORE(IADV(IRPE)),ICORE(IADVT(IRPE)),
CJ     1            VRT(IRPE,1),IRPDPD(IRPBC,13))
CJ  170 CONTINUE
C
C     LOOP OVER SYMMETRY BLOCKS OF E. FOR EACH SYMMETRY BLOCK
C     DETERMINE WHICH BLOCKS OF A AND BC WILL BE COMPUTED AND
C     COMPUTE THEM.
C
      DO  180 IRPE=1,NIRREP
C
      IRPA   = DIRPRD(IRPE,IRPJK)
      IRPBC  = DIRPRD(IRPE,IRPI)
      IRPEI  = IRPBC
#ifdef _DO_T2KJ
      CALL XGEMM('N','T',VRT(IRPA,2),IRPDPD(IRPBC,13),VRT(IRPE,1),
     1           -1.0D+00,
     1           T2BAJK(IADT2(IRPE),(J-1)*POP(IRPK,1)+K),VRT(IRPA,2),
     1           ICORE(IADV(IRPE)),IRPDPD(IRPBC,13),
     1            1.0D+00,
     1           W(IADW(IRPBC)),VRT(IRPA,2))
#endif
C
  180 CONTINUE
C
C
C      EA                 EB
C     T   <CB//EJ>   -   T   <CA//EJ>
C      KI                 KI
C
C      AB  AB  AB         AB  AB  AB
C      AB                 AB
C
      DO  210 IRPE=1,NIRREP
      LENT2(IRPE) = VRT(IRPE,1) * VRT(DIRPRD(IRPE,IRPIK),2)
      IF(IRPE.EQ.1)THEN
      IADT2(IRPE) = 1
      ELSE
      IADT2(IRPE) = IADT2(IRPE-1) + 
     1               VRT(IRPE-1,1) * 
     1               VRT(DIRPRD(IRPE-1,IRPIK),2)
      ENDIF
  210 CONTINUE
C
C     SET ADDRESSES, READ, AND TRANSPOSE V
C
      IOFFV = 1
      DO  220 IRPE=1,NIRREP
      IRPBC = DIRPRD(IRPE,IRPJ)
      LENV(IRPE) = IRPDPD(IRPBC,13) * VRT(IRPE,1)
      IF(IRPE.EQ.1)THEN
      IADV(IRPE) = IOFFV
      ELSE
      IADV(IRPE) = IADV(IRPE-1) + LENV(IRPE-1)
      ENDIF
  220 CONTINUE
C
      DO  240 IRPE=1,NIRREP
      IF(VRT(IRPE,1).EQ.0) GOTO 240
      IRPEJ = DIRPRD(IRPE,IRPJ)
      CALL GETLST(ICORE(IADV(IRPE)),
     1            IOFFVO(IRPJ,IRPEJ,4) + (J-1)*VRT(IRPE,1) + 1,
     1            VRT(IRPE,1),2,IRPEJ,LISWVD)
C    1            VRT(IRPE,1),2,IRPEJ,30)
  240 CONTINUE
C
C     IF SYM2930 WORKS, WE DO NOT NEED SYMTR3 HERE
C
C                           A B B         B A B
C     THE V MATRIX HERE IS (C,B,E). FORM (B,C,E). SYMTR3 DOES AN IN PLACE
C     TRANSPOSITION.
C
C      DO  250 IRPE = 1,NIRREP
C      IRPEJ = DIRPRD(IRPE,IRPJ)
C      IRPBC = IRPEJ
C      CALL SYMTR3(IRPBC,VRT(1,1),VRT(1,2),IRPDPD(IRPBC,13),VRT(IRPE,1),
C     1            ICORE(IADV(IRPE)),
C     1            SCR1,SCR2,SCR3)
C  250 CONTINUE
C
C     AT THIS POINT V MATRIX IS ORDERED (BC,E). WE NEED (E,BC).
C     DO A TRANSPOSITION WHICH CANNOT BE IN PLACE.
C
      IOFFVT = IADV(NIRREP) + LENV(NIRREP)
C
C     FOR THE TIME BEING LABEL BLOCKS OF TRANSPOSE BY IRREP OF E.
C
      DO  260 IRREP=1,NIRREP
      IF(IRREP.EQ.1)THEN
      IADVT(IRREP) = IOFFVT
      ELSE
      IADVT(IRREP) = IADVT(IRREP-1) + LENV(IRREP-1)
      ENDIF
  260 CONTINUE
C
C     NOW TRANSPOSE EACH BLOCK. HIGH-TECH STUFF !
C
CJ      DO  270 IRPE=1,NIRREP
CJ      IRPBC = DIRPRD(IRPE,IRPJ)
CJ      CALL TRANSP(ICORE(IADV(IRPE)),ICORE(IADVT(IRPE)),
CJ     1            VRT(IRPE,1),IRPDPD(IRPBC,13))
CJ  270 CONTINUE
C
C     LOOP OVER SYMMETRY BLOCKS OF E. FOR EACH SYMMETRY BLOCK
C     DETERMINE WHICH BLOCKS OF A AND BC WILL BE COMPUTED AND
C     COMPUTE THEM.
C
      DO  280 IRPE=1,NIRREP
C
      IRPA   = DIRPRD(IRPE,IRPIK)
      IRPBC  = DIRPRD(IRPE,IRPJ)
      IRPEJ  = IRPBC
#ifdef _DO_T2KI
      CALL XGEMM('N','T',VRT(IRPA,2),IRPDPD(IRPBC,13),VRT(IRPE,1),
     1            1.0D+00,
     1           T2BAIK(IADT2(IRPE),(I-1)*POP(IRPK,1)+K),VRT(IRPA,2),
     1           ICORE(IADV(IRPE)),IRPDPD(IRPBC,13),
     1            1.0D+00,
     1           W(IADW(IRPBC)),VRT(IRPA,2))
#endif
  280 CONTINUE
C
C
C               CE
C     <AB//EJ> T
C               KI
C
C      BB  BB   AB
C               AB
C
      DO  310 IRREP=1,NIRREP
      LENT2(IRREP) = VRT(IRREP,1) * VRT(DIRPRD(IRREP,IRPIK),2)
      IF(IRREP.EQ.1)THEN
      IADT2(IRREP) = 1
      ELSE
      IADT2(IRREP) = IADT2(IRREP-1) + 
     1               VRT(IRREP-1,1) * 
     1               VRT(DIRPRD(IRREP-1,IRPIK),2)
      ENDIF
  310 CONTINUE
C
C     SET ADDRESSES ETC FOR V
C
      IOFFV = 1
      DO  320 IRPE=1,NIRREP
      IRPAB = DIRPRD(IRPE,IRPJ)
      LENV(IRPE) = IRPDPD(IRPAB,2) * VRT(IRPE,2)
      IF(IRPE.EQ.1)THEN
      IADV(IRPE) = IOFFV
      ELSE
      IADV(IRPE) = IADV(IRPE-1) + LENV(IRPE-1)
      ENDIF
  320 CONTINUE
C
      DO  330 IRPE=1,NIRREP
      IRPEJ = DIRPRD(IRPE,IRPJ)
      CALL GETLST(ICORE(IADV(IRPE)),
     1            IOFFVO(IRPJ,IRPEJ,2) + (J-1)*VRT(IRPE,2) + 1,
     1            VRT(IRPE,2),2,IRPEJ,LISWVB)
C    1            VRT(IRPE,2),2,IRPEJ,28)
  330 CONTINUE
C
C     AT THIS POINT V MATRIX IS ORDERED (AB,E). THERE AIN'T NO NEED TO
C     TRANSPOSE. YIPPEE !
C
C     LOOP OVER SYMMETRY BLOCKS OF E. FOR EACH SYMMETRY BLOCK
C     DETERMINE WHICH BLOCKS OF C AND AB WILL BE COMPUTED AND
C     COMPUTE THEM.
C
      DO  380 IRPE=1,NIRREP
C
      IRPC   = DIRPRD(IRPE,IRPIK)
      IRPAB  = DIRPRD(IRPE,IRPJ)
      IRPEJ  = IRPAB
#ifdef _DO_T2IK
      CALL XGEMM('N','N',IRPDPD(IRPAB,2),VRT(IRPC,1),VRT(IRPE,2),
     1            1.0D+00,
     1            ICORE(IADV(IRPE)),IRPDPD(IRPAB,2),
     1            T2BAIK(IADT2(IRPC),(I-1)*POP(IRPK,1)+K),VRT(IRPE,2),
     1            0.0D+00,T3(IADBLK(IRPC)),IRPDPD(IRPAB,2))
#endif
  380 CONTINUE
C
C               CE
C   - <AB//EI> T
C               KJ
C
C      BB  BB   AB
C               AB
C
      DO  410 IRREP=1,NIRREP
      LENT2(IRREP) = VRT(IRREP,1) * VRT(DIRPRD(IRREP,IRPJK),2)
      IF(IRREP.EQ.1)THEN
      IADT2(IRREP) = 1
      ELSE
      IADT2(IRREP) = IADT2(IRREP-1) + 
     1               VRT(IRREP-1,1) * 
     1               VRT(DIRPRD(IRREP-1,IRPJK),2)
      ENDIF
  410 CONTINUE
C
C     SET ADDRESSES ETC FOR V
C
      IOFFV = 1
      DO  420 IRPE=1,NIRREP
      IRPAB = DIRPRD(IRPE,IRPI)
      LENV(IRPE) = IRPDPD(IRPAB,2) * VRT(IRPE,2)
      IF(IRPE.EQ.1)THEN
      IADV(IRPE) = IOFFV
      ELSE
      IADV(IRPE) = IADV(IRPE-1) + LENV(IRPE-1)
      ENDIF
  420 CONTINUE
C
      DO  430 IRPE=1,NIRREP
      IRPEI = DIRPRD(IRPE,IRPI)
      CALL GETLST(ICORE(IADV(IRPE)),
     1            IOFFVO(IRPI,IRPEI,2) + (I-1)*VRT(IRPE,2) + 1,
     1            VRT(IRPE,2),2,IRPEI,LISWVB)
C    1            VRT(IRPE,2),2,IRPEI,28)
  430 CONTINUE
C
C     AT THIS POINT V MATRIX IS ORDERED (AB,E). THERE AIN'T NO NEED TO
C     TRANSPOSE. YIPPEE !
C
C     LOOP OVER SYMMETRY BLOCKS OF E. FOR EACH SYMMETRY BLOCK
C     DETERMINE WHICH BLOCKS OF C AND AB WILL BE COMPUTED AND
C     COMPUTE THEM.
C
      DO  480 IRPE=1,NIRREP
C
      IRPC   = DIRPRD(IRPE,IRPJK)
      IRPAB  = DIRPRD(IRPE,IRPI)
      IRPEI  = IRPAB
#ifdef _DO_T2JK
      CALL XGEMM('N','N',IRPDPD(IRPAB,2),VRT(IRPC,1),VRT(IRPE,2),
     1           -1.0D+00,
     1            ICORE(IADV(IRPE)),IRPDPD(IRPAB,2),
     1            T2BAJK(IADT2(IRPC),(J-1)*POP(IRPK,1)+K),VRT(IRPE,2),
     1            1.0D+00,T3(IADBLK(IRPC)),IRPDPD(IRPAB,2))
#endif
  480 CONTINUE
C
C      ITEST = 1
C      IF(ITEST.NE.0) RETURN
C
C               CB               CA
C     <IJ//MA> T    -  <IJ//MB> T
C               KM               KM
C
C      BB  BB   AB      BB  BB   AB
C               AB               AB
C
C
C     because we have used symtr3, the integrals are now 
C     labelled by irpm
C
      DO  510 IRREP=1,NIRREP
      LENV(IRREP) = VRT(DIRPRD(IRREP,IRPIJ),2) * POP(IRREP,2)
      IF(IRREP.EQ.1)THEN
      IADV(IRREP) = 1
      ELSE
      IADV(IRREP) = IADV(IRREP-1) + LENV(IRREP-1)
      ENDIF
  510 CONTINUE
C
C     SET ADDRESSES ETC FOR T
C
      IOFFT2 = 1
      DO  520 IRPM=1,NIRREP
      IRPBC = DIRPRD(IRPM,IRPK)
      LENT2(IRPM) = IRPDPD(IRPBC,13) * POP(IRPM,2)
      IF(IRPM.EQ.1)THEN
      IADT2(IRPM) = IOFFT2
      ELSE
      IADT2(IRPM) = IADT2(IRPM-1) + LENT2(IRPM-1)
      ENDIF
  520 CONTINUE
C
      DO  540 IRPM=1,NIRREP
      IF(POP(IRPM,2).EQ.0) GOTO 540
      IRPMK = DIRPRD(IRPM,IRPK)
      DO  530    M=1,POP(IRPM,2)
      CALL GETLST(ICORE(IADT2(IRPM)+(M-1)*IRPDPD(IRPMK,13)),
     1            IOFFOO(IRPM,IRPMK,5) + (M-1)*POP(IRPK,1) + K,
     1            1,1,IRPMK,46+LISTOFF)
  530 CONTINUE
  540 CONTINUE
C                           A B B         B A B
C     THE T MATRIX HERE IS (C,B,M). FORM (B,C,M). SYMTR3 DOES AN IN PLACE
C     TRANSPOSITION.
C
CJ      DO  550 IRPM = 1,NIRREP
CJ      IF(POP(IRPM,2).EQ.0) GOTO 550
CJ      IRPMK = DIRPRD(IRPM,IRPK)
CJ      IRPBC = IRPMK
CJ      CALL SYMTR3(IRPBC,VRT(1,1),VRT(1,2),IRPDPD(IRPBC,13),POP(IRPM,2),
CJ     1            ICORE(IADT2(IRPM)),
CJ     1            SCR1,SCR2,SCR3)
CJ  550 CONTINUE
C
C     AT THIS POINT T MATRIX IS ORDERED (BC,M). WE NEED (M,BC).
C     DO A TRANSPOSITION WHICH CANNOT BE IN PLACE.
C
      IOFFTT = IADT2(NIRREP) + LENT2(NIRREP)
C
C     FOR THE TIME BEING LABEL BLOCKS OF TRANSPOSE BY IRREP OF M.
C
      DO  560 IRREP=1,NIRREP
      IF(IRREP.EQ.1)THEN
      IADTT(IRREP) = IOFFTT
      ELSE
      IADTT(IRREP) = IADTT(IRREP-1) + LENT2(IRREP-1)
      ENDIF
  560 CONTINUE
C
C     NOW TRANSPOSE EACH BLOCK.
C
CJ      DO  570 IRPM=1,NIRREP
CJ      IF(POP(IRPM,2).EQ.0) GOTO 570
CJ      IRPBC = DIRPRD(IRPM,IRPK)
CJ      CALL TRANSP(ICORE(IADT2(IRPM)),ICORE(IADTT(IRPM)),
CJ     1            POP(IRPM,2),IRPDPD(IRPBC,13))
CJ  570 CONTINUE
C
C     LOOP OVER SYMMETRY BLOCKS OF M. FOR EACH SYMMETRY BLOCK
C     DETERMINE WHICH BLOCKS OF A AND BC WILL BE COMPUTED AND
C     COMPUTE THEM.
C
      IF(IRPI.EQ.IRPJ)THEN
      IJ = INDEX(J-1) + I
      ELSE
      IJ = (J-1) * POP(IRPI,2) + I
      ENDIF
C
      DO  580 IRPM=1,NIRREP
C
      IF(POP(IRPM,2).EQ.0) GOTO 580
      IRPA   = DIRPRD(IRPM,IRPIJ)
      IRPBC  = DIRPRD(IRPM,IRPK)
      IRPMK  = IRPBC
#ifdef _DO_HHIJ
      CALL XGEMM('N','T',VRT(IRPA,2),IRPDPD(IRPBC,13),POP(IRPM,2),
     &           1.0D0,VIJBB(IADV(IRPM),IJ),VRT(IRPA,2),
     &                 ICORE(IADT2(IRPM)),  IRPDPD(IRPBC,13),
     &           1.0D0,W(IADW(IRPBC)),      VRT(IRPA,2))
#endif
  580 CONTINUE
C
C               CB               CA
C     <KJ//MA> T    -  <KJ//MB> T
C               MI               MI
C
C      AB  AB   AB      AB  AB   AB
C               AB               AB
C
C     MOST LOGICAL TO LABEL BLOCKS OF INTEGRALS AS IRPM
C
      DO  610 IRREP=1,NIRREP
      LENV(IRREP) = POP(IRREP,1) * VRT(DIRPRD(IRREP,IRPJK),2)
      IF(IRREP.EQ.1)THEN
      IADV(IRREP) = 1
      ELSE
      IADV(IRREP) = IADV(IRREP-1) + LENV(IRREP-1)
      ENDIF
  610 CONTINUE
C
C     SET ADDRESSES ETC FOR T
C
      IOFFT2 = 1
      DO  620 IRPM=1,NIRREP
      IRPBC = DIRPRD(IRPM,IRPI)
      LENT2(IRPM) = IRPDPD(IRPBC,13) * POP(IRPM,1)
      IF(IRPM.EQ.1)THEN
      IADT2(IRPM) = IOFFT2
      ELSE
      IADT2(IRPM) = IADT2(IRPM-1) + LENT2(IRPM-1)
      ENDIF
  620 CONTINUE
C
      DO  640 IRPM=1,NIRREP
      IF(POP(IRPM,1).EQ.0) GOTO 640
      IRPMI = DIRPRD(IRPM,IRPI)
      CALL GETLST(ICORE(IADT2(IRPM)),
     1            IOFFOO(IRPI,IRPMI,5) + (I-1)*POP(IRPM,1) + 1,
     1            POP(IRPM,1),1,IRPMI,46+LISTOFF)
  640 CONTINUE
C                           A B A         B A A
C     THE T MATRIX HERE IS (C,B,M). FORM (B,C,M). SYMTR3 DOES AN IN PLACE
C     TRANSPOSITION.
C
CJ      DO  650 IRPM = 1,NIRREP
CJ      IF(POP(IRPM,1).EQ.0) GOTO 650
CJ      IRPMI = DIRPRD(IRPM,IRPI)
CJ      IRPBC = IRPMI
CJ      CALL SYMTR3(IRPBC,VRT(1,1),VRT(1,2),IRPDPD(IRPBC,13),POP(IRPM,1),
CJ     1            ICORE(IADT2(IRPM)),
CJ     1            SCR1,SCR2,SCR3)
CJ  650 CONTINUE
C
C     AT THIS POINT T MATRIX IS ORDERED (BC,M). WE NEED (M,BC).
C     DO A TRANSPOSITION WHICH CANNOT BE IN PLACE.
C
      IOFFTT = IADT2(NIRREP) + LENT2(NIRREP)
C
      DO  660 IRREP=1,NIRREP
      IF(IRREP.EQ.1)THEN
      IADTT(IRREP) = IOFFTT
      ELSE
      IADTT(IRREP) = IADTT(IRREP-1) + LENT2(IRREP-1)
      ENDIF
  660 CONTINUE
C
CJ      DO  670 IRPM=1,NIRREP
CJ      IF(POP(IRPM,1).EQ.0) GOTO 670
CJ      IRPBC = DIRPRD(IRPM,IRPI)
CJ      CALL TRANSP(ICORE(IADT2(IRPM)),ICORE(IADTT(IRPM)),
CJ     1            POP(IRPM,1),IRPDPD(IRPBC,13))
CJ  670 CONTINUE
C
C     LOOP OVER SYMMETRY BLOCKS OF M. FOR EACH SYMMETRY BLOCK
C     DETERMINE WHICH BLOCKS OF A AND BC WILL BE COMPUTED AND
C     COMPUTE THEM.
C
      JK = (J-1)*POP(IRPK,1) + K
      DO  680 IRPM=1,NIRREP
C
      IF(POP(IRPM,1).EQ.0) GOTO 680
      IRPA   = DIRPRD(IRPM,IRPJK)
      IRPBC  = DIRPRD(IRPM,IRPI)
      IRPMI  = IRPBC
#ifdef _DO_GSKJ
      CALL XGEMM('N','T',VRT(IRPA,2),IRPDPD(IRPBC,13),POP(IRPM,1),
     1            1.0D+00,
     1           VJKBA(IADV(IRPM),JK),VRT(IRPA,2),
     1           ICORE(IADT2(IRPM)),IRPDPD(IRPBC,13),
     1            1.0D+00,
     1           W(IADW(IRPBC)),VRT(IRPA,2))
#endif
  680 CONTINUE
C
C                 CB               CA
C     - <KI//MA> T    +  <KI//MB> T
C                 MJ               MJ
C
C        AB  AB   AB      AB  AB   AB
C                 AB               AB
C
C     MOST LOGICAL TO LABEL BLOCKS OF INTEGRALS AS IRPM
C
      DO  710 IRREP=1,NIRREP
      LENV(IRREP) = POP(IRREP,1) * VRT(DIRPRD(IRREP,IRPIK),2)
      IF(IRREP.EQ.1)THEN
      IADV(IRREP) = 1
      ELSE
      IADV(IRREP) = IADV(IRREP-1) + LENV(IRREP-1)
      ENDIF
  710 CONTINUE
C
C     SET ADDRESSES ETC FOR T
C
      IOFFT2 = 1
      DO  720 IRPM=1,NIRREP
      IRPBC = DIRPRD(IRPM,IRPJ)
      LENT2(IRPM) = IRPDPD(IRPBC,13) * POP(IRPM,1)
      IF(IRPM.EQ.1)THEN
      IADT2(IRPM) = IOFFT2
      ELSE
      IADT2(IRPM) = IADT2(IRPM-1) + LENT2(IRPM-1)
      ENDIF
  720 CONTINUE
C
      DO  740 IRPM=1,NIRREP
      IF(POP(IRPM,1).EQ.0) GOTO 740
      IRPMJ = DIRPRD(IRPM,IRPJ)
      CALL GETLST(ICORE(IADT2(IRPM)),
     1            IOFFOO(IRPJ,IRPMJ,5) + (J-1)*POP(IRPM,1) + 1,
     1            POP(IRPM,1),1,IRPMJ,46+LISTOFF)
  740 CONTINUE
C                           A B A         B A A
C     THE T MATRIX HERE IS (C,B,M). FORM (B,C,M). SYMTR3 DOES AN IN PLACE
C     TRANSPOSITION.
C
CJ      DO  750 IRPM = 1,NIRREP
CJ      IF(POP(IRPM,1).EQ.0) GOTO 750
CJ      IRPMJ = DIRPRD(IRPM,IRPJ)
CJ      IRPBC = IRPMJ
CJ      CALL SYMTR3(IRPBC,VRT(1,1),VRT(1,2),IRPDPD(IRPBC,13),POP(IRPM,1),
CJ     1            ICORE(IADT2(IRPM)),
CJ     1            SCR1,SCR2,SCR3)
CJ  750 CONTINUE
C
C     AT THIS POINT T MATRIX IS ORDERED (BC,M). WE NEED (M,BC).
C     DO A TRANSPOSITION WHICH CANNOT BE IN PLACE.
C
      IOFFTT = IADT2(NIRREP) + LENT2(NIRREP)
C
      DO  760 IRREP=1,NIRREP
      IF(IRREP.EQ.1)THEN
      IADTT(IRREP) = IOFFTT
      ELSE
      IADTT(IRREP) = IADTT(IRREP-1) + LENT2(IRREP-1)
      ENDIF
  760 CONTINUE
C
CJ      DO  770 IRPM=1,NIRREP
CJ      IF(POP(IRPM,1).EQ.0) GOTO 770
CJ      IRPBC = DIRPRD(IRPM,IRPJ)
CJ      CALL TRANSP(ICORE(IADT2(IRPM)),ICORE(IADTT(IRPM)),
CJ     1            POP(IRPM,1),IRPDPD(IRPBC,13))
CJ  770 CONTINUE
C
C     LOOP OVER SYMMETRY BLOCKS OF M. FOR EACH SYMMETRY BLOCK
C     DETERMINE WHICH BLOCKS OF A AND BC WILL BE COMPUTED AND
C     COMPUTE THEM.
C
      IK = (I-1)*POP(IRPK,1) + K
      DO  780 IRPM=1,NIRREP
C
      IF(POP(IRPM,1).EQ.0) GOTO 780
      IRPA   = DIRPRD(IRPM,IRPIK)
      IRPBC  = DIRPRD(IRPM,IRPJ)
      IRPMJ  = IRPBC
#ifdef _DO_GSKI
      CALL XGEMM('N','T',VRT(IRPA,2),IRPDPD(IRPBC,13),POP(IRPM,1),
     1           -1.0D+00,
     1           VIKBA(IADV(IRPM),IK),VRT(IRPA,2),
     1           ICORE(IADT2(IRPM)),IRPDPD(IRPBC,13),
     1            1.0D+00,
     1           W(IADW(IRPBC)),VRT(IRPA,2))
#endif
  780 CONTINUE
C
C
C        AB
C     - T   <KJ//CM>
C        IM
C
C        BB  AB  AB
C        BB
C
      DO   810 IRREP=1,NIRREP
      LENV(IRREP) = VRT(IRREP,1) * POP(DIRPRD(IRREP,IRPJK),2)
      IF(IRREP.EQ.1)THEN
      IADV(IRREP) = 1
      ELSE
      IADV(IRREP) = IADV(IRREP-1) + LENV(IRREP-1)
      ENDIF
  810 CONTINUE
C
C     SET ADDRESSES ETC FOR T
C
      IOFFT2 = 1
      DO   820 IRPM=1,NIRREP
      IRPAB = DIRPRD(IRPM,IRPI)
      LENT2(IRPM) = IRPDPD(IRPAB,2) * POP(IRPM,2)
      IF(IRPM.EQ.1)THEN
      IADT2(IRPM) = IOFFT2
      ELSE
      IADT2(IRPM) = IADT2(IRPM-1) + LENT2(IRPM-1)
      ENDIF
  820 CONTINUE
C
      DO  850 IRPM=1,NIRREP
      IF(POP(IRPM,2).EQ.0) GOTO 850
       IRPMI = DIRPRD(IRPM,IRPI)
         IF(IRPI.GT.IRPM)THEN
         CALL GETLST(ICORE(IADT2(IRPM)),
     1               IOFFOO(IRPI,IRPMI,2) + (I-1)*POP(IRPM,2) + 1,
     1               POP(IRPM,2),1,IRPMI,45+LISTOFF)
         CALL VMINUS(ICORE(IADT2(IRPM)),IRPDPD(IRPMI,2)*POP(IRPM,2))
         ENDIF
         IF(IRPI.LT.IRPM)THEN
         DO  830 M=1,POP(IRPM,2)
         CALL GETLST(ICORE(IADT2(IRPM) + (M-1)*IRPDPD(IRPMI,2)),
     1               IOFFOO(IRPM,IRPMI,2) + (M-1)*POP(IRPI,2) + I,
     1               1,1,IRPMI,45+LISTOFF)
  830    CONTINUE
         ENDIF
         IF(IRPI.EQ.IRPM)THEN
         DO  840 M=1,POP(IRPM,2)
            IF(I.GT.M)THEN
            IM = INDEX(I-1) + M
            CALL GETLST(ICORE(IADT2(IRPM) + (M-1)*IRPDPD(IRPMI,2)),
     1                  IOFFOO(IRPI,IRPMI,2) + IM,
     1                  1,1,IRPMI,45+LISTOFF)
            CALL VMINUS(ICORE(IADT2(IRPM) + (M-1)*IRPDPD(IRPMI,2)),
     1                  IRPDPD(IRPMI,2))
            ENDIF
            IF(I.LT.M)THEN
            IM = INDEX(M-1) + I
            CALL GETLST(ICORE(IADT2(IRPM) + (M-1)*IRPDPD(IRPMI,2)),
     1                  IOFFOO(IRPM,IRPMI,2) + IM,
     1                  1,1,IRPMI,45+LISTOFF)
            ENDIF
            IF(M.EQ.I)THEN
            CALL   ZERO(ICORE(IADT2(IRPM) + (M-1)*IRPDPD(IRPMI,2)),
     1            IRPDPD(IRPMI,2))
            ENDIF
  840    CONTINUE
         ENDIF
  850 CONTINUE
C
C     LOOP OVER SYMMETRY BLOCKS OF M. FOR EACH SYMMETRY BLOCK
C     DETERMINE WHICH BLOCKS OF AB AND C WILL BE COMPUTED AND
C     COMPUTE THEM.
C
      DO  880 IRPM=1,NIRREP
C
      IF(POP(IRPM,2).EQ.0) GOTO 880
      IRPC   = DIRPRD(IRPM,IRPJK)
      IRPAB  = DIRPRD(IRPM,IRPI)
      IRPMI  = IRPAB
#ifdef _DO_GSJK
      CALL XGEMM('N','N',IRPDPD(IRPAB,2),VRT(IRPC,1),POP(IRPM,2),
     1           -1.0D+00,
     1            ICORE(IADT2(IRPM)),IRPDPD(IRPAB,2),
     1            VJKBA2(IADV(IRPC),(J-1)*POP(IRPK,1)+K),POP(IRPM,2),
     1            1.0D+00,T3(IADBLK(IRPC)),IRPDPD(IRPAB,2))
#endif
  880 CONTINUE
C
C
C      AB
C     T   <KI//CM>
C      JM
C
C      BB  AB  AB
C      BB
C
      DO   910 IRREP=1,NIRREP
      LENV(IRREP) = VRT(IRREP,1) * POP(DIRPRD(IRREP,IRPIK),2)
      IF(IRREP.EQ.1)THEN
      IADV(IRREP) = 1
      ELSE
      IADV(IRREP) = IADV(IRREP-1) + LENV(IRREP-1)
      ENDIF
  910 CONTINUE
C
C     SET ADDRESSES ETC FOR T
C
      IOFFT2 = 1
      DO   920 IRPM=1,NIRREP
      IRPAB = DIRPRD(IRPM,IRPJ)
      LENT2(IRPM) = IRPDPD(IRPAB,2) * POP(IRPM,2)
      IF(IRPM.EQ.1)THEN
      IADT2(IRPM) = IOFFT2
      ELSE
      IADT2(IRPM) = IADT2(IRPM-1) + LENT2(IRPM-1)
      ENDIF
  920 CONTINUE
C
      DO  950 IRPM=1,NIRREP
      IF(POP(IRPM,2).EQ.0) GOTO 950
       IRPMJ = DIRPRD(IRPM,IRPJ)
         IF(IRPJ.GT.IRPM)THEN
         CALL GETLST(ICORE(IADT2(IRPM)),
     1               IOFFOO(IRPJ,IRPMJ,2) + (J-1)*POP(IRPM,2) + 1,
     1               POP(IRPM,2),1,IRPMJ,45+LISTOFF)
         CALL VMINUS(ICORE(IADT2(IRPM)),IRPDPD(IRPMJ,2)*POP(IRPM,2))
         ENDIF
         IF(IRPJ.LT.IRPM)THEN
         DO  930 M=1,POP(IRPM,2)
         CALL GETLST(ICORE(IADT2(IRPM) + (M-1)*IRPDPD(IRPMJ,2)),
     1               IOFFOO(IRPM,IRPMJ,2) + (M-1)*POP(IRPJ,2) + J,
     1               1,1,IRPMJ,45+LISTOFF)
  930    CONTINUE
         ENDIF
         IF(IRPJ.EQ.IRPM)THEN
         DO  940 M=1,POP(IRPM,2)
            IF(J.GT.M)THEN
            JM = INDEX(J-1) + M
            CALL GETLST(ICORE(IADT2(IRPM) + (M-1)*IRPDPD(IRPMJ,2)),
     1                  IOFFOO(IRPJ,IRPMJ,2) + JM,
     1                  1,1,IRPMJ,45+LISTOFF)
            CALL VMINUS(ICORE(IADT2(IRPM) + (M-1)*IRPDPD(IRPMJ,2)),
     1                  IRPDPD(IRPMJ,2))
            ENDIF
            IF(J.LT.M)THEN
            JM = INDEX(M-1) + J
            CALL GETLST(ICORE(IADT2(IRPM) + (M-1)*IRPDPD(IRPMJ,2)),
     1                  IOFFOO(IRPM,IRPMJ,2) + JM,
     1                  1,1,IRPMJ,45+LISTOFF)
            ENDIF
            IF(M.EQ.J)THEN
            CALL   ZERO(ICORE(IADT2(IRPM) + (M-1)*IRPDPD(IRPMJ,2)),
     1            IRPDPD(IRPMJ,2))
            ENDIF
  940    CONTINUE
         ENDIF
  950 CONTINUE
C
C     LOOP OVER SYMMETRY BLOCKS OF M. FOR EACH SYMMETRY BLOCK
C     DETERMINE WHICH BLOCKS OF AB AND C WILL BE COMPUTED AND
C     COMPUTE THEM.
C
      DO  980 IRPM=1,NIRREP
C
      IF(POP(IRPM,2).EQ.0) GOTO 980
      IRPC   = DIRPRD(IRPM,IRPIK)
      IRPAB  = DIRPRD(IRPM,IRPJ)
      IRPMJ  = IRPAB
#ifdef _DO_GSIK
      CALL XGEMM('N','N',IRPDPD(IRPAB,2),VRT(IRPC,1),POP(IRPM,2),
     1            1.0D+00,
     1            ICORE(IADT2(IRPM)),IRPDPD(IRPAB,2),
     1            VIKBA2(IADV(IRPC),(I-1)*POP(IRPK,1)+K),POP(IRPM,2),
     1            1.0D+00,T3(IADBLK(IRPC)),IRPDPD(IRPAB,2))
#endif
  980 CONTINUE
      RETURN
      END
