       SUBROUTINE DENSOO(DOO,ICORE,MAXCOR,IUHF)     
C
C
C THIS ROUTINE CALCULATES THE OCCUPIED-OCCUPIED BLOCK
C OF THE RELAXED DENSITY MATRIX IN CORRELATION METHODS
C
C THE GENERAL FORMULA IS
C
C D(I,J) = - 1/2 SUM M,E,F T[1](IM,EF) T[1](JM,EF)      (MBPT(2))
C
C D(I,J) = - 1/2 SUM M,E,F T[1](IM,EF) T[1](JM,EF)          
C      
C          - SUM E T[1](I,E) T[1](J,E)                  (ROHF-MBPT(2))
C
C D(I,J) = - 1/2 P(IJ) SUM M,E,F T[1](IM,EF) (1/2 T[1](JM,EF)+T[2](JM,EF))  
C
C                                                       (MBPT(3))
C
C D(I,J) = - 1/4 P(IJ) SUM M,E,F T[1](IM,EF) (L[2](JM,EF)+T[2](JM,EF))  
C
C          - 1/2 SUM M,E,F T[1](IM,EF) T[1](JM,EF))  
C
C          - 1/2 P(IJ) SUM E T[1](I,E) (T[1](I,E) + T[2](I,E) + T[2](I,E))
C
C                                                       (ROHF-MBPT(3))
C
C D(I,J) = - SUM E T[2](I,E) T[2](J,E)
C
C          - 1/2 SUM M,E,F {T[2](IM,EF)+T[1](IM,EF)}{T[2](JM,EF)+T[1](JM,EF)}
C
C          - 1/2 P(IJ) SUM M,E,F T[1](IM,EF)(T[3](JM,EF) + 1/2 X(JM,EF)
C
C          - 1/12 SUM M,N,E,F,G T[2](IMN,EFG) T[2](JMN,EFG)  (MBPT(4))
C
C D(I,J) = - 1/4 P(IJ) SUM M,E,F T(IM,EF) L(JM,EF)     (CCD)
C
C D(I,J) = - 1/4 P(IJ) SUM M,E,F T(IM,EF) L(JM,EF)
C
C          - 1/2 P(IJ) SUM E T(I,E) L(J,E)             (QCISD,CCSD)
C
C D(I,J) = - 1/4 P(IJ) SUM M,E,F T(IM,EF) T(JM,EF)
C
C          - 1/2 P(IJ) SUM E T(I,E) T(J,E)             (UCC)
C
C
C THERE ARE THE FOLLOWING SPIN TYPES TO CONSIDER
C
C       D(IJ)             T(IMEF), ....
C
C       AA                AAAA,ABAB
C
C       BB                BBBB,BABA
C
C THE RHF PART USES EXPLICITELY SPIN ADAPTED CODE 
C  
C THIS SUBROUTINE USES EXPLICITELY SYMMETRY
C
C THE TRIPLES CONTRIBUTION IS CALCULATED IN TRPS AND HERE SIMPLY
C ADDED TO THE REMAINING TERMS.
C
CEND
C
C CODED  JULY/90  JG
C 
C EXTENDED FOR ROHF-MBPT(3), DECEMBER 92
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      INTEGER DIRPRD,DISSYT,POP,VRT
      LOGICAL MBPT4,CC
      LOGICAL MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC
      LOGICAL DENS,GRAD,QRHF,NONHF,ROHF,SEMI,CANON,TRIP1,TRIP2,
     &        GABCD,RELAXED,TRULY_NONHF
C
      DIMENSION ICORE(MAXCOR),DOO(1)
C
      COMMON/SYM/POP(8,2),VRT(8,2),NTAA,NTBB,NF1(2),NF2(2)
      COMMON/INFO/NOCCO(2),NVRTO(2)
      COMMON/MACHSP/IINTLN,IFLTLN,IINTFP,IALONE,IBITWD
      COMMON/METH/MBPT2,MBPT3,M4DQ,M4SDQ,M4SDTQ,CCD,QCISD,CCSD,UCC
      COMMON/FLAGS/IFLAGS(100)
      COMMON/DERIV/DENS,GRAD,QRHF,NONHF,ROHF,SEMI,CANON,TRIP1,TRIP2,
     &             GABCD,RELAXED,TRULY_NONHF
      COMMON/SYMINF/NSTART,NIRREP,IRREPA(255),IRREPB(255),DIRPRD(8,8)
      COMMON/SYMPOP/IRPDPD(8,22),ISYTYP(2,500),NTOT(18)
C
      DATA ONE,ONEM,TWOM,HALF /1.0D0,-1.0D0,-2.0D0,0.5D0/
C
      MBPT4=M4DQ.OR.M4SDQ.OR.M4SDTQ
      CC=CCD.OR.CCSD.OR.QCISD
      MXCOR=MAXCOR
C
C CONTRIBUTIONS DUE TO SINGLE EXCITATIONS
C
      IF(CCSD.OR.QCISD.OR.M4SDQ.OR.M4SDTQ.OR.UCC.OR.ROHF) THEN
C
C ALLOCATE MEMORY FOR T1 AMPLITUDES AND GET THEM FROM DISK
C
       I0T1A=MXCOR+1-NTAA*IINTFP
       MXCOR=MXCOR-NTAA*IINTFP
       CALL GETLST(ICORE(I0T1A),1,1,1,1,90)
C
       IF(CC) THEN
C
        I0T2A=I0T1A-NTAA*IINTFP
        MXCOR=MXCOR-NTAA*IINTFP
        CALL GETLST(ICORE(I0T2A),1,1,2,1,190)
C
       ELSE IF(ROHF.AND.MBPT3) THEN

        I0T2A=I0T1A-NTAA*IINTFP
        I0T3A=I0T2A-NTAA*IINTFP
        MXCOR=MXCOR-2*NTAA*IINTFP
c YAU : old
c       CALL ICOPY(NTAA*IINTFP,ICORE(I0T1A),1,ICORE(I0T2A),1)
c YAU : new
        CALL DCOPY(NTAA,ICORE(I0T1A),1,ICORE(I0T2A),1)
c YAU : end
        CALL GETLST(ICORE(I0T3A),1,1,2,3,90)
        CALL SAXPY(NTAA,ONE,ICORE(I0T3A),1,ICORE(I0T2A),1)
        CALL GETLST(ICORE(I0T3A),1,1,2,1,190)
        CALL SAXPY(NTAA,ONE,ICORE(I0T3A),1,ICORE(I0T2A),1)
C
       ELSE 
C
        I0T2A=I0T1A
C
       ENDIF
C
       IF(IUHF.EQ.0) THEN
C
        I0T1B=I0T1A
        I0T2B=I0T2A
C
       ELSE
C
        I0T1B=I0T2A-NTBB*IINTFP
        MXCOR=MXCOR-NTBB*IINTFP
        CALL GETLST(ICORE(I0T1B),1,1,1,2,90)
C
        IF(CC) THEN
C
         I0T2B=I0T1B-NTBB*IINTFP
         MXCOR=MXCOR-NTBB*IINTFP
         CALL GETLST(ICORE(I0T2B),1,1,2,2,190)
C
        ELSE IF(ROHF.AND.MBPT3) THEN
C
         I0T2B=I0T1B-NTBB*IINTFP
         I0T3B=I0T2B-NTBB*IINTFP
         MXCOR=MXCOR-2*NTBB*IINTFP
c YAU : old
c        CALL ICOPY(NTBB*IINTFP,ICORE(I0T1B),1,ICORE(I0T2B),1)
c YAU : new
         CALL DCOPY(NTBB,ICORE(I0T1B),1,ICORE(I0T2B),1)
c YAU : end
         CALL GETLST(ICORE(I0T3B),1,1,2,4,90)
         CALL SAXPY(NTBB,ONE,ICORE(I0T3B),1,ICORE(I0T2B),1)
         CALL GETLST(ICORE(I0T3B),1,1,2,2,190)
         CALL SAXPY(NTBB,ONE,ICORE(I0T3B),1,ICORE(I0T2B),1)
C
        ELSE
C
         I0T2B=I0T1B
C
        ENDIF
C
       ENDIF
C
C PERFORM MULTIPLICATION:  SUM E T(I,E) L(J,E)
C
C    THE FACTOR IS ALWAYS ONEM
C
       FACT=ONEM
C
       DO 300 ISPIN=1,IUHF+1
C
        IF(ISPIN.EQ.1) THEN
         IOFFT1=I0T1A
         IOFFT2=I0T2A
         IOFFD=1    
        ELSE
         IOFFT1=I0T1B
         IOFFT2=I0T2B
         IOFFD=1+NF1(1)
        ENDIF
C
        DO 250 IRREP=1,NIRREP
C
         NOCC=POP(IRREP,ISPIN)
         NVRT=VRT(IRREP,ISPIN)
         IF(MIN(NVRT,NOCC).GT.0) THEN
          CALL XGEMM('T','N',NOCC,NOCC,NVRT,FACT,ICORE(IOFFT1),NVRT,
     &               ICORE(IOFFT2),NVRT,ONE,DOO(IOFFD),NOCC)
         ENDIF
         IOFFT1=IOFFT1+NOCC*NVRT*IINTFP
         IOFFT2=IOFFT2+NOCC*NVRT*IINTFP 
         IOFFD=IOFFD+NOCC*NOCC
250     CONTINUE
#ifdef _DEBUG_LVL0
CSSS      Call checksum("T(a,m)*L(b,m)->DOO    :",DOO(1+(ISPIN-1)*
CSSS     &               NF1(ISPIN)), NF1(ISPIN))
         if(Ispin.eq.1) Write(6,"(a)") "T(E,I)*L(E,J)->DOO:" 
         if(Ispin.eq.2) Write(6,"(a)") "T(e,i)*L(e,j)->DOO:" 
         Call dstat("Term-11 ",doo(1+(ispin-1)*nf1(ispin)),nocco(ispin),
     &               nocco(ispin),.true.,"OO",ispin)
         Call dzero(Doo(1+(Ispin-1)*nf1(ispin)),nf1(ispin))
#endif

300    CONTINUE
C
      ENDIF
C
C CONTRIBUTION DUE TO DOUBLES
C
C    RESET MXCOR   
C
      MXCOR=MAXCOR
C
C LOOP OVER SPIN CASES (ISPIN=1: ALPHA DENSITY MATRIX, =2: BETA DENSITY MATRIX)
C
      DO 1000 ISPIN=1,IUHF+1 
C
       IF(ISPIN.EQ.1) THEN
        IOFF=1
       ELSE
        IOFF=NF1(1)+1
       ENDIF
       IF(IUHF.EQ.1) THEN
C
C CONBTRIBUTION DUE TO  AAAA OR BBBB AMPLITUDES (IS SKIPPED FOR RHF)
C
C     IN MBPT3: 
C           LISTT1 CONTAINS THE FIRST ORDER AMPLITUDES
C           LISTT2 CONTAINS THE SECOND ORDER AMPLITUDES
C     IN MBPT4:
C           LISTT1 CONTAINS THE SECOND ORDER  AMPLITUDES
C           LISTT2 CONTAINS THE SECOND ORDER  AMPLITUDES
C           LISTT3 CONTAINS THE FIRST ORDER AMPLITUDES
C           LISTT4 CONTAINS THE THIRD ORDER DELTA AMPLITUDES
C           LISTT5 CONTAINS THE X-CONTRIBUTION DUE TO QUADS
C     IN CC:
C           LISTT1 CONTAINS THE CC-AMPLITUDES
C           LISTT2 CONTAINS THE LAMBDA AMPLITUDES
C
C NOTE SOME FURTHER LOGICAL STUFF HERE
C
C MBPT2 LISTT1 IS EQUAL TO LISTT2 (DON'T READ IT IN TWICE )
CX MBPT4 THERE IS AN ADDITIONAL STEP REQUIRED HERE (LISTT4+5 TIMES LISTT3)
C
C THE SYMMETRIZATION OF THE DENSITY MATRIX
C
C                  D(I,J) =(D(I,J) + D(J,I))/2
C
C HAS TO BE CARRIED OUT FOR ALL METHODS EXCEPT MBPT2
C
       IF(MBPT2) THEN
        LISTT1=43+ISPIN
        LISTT2=43+ISPIN
        FACT=ONEM
        IFLAG=1
       ELSE IF(MBPT3) THEN
        IF(ROHF) THEN
         LISTT1=143+ISPIN
         LISTT2=60+ISPIN
         LISTT3=43+ISPIN
         FACT=ONEM
         IFLAG=5
        ELSE
         LISTT1=43+ISPIN
         LISTT2=60+ISPIN
         FACT=ONEM
         IFLAG=3
        ENDIF
       ELSE IF(MBPT4) THEN
        LISTT1=143+ISPIN
        LISTT2=143+ISPIN
        LISTT3=43+ISPIN
        LISTT4=60+ISPIN 
        LISTT5=113+ISPIN
        FACT=ONEM
        IFLAG=1
       ELSE IF(UCC) THEN
        LISTT1=43+ISPIN
        LISTT2=43+ISPIN
        FACT=ONEM
        IFLAG=1
       ELSE IF(CC) THEN
        LISTT1=43+ISPIN
        LISTT2=143+ISPIN
        FACT=ONEM
        IFLAG=2
       ENDIF
C
C
C LOOP OVER IRREPS OF EF BLOCK (THE SAME IRREPS AS THE IN AND MN BLOCKS 
C HAVE
C
       DO 100 IRREP=1,NIRREP
C
C DETERMINE LENGTH OF EXPANDED OCCUPIED-OCCUPIED BLOCK
C
        NOCC2SQ=0 
        DO 110 IRREPJ=1,NIRREP
         NOCC2SQ=NOCC2SQ+POP(IRREPJ,ISPIN)
     &                    *POP(DIRPRD(IRREPJ,IRREP),ISPIN)
110     CONTINUE 
        DISSYT=IRPDPD(IRREP,ISYTYP(1,LISTT1))
        NUMSYT=IRPDPD(IRREP,ISYTYP(2,LISTT1))  
        I001=1
        I002=I001+IINTFP*NOCC2SQ*DISSYT
        I003=I002+IINTFP*NOCC2SQ*DISSYT
        IF(MIN(NUMSYT,DISSYT).NE.0) THEN
         IF(I003.LT.MXCOR) THEN
C  
C         IN CORE VERSION
C
          CALL DOOAA(ICORE(I001),ICORE(I002),DOO(IOFF),FACT,ISPIN,
     &               POP(1,ISPIN),VRT(1,ISPIN),DISSYT,
     &               NUMSYT,LISTT1,LISTT2,LISTT3,IRREP,IFLAG)
          IF(MBPT4) THEN
           CALL DOOAA(ICORE(I001),ICORE(I002),DOO(IOFF),FACT,ISPIN,
     &               POP(1,ISPIN),VRT(1,ISPIN),DISSYT,
     &               NUMSYT,LISTT4,LISTT5,LISTT3,IRREP,4)
          ENDIF
         ELSE
          CALL INSMEM('DOOAA',I003,MXCOR)
         ENDIF
        ELSE
        ENDIF 
100    CONTINUE
       ENDIF
#ifdef _DEBUG_LVL0
CSSS        Call checksum("T(mn,ae)*L(mn,be)->DOO:",DOO(1+(ISPIN-1)*
CSSS     &               NF1(ISPIN)),NF1(ISPIN))

        If(Ispin.eq.1) Write(6,"(a)") "T(EF,IM)*L(JM,EF)(AAAA)->DOO:"
        If(Ispin.eq.2) Write(6,"(a)") "T(ef,im)*L(jm,ef)(BBBB)->DOO:"
        Call dstat("Term-12 ",doo(1+(Ispin-1)*nf1(ispin)),nocco(ispin),
     &              nocco(ispin),.true.,"OO",ispin)
        Call dzero(Doo(1+(Ispin-1)*nf1(ispin)),nf1(ispin))
#endif
C
C CONTRIBUTION DUE TO ABAB AMPLITUDES (REQUIRED FOR ALL REFERENCE FUNCTIONS)
C
       IF(MBPT2) THEN
        LISTT1=46
        LISTT2=46
        FACT=ONEM
        IFLAG=1
       ELSE IF(MBPT3) THEN
        IF(ROHF) THEN
         LISTT1=146
         LISTT2=63
         LISTT3=46
         FACT=ONEM
         IFLAG=5
        ELSE
         LISTT1=46
         LISTT2=63
         FACT=ONEM
         IFLAG=3
        ENDIF
       ELSE IF(MBPT4) THEN
        LISTT1=146
        LISTT2=146
        LISTT3=46
        LISTT4=63
        LISTT5=116
        FACT=ONEM
        IFLAG=1
       ELSE IF(UCC) THEN
        LISTT1=46
        LISTT2=46
        FACT=ONEM
        IFLAG=1
       ELSE IF(CC) THEN
        LISTT1=46
        LISTT2=146
        FACT=ONEM
        IFLAG=2
       ENDIF
C
C      LOOP OVER IRREPS.
C 
       DO 200 IRREP=1,NIRREP
C
        DISSYT=IRPDPD(IRREP,ISYTYP(1,46))
        NUMSYT=IRPDPD(IRREP,ISYTYP(2,46))
        I001=1
        I002=I001+IINTFP*NUMSYT*DISSYT
        I004=I002+IINTFP*NUMSYT*DISSYT
        IF(MIN(NUMSYT,DISSYT).NE.0) THEN
         I005=I004+3*IINTFP*MAX(NUMSYT,DISSYT)
         IF(I005.LT.MXCOR) THEN
C
C         IN CORE VERSION
C
          CALL DOOAB(ICORE(I001),ICORE(I002),DOO(IOFF),
     &               FACT,ISPIN,POP(1,ISPIN),POP(1,3-ISPIN),
     &               VRT(1,ISPIN),VRT(1,3-ISPIN),DISSYT,NUMSYT,
     &               LISTT1,LISTT2,LISTT3,IRREP,ICORE(I004),IUHF,
     &               IFLAG)
          IF(MBPT4) THEN
           CALL DOOAB(ICORE(I001),ICORE(I002),DOO(IOFF),
     &                FACT,ISPIN,POP(1,ISPIN),POP(1,3-ISPIN),
     &                VRT(1,ISPIN),VRT(1,3-ISPIN),DISSYT,NUMSYT,
     &                LISTT4,LISTT5,LISTT3,IRREP,ICORE(I004),IUHF,4)   
          ENDIF
         ELSE
          CALL INSMEM('DOOAB',I005,MXCOR)
         ENDIF
        ELSE
C
C
        ENDIF
200   CONTINUE
#ifdef _DEBUG_LVL0
CSSS        Call checksum("T(mn,ae)*L(mn,be)->DOO:",DOO(1+(ISPIN-1)*
CSSS     &               NF1(ISPIN)),NF1(ISPIN))
        Write(6,"(a)") "T(Ef,Im)*L(Jm,Ef)(ABAB)->DOO:"
        Call dstat("Term-12 ",doo(1+(Ispin-1)*nf1(ispin)),nocco(ispin),
     &              nocco(ispin),.true.,"OO",ispin)
#endif
C
C  FOR MBPT(4) ADD HERE TRIPLE CONRIBUTION 
C
      IF(CANON) THEN
C
C FOR PERTURBED CANONICAL ORBITALS, ZERO THE OFF-DIAGONAL
C PART OF DOO
C
       CALL DENCAN(DOO(IOFF),ICORE,NF1(ISPIN),NIRREP,POP(1,ISPIN))
      ENDIF 
C
      IF(.NOT.MBPT2)THEN
       CALL SYMMET5(DOO(IOFF),ICORE,POP(1,ISPIN))
      ENDIF
C
1000  CONTINUE
C
      RETURN

      END
